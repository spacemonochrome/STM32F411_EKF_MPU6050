
F411_EKF1D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee00  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800efa0  0800efa0  0000ffa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4a0  0800f4a0  00011354  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f4a0  0800f4a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4a8  0800f4a8  00011354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4a8  0800f4a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f4ac  0800f4ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000354  20000000  0800f4b0  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f8c  20000358  0800f804  00011358  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200022e4  0800f804  000122e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e86  00000000  00000000  00011384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ad  00000000  00000000  0002820a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0002bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fff  00000000  00000000  0002cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a576  00000000  00000000  0002df7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2ed  00000000  00000000  000484f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e72  00000000  00000000  000627e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7654  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006df4  00000000  00000000  000f7698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000fe48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ef88 	.word	0x0800ef88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	0800ef88 	.word	0x0800ef88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f001 faef 	bl	8002618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f85d 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 fa13 	bl	8001468 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001042:	f000 f8c1 	bl	80011c8 <MX_I2C2_Init>
  MX_TIM9_Init();
 8001046:	f000 f9d5 	bl	80013f4 <MX_TIM9_Init>
  MX_TIM2_Init();
 800104a:	f000 f8eb 	bl	8001224 <MX_TIM2_Init>
  MX_TIM3_Init();
 800104e:	f000 f935 	bl	80012bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001052:	f000 f981 	bl	8001358 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8001056:	f008 fbd9 	bl	800980c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001060:	481e      	ldr	r0, [pc, #120]	@ (80010dc <main+0xac>)
 8001062:	f001 fda5 	bl	8002bb0 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8001066:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800106a:	f001 fb17 	bl	800269c <HAL_Delay>

  checkedd = MPU6050_Init(&hi2c2); // kullanilan sensore gore degeri degisebilir mpu6050 = 104, mpu9250 = 102 107 gibi gibi degerler olabilir.
 800106e:	481c      	ldr	r0, [pc, #112]	@ (80010e0 <main+0xb0>)
 8001070:	f000 fa86 	bl	8001580 <MPU6050_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <main+0xb4>)
 800107a:	701a      	strb	r2, [r3, #0]
  //eger ki check edilmisse 0 doner. check edilmezse okunan degeri geri doner. fonksiyona girip duzeltilmesi gerekebilir.
  if (checkedd == 0)
 800107c:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <main+0xb4>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d109      	bne.n	8001098 <main+0x68>
  {

	  MPU6050_Calibration(&hi2c2, &MPU6050); // bağlanti kurulursa offset hata düzeltmesi yapilir. bu kod satiri kaldirilirsa offset kalibrasyonu yapilmaz. ham veri islenir.
 8001084:	4918      	ldr	r1, [pc, #96]	@ (80010e8 <main+0xb8>)
 8001086:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <main+0xb0>)
 8001088:	f000 fe96 	bl	8001db8 <MPU6050_Calibration>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET); // baglanti kurulursa PC13 ledi yanar.
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001092:	4812      	ldr	r0, [pc, #72]	@ (80010dc <main+0xac>)
 8001094:	f001 fd8c 	bl	8002bb0 <HAL_GPIO_WritePin>
  }

  DWT_Init();
 8001098:	f000 fa46 	bl	8001528 <DWT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t start_us = DWT_GetMicros();
 800109c:	f000 fa5e 	bl	800155c <DWT_GetMicros>
 80010a0:	6078      	str	r0, [r7, #4]

	  MPU6050_Read_WithKalman(&hi2c2, &MPU6050);
 80010a2:	4911      	ldr	r1, [pc, #68]	@ (80010e8 <main+0xb8>)
 80010a4:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <main+0xb0>)
 80010a6:	f000 fc2f 	bl	8001908 <MPU6050_Read_WithKalman>

	  if(sayac > 100) // USB portundan veri gonderiliyor. istenilirse UART-TTL module ile uarttan gonderilebilir
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <main+0xbc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b64      	cmp	r3, #100	@ 0x64
 80010b0:	d902      	bls.n	80010b8 <main+0x88>
	  {
		  //SendOrientationData((float)MPU6050.KalmanAngleZ,(float)MPU6050.KalmanAngleY,(float)MPU6050.KalmanAngleX);
		  sayac = 0; // saadece 100 devirde 1 defa gonderilir. usb protokolu polling metod kullaniyor cunku
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <main+0xbc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
	  }
	  sayac++;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <main+0xbc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <main+0xbc>)
 80010c0:	6013      	str	r3, [r2, #0]

	  end_us = DWT_GetMicros();
 80010c2:	f000 fa4b 	bl	800155c <DWT_GetMicros>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <main+0xc0>)
 80010ca:	6013      	str	r3, [r2, #0]
	  elapsed_us = end_us - start_us;
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <main+0xc0>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	4a07      	ldr	r2, [pc, #28]	@ (80010f4 <main+0xc4>)
 80010d6:	6013      	str	r3, [r2, #0]
  {
 80010d8:	e7e0      	b.n	800109c <main+0x6c>
 80010da:	bf00      	nop
 80010dc:	40020800 	.word	0x40020800
 80010e0:	20000374 	.word	0x20000374
 80010e4:	2000055c 	.word	0x2000055c
 80010e8:	200004e8 	.word	0x200004e8
 80010ec:	20000550 	.word	0x20000550
 80010f0:	20000558 	.word	0x20000558
 80010f4:	20000554 	.word	0x20000554

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2230      	movs	r2, #48	@ 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f009 fff5 	bl	800b0f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <SystemClock_Config+0xc8>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	4a26      	ldr	r2, [pc, #152]	@ (80011c0 <SystemClock_Config+0xc8>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	@ 0x40
 800112c:	4b24      	ldr	r3, [pc, #144]	@ (80011c0 <SystemClock_Config+0xc8>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <SystemClock_Config+0xcc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a20      	ldr	r2, [pc, #128]	@ (80011c4 <SystemClock_Config+0xcc>)
 8001142:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <SystemClock_Config+0xcc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001158:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001162:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001168:	2319      	movs	r3, #25
 800116a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800116c:	23c0      	movs	r3, #192	@ 0xc0
 800116e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f003 ffa7 	bl	80050d0 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001188:	f000 ffa6 	bl	80020d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2103      	movs	r1, #3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 fa09 	bl	80055c0 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011b4:	f000 ff90 	bl	80020d8 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	@ 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011ce:	4a13      	ldr	r2, [pc, #76]	@ (800121c <MX_I2C2_Init+0x54>)
 80011d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <MX_I2C2_Init+0x58>)
 80011d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_I2C2_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <MX_I2C2_Init+0x50>)
 8001206:	f001 fced 	bl	8002be4 <HAL_I2C_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001210:	f000 ff62 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000374 	.word	0x20000374
 800121c:	40005800 	.word	0x40005800
 8001220:	00061a80 	.word	0x00061a80

08001224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001240:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <MX_TIM2_Init+0x94>)
 8001242:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001248:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <MX_TIM2_Init+0x94>)
 800124a:	225f      	movs	r2, #95	@ 0x5f
 800124c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <MX_TIM2_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_TIM2_Init+0x94>)
 8001256:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800125a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <MX_TIM2_Init+0x94>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_TIM2_Init+0x94>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <MX_TIM2_Init+0x94>)
 800126a:	f004 fbbb 	bl	80059e4 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001274:	f000 ff30 	bl	80020d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <MX_TIM2_Init+0x94>)
 8001286:	f004 fd4f 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001290:	f000 ff22 	bl	80020d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_TIM2_Init+0x94>)
 80012a2:	f004 ff57 	bl	8006154 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012ac:	f000 ff14 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200003c8 	.word	0x200003c8

080012bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012da:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <MX_TIM3_Init+0x98>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012e0:	225f      	movs	r2, #95	@ 0x5f
 80012e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012ec:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80012f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012fe:	4814      	ldr	r0, [pc, #80]	@ (8001350 <MX_TIM3_Init+0x94>)
 8001300:	f004 fb70 	bl	80059e4 <HAL_TIM_Base_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800130a:	f000 fee5 	bl	80020d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001312:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	4619      	mov	r1, r3
 800131a:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_TIM3_Init+0x94>)
 800131c:	f004 fd04 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001326:	f000 fed7 	bl	80020d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	@ (8001350 <MX_TIM3_Init+0x94>)
 8001338:	f004 ff0c 	bl	8006154 <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001342:	f000 fec9 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000410 	.word	0x20000410
 8001354:	40000400 	.word	0x40000400

08001358 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_TIM4_Init+0x94>)
 8001376:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <MX_TIM4_Init+0x98>)
 8001378:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 960-1;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_TIM4_Init+0x94>)
 800137c:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001380:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_TIM4_Init+0x94>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_TIM4_Init+0x94>)
 800138a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800138e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_TIM4_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <MX_TIM4_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800139c:	4813      	ldr	r0, [pc, #76]	@ (80013ec <MX_TIM4_Init+0x94>)
 800139e:	f004 fb21 	bl	80059e4 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80013a8:	f000 fe96 	bl	80020d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <MX_TIM4_Init+0x94>)
 80013ba:	f004 fcb5 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80013c4:	f000 fe88 	bl	80020d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_TIM4_Init+0x94>)
 80013d6:	f004 febd 	bl	8006154 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80013e0:	f000 fe7a 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000458 	.word	0x20000458
 80013f0:	40000800 	.word	0x40000800

080013f4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <MX_TIM9_Init+0x6c>)
 8001408:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <MX_TIM9_Init+0x70>)
 800140a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 96-1;
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_TIM9_Init+0x6c>)
 800140e:	225f      	movs	r2, #95	@ 0x5f
 8001410:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <MX_TIM9_Init+0x6c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_TIM9_Init+0x6c>)
 800141a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800141e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_TIM9_Init+0x6c>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <MX_TIM9_Init+0x6c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <MX_TIM9_Init+0x6c>)
 800142e:	f004 fad9 	bl	80059e4 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001438:	f000 fe4e 	bl	80020d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001440:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	@ (8001460 <MX_TIM9_Init+0x6c>)
 8001448:	f004 fc6e 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001452:	f000 fe41 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200004a0 	.word	0x200004a0
 8001464:	40014000 	.word	0x40014000

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	@ 0x28
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <MX_GPIO_Init+0xb8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a26      	ldr	r2, [pc, #152]	@ (8001520 <MX_GPIO_Init+0xb8>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <MX_GPIO_Init+0xb8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <MX_GPIO_Init+0xb8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001520 <MX_GPIO_Init+0xb8>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <MX_GPIO_Init+0xb8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <MX_GPIO_Init+0xb8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a18      	ldr	r2, [pc, #96]	@ (8001520 <MX_GPIO_Init+0xb8>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <MX_GPIO_Init+0xb8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <MX_GPIO_Init+0xb8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a11      	ldr	r2, [pc, #68]	@ (8001520 <MX_GPIO_Init+0xb8>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_GPIO_Init+0xb8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014f4:	480b      	ldr	r0, [pc, #44]	@ (8001524 <MX_GPIO_Init+0xbc>)
 80014f6:	f001 fb5b 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_GPIO_Init+0xbc>)
 8001514:	f001 f9c8 	bl	80028a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	@ 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	40020800 	.word	0x40020800

08001528 <DWT_Init>:

/* USER CODE BEGIN 4 */
void DWT_Init(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;     // DWT modülünü aktif et
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <DWT_Init+0x2c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <DWT_Init+0x2c>)
 8001532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001536:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;                                     // Sayaç sıfırla
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <DWT_Init+0x30>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;                // Sayaç çalıştır
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <DWT_Init+0x30>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <DWT_Init+0x30>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6013      	str	r3, [r2, #0]
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000edf0 	.word	0xe000edf0
 8001558:	e0001000 	.word	0xe0001000

0800155c <DWT_GetMicros>:

uint32_t DWT_GetMicros(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (96000000 / 1000000);   // cycle → µs dönüşümü. benim projem 96mhz oldugu icin 96000000 yazdim.
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <DWT_GetMicros+0x1c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a05      	ldr	r2, [pc, #20]	@ (800157c <DWT_GetMicros+0x20>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	099b      	lsrs	r3, r3, #6
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e0001000 	.word	0xe0001000
 800157c:	aaaaaaab 	.word	0xaaaaaaab

08001580 <MPU6050_Init>:

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af04      	add	r7, sp, #16
 8001586:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001588:	2364      	movs	r3, #100	@ 0x64
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2301      	movs	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 030f 	add.w	r3, r7, #15
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	2275      	movs	r2, #117	@ 0x75
 800159a:	21d0      	movs	r1, #208	@ 0xd0
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f001 fd5f 	bl	8003060 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well 104
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b68      	cmp	r3, #104	@ 0x68
 80015a6:	d14c      	bne.n	8001642 <MPU6050_Init+0xc2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80015ac:	2364      	movs	r3, #100	@ 0x64
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	2301      	movs	r3, #1
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	f107 030e 	add.w	r3, r7, #14
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2301      	movs	r3, #1
 80015bc:	226b      	movs	r2, #107	@ 0x6b
 80015be:	21d0      	movs	r1, #208	@ 0xd0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f001 fc53 	bl	8002e6c <HAL_I2C_Mem_Write>

        // DLP settings
        Data = 0x03;
 80015c6:	2303      	movs	r3, #3
 80015c8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x1A, 1, &Data, 1, i2c_timeout);
 80015ca:	2364      	movs	r3, #100	@ 0x64
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2301      	movs	r3, #1
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	f107 030e 	add.w	r3, r7, #14
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2301      	movs	r3, #1
 80015da:	221a      	movs	r2, #26
 80015dc:	21d0      	movs	r1, #208	@ 0xd0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f001 fc44 	bl	8002e6c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x00;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80015e8:	2364      	movs	r3, #100	@ 0x64
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	f107 030e 	add.w	r3, r7, #14
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2301      	movs	r3, #1
 80015f8:	2219      	movs	r2, #25
 80015fa:	21d0      	movs	r1, #208	@ 0xd0
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f001 fc35 	bl	8002e6c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> 2g
        Data = 0x00;
 8001602:	2300      	movs	r3, #0
 8001604:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001606:	2364      	movs	r3, #100	@ 0x64
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	2301      	movs	r3, #1
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	f107 030e 	add.w	r3, r7, #14
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2301      	movs	r3, #1
 8001616:	221c      	movs	r2, #28
 8001618:	21d0      	movs	r1, #208	@ 0xd0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f001 fc26 	bl	8002e6c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> 250 degree/s
        Data = 0x00;
 8001620:	2300      	movs	r3, #0
 8001622:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001624:	2364      	movs	r3, #100	@ 0x64
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	2301      	movs	r3, #1
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	f107 030e 	add.w	r3, r7, #14
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2301      	movs	r3, #1
 8001634:	221b      	movs	r2, #27
 8001636:	21d0      	movs	r1, #208	@ 0xd0
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f001 fc17 	bl	8002e6c <HAL_I2C_Mem_Write>
        return 0;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <MPU6050_Init+0xc4>
    }
    return check;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b096      	sub	sp, #88	@ 0x58
 8001650:	af00      	add	r7, sp, #0
 8001652:	61f8      	str	r0, [r7, #28]
 8001654:	ed87 0b04 	vstr	d0, [r7, #16]
 8001658:	ed87 1b02 	vstr	d1, [r7, #8]
 800165c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001666:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800166a:	f7fe fe15 	bl	8000298 <__aeabi_dsub>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800167c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001684:	f7fe ffc0 	bl	8000608 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fe04 	bl	800029c <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	69f9      	ldr	r1, [r7, #28]
 800169a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80016aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ae:	f7fe ffab 	bl	8000608 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80016c0:	f7fe fdea 	bl	8000298 <__aeabi_dsub>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80016d2:	f7fe fde1 	bl	8000298 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe fdda 	bl	800029c <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016f4:	f7fe ff88 	bl	8000608 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe fdcc 	bl	800029c <__adddf3>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	69f9      	ldr	r1, [r7, #28]
 800170a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800171a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800171e:	f7fe ff73 	bl	8000608 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4620      	mov	r0, r4
 8001728:	4629      	mov	r1, r5
 800172a:	f7fe fdb5 	bl	8000298 <__aeabi_dsub>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	69f9      	ldr	r1, [r7, #28]
 8001734:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001748:	f7fe ff5e 	bl	8000608 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7fe fda0 	bl	8000298 <__aeabi_dsub>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	69f9      	ldr	r1, [r7, #28]
 800175e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800176e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001772:	f7fe ff49 	bl	8000608 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4620      	mov	r0, r4
 800177c:	4629      	mov	r1, r5
 800177e:	f7fe fd8d 	bl	800029c <__adddf3>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	69f9      	ldr	r1, [r7, #28]
 8001788:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001798:	f7fe fd80 	bl	800029c <__adddf3>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80017aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017ae:	f7ff f855 	bl	800085c <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80017c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017c4:	f7ff f84a 	bl	800085c <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017da:	f7fe fd5d 	bl	8000298 <__aeabi_dsub>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80017ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80017f4:	f7fe ff08 	bl	8000608 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4620      	mov	r0, r4
 80017fe:	4629      	mov	r1, r5
 8001800:	f7fe fd4c 	bl	800029c <__adddf3>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	69f9      	ldr	r1, [r7, #28]
 800180a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001814:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001818:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800181c:	f7fe fef4 	bl	8000608 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe fd38 	bl	800029c <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	69f9      	ldr	r1, [r7, #28]
 8001832:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800183c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001846:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001850:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001854:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001858:	f7fe fed6 	bl	8000608 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe fd18 	bl	8000298 <__aeabi_dsub>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	69f9      	ldr	r1, [r7, #28]
 800186e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001878:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800187c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001880:	f7fe fec2 	bl	8000608 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4620      	mov	r0, r4
 800188a:	4629      	mov	r1, r5
 800188c:	f7fe fd04 	bl	8000298 <__aeabi_dsub>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	69f9      	ldr	r1, [r7, #28]
 8001896:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80018a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018a8:	f7fe feae 	bl	8000608 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4620      	mov	r0, r4
 80018b2:	4629      	mov	r1, r5
 80018b4:	f7fe fcf0 	bl	8000298 <__aeabi_dsub>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	69f9      	ldr	r1, [r7, #28]
 80018be:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80018c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018d0:	f7fe fe9a 	bl	8000608 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fcdc 	bl	8000298 <__aeabi_dsub>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	69f9      	ldr	r1, [r7, #28]
 80018e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018f0:	ec43 2b17 	vmov	d7, r2, r3
};
 80018f4:	eeb0 0a47 	vmov.f32	s0, s14
 80018f8:	eef0 0a67 	vmov.f32	s1, s15
 80018fc:	3758      	adds	r7, #88	@ 0x58
 80018fe:	46bd      	mov	sp, r7
 8001900:	bdb0      	pop	{r4, r5, r7, pc}
 8001902:	0000      	movs	r0, r0
 8001904:	0000      	movs	r0, r0
	...

08001908 <MPU6050_Read_WithKalman>:

void MPU6050_Read_WithKalman(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	ed2d 8b02 	vpush	{d8}
 8001910:	b094      	sub	sp, #80	@ 0x50
 8001912:	af04      	add	r7, sp, #16
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
    static uint32_t timer_us = 0;
    uint8_t Rec_Data[14];
    int16_t temp;

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001918:	2364      	movs	r3, #100	@ 0x64
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	230e      	movs	r3, #14
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	223b      	movs	r2, #59	@ 0x3b
 800192a:	21d0      	movs	r1, #208	@ 0xd0
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f001 fb97 	bl	8003060 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = ((int16_t)(Rec_Data[0] << 8 | Rec_Data[1])) - DataStruct->Accel_X_RAW_K;
 8001932:	7c3b      	ldrb	r3, [r7, #16]
 8001934:	b21b      	sxth	r3, r3
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	7c7b      	ldrb	r3, [r7, #17]
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b21b      	sxth	r3, r3
 8001942:	b29a      	uxth	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800194a:	b29b      	uxth	r3, r3
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21a      	sxth	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = ((int16_t)(Rec_Data[2] << 8 | Rec_Data[3])) - DataStruct->Accel_Y_RAW_K;
 8001956:	7cbb      	ldrb	r3, [r7, #18]
 8001958:	b21b      	sxth	r3, r3
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21a      	sxth	r2, r3
 800195e:	7cfb      	ldrb	r3, [r7, #19]
 8001960:	b21b      	sxth	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b21b      	sxth	r3, r3
 8001966:	b29a      	uxth	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 800196e:	b29b      	uxth	r3, r3
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	b29b      	uxth	r3, r3
 8001974:	b21a      	sxth	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = ((int16_t)(Rec_Data[4] << 8 | Rec_Data[5])) - DataStruct->Accel_Z_RAW_K;
 800197a:	7d3b      	ldrb	r3, [r7, #20]
 800197c:	b21b      	sxth	r3, r3
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	7d7b      	ldrb	r3, [r7, #21]
 8001984:	b21b      	sxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b21b      	sxth	r3, r3
 800198a:	b29a      	uxth	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001992:	b29b      	uxth	r3, r3
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	b29b      	uxth	r3, r3
 8001998:	b21a      	sxth	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800199e:	7dbb      	ldrb	r3, [r7, #22]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    DataStruct->Gyro_X_RAW = ((int16_t)(Rec_Data[8] << 8 | Rec_Data[9])) - DataStruct->Gyro_X_RAW_K;
 80019ae:	7e3b      	ldrb	r3, [r7, #24]
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	b21a      	sxth	r2, r3
 80019b6:	7e7b      	ldrb	r3, [r7, #25]
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b21b      	sxth	r3, r3
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	b21a      	sxth	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = ((int16_t)(Rec_Data[10] << 8 | Rec_Data[11])) - DataStruct->Gyro_Y_RAW_K;
 80019d2:	7ebb      	ldrb	r3, [r7, #26]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	b21a      	sxth	r2, r3
 80019da:	7efb      	ldrb	r3, [r7, #27]
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = ((int16_t)(Rec_Data[12] << 8 | Rec_Data[13])) - DataStruct->Gyro_Z_RAW_K;
 80019f6:	7f3b      	ldrb	r3, [r7, #28]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	7f7b      	ldrb	r3, [r7, #29]
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd87 	bl	8000534 <__aeabi_i2d>
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4bb3      	ldr	r3, [pc, #716]	@ (8001cf8 <MPU6050_Read_WithKalman+0x3f0>)
 8001a2c:	f7fe ff16 	bl	800085c <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fd77 	bl	8000534 <__aeabi_i2d>
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4bab      	ldr	r3, [pc, #684]	@ (8001cf8 <MPU6050_Read_WithKalman+0x3f0>)
 8001a4c:	f7fe ff06 	bl	800085c <__aeabi_ddiv>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / 16384.0;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fd67 	bl	8000534 <__aeabi_i2d>
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	4ba3      	ldr	r3, [pc, #652]	@ (8001cf8 <MPU6050_Read_WithKalman+0x3f0>)
 8001a6c:	f7fe fef6 	bl	800085c <__aeabi_ddiv>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001a7a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a86:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8001cfc <MPU6050_Read_WithKalman+0x3f4>
 8001a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8e:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8001d00 <MPU6050_Read_WithKalman+0x3f8>
 8001a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd46 	bl	8000534 <__aeabi_i2d>
 8001aa8:	a38d      	add	r3, pc, #564	@ (adr r3, 8001ce0 <MPU6050_Read_WithKalman+0x3d8>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fed5 	bl	800085c <__aeabi_ddiv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd36 	bl	8000534 <__aeabi_i2d>
 8001ac8:	a385      	add	r3, pc, #532	@ (adr r3, 8001ce0 <MPU6050_Read_WithKalman+0x3d8>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	f7fe fec5 	bl	800085c <__aeabi_ddiv>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd26 	bl	8000534 <__aeabi_i2d>
 8001ae8:	a37d      	add	r3, pc, #500	@ (adr r3, 8001ce0 <MPU6050_Read_WithKalman+0x3d8>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe feb5 	bl	800085c <__aeabi_ddiv>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	68b9      	ldr	r1, [r7, #8]
 8001af8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    uint32_t now_us = DWT_GetMicros();
 8001afc:	f7ff fd2e 	bl	800155c <DWT_GetMicros>
 8001b00:	63b8      	str	r0, [r7, #56]	@ 0x38
    double dt = (now_us - timer_us) / 1000000.0;
 8001b02:	4b80      	ldr	r3, [pc, #512]	@ (8001d04 <MPU6050_Read_WithKalman+0x3fc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd02 	bl	8000514 <__aeabi_ui2d>
 8001b10:	a375      	add	r3, pc, #468	@ (adr r3, 8001ce8 <MPU6050_Read_WithKalman+0x3e0>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fea1 	bl	800085c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    timer_us = now_us;
 8001b22:	4a78      	ldr	r2, [pc, #480]	@ (8001d04 <MPU6050_Read_WithKalman+0x3fc>)
 8001b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b26:	6013      	str	r3, [r2, #0]

    // Roll ve Pitch hesaplamaları
    double roll = atan2(DataStruct->Ay, sqrt(DataStruct->Ax * DataStruct->Ax + DataStruct->Az * DataStruct->Az)) * RAD_TO_DEG;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	ed93 8b04 	vldr	d8, [r3, #16]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b3a:	f7fe fd65 	bl	8000608 <__aeabi_dmul>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4692      	mov	sl, r2
 8001b44:	469b      	mov	fp, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b52:	f7fe fd59 	bl	8000608 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4650      	mov	r0, sl
 8001b5c:	4659      	mov	r1, fp
 8001b5e:	f7fe fb9d 	bl	800029c <__adddf3>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	ec43 2b17 	vmov	d7, r2, r3
 8001b6a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b6e:	eef0 0a67 	vmov.f32	s1, s15
 8001b72:	f00c fe9d 	bl	800e8b0 <sqrt>
 8001b76:	eeb0 7a40 	vmov.f32	s14, s0
 8001b7a:	eef0 7a60 	vmov.f32	s15, s1
 8001b7e:	eeb0 1a47 	vmov.f32	s2, s14
 8001b82:	eef0 1a67 	vmov.f32	s3, s15
 8001b86:	eeb0 0a48 	vmov.f32	s0, s16
 8001b8a:	eef0 0a68 	vmov.f32	s1, s17
 8001b8e:	f00c fe8d 	bl	800e8ac <atan2>
 8001b92:	ec51 0b10 	vmov	r0, r1, d0
 8001b96:	a356      	add	r3, pc, #344	@ (adr r3, 8001cf0 <MPU6050_Read_WithKalman+0x3e8>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fd34 	bl	8000608 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double pitch = atan2(-DataStruct->Ax, DataStruct->Az) * RAD_TO_DEG;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bae:	603a      	str	r2, [r7, #0]
 8001bb0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	ed93 7b06 	vldr	d7, [r3, #24]
 8001bbc:	eeb0 1a47 	vmov.f32	s2, s14
 8001bc0:	eef0 1a67 	vmov.f32	s3, s15
 8001bc4:	ed97 0b00 	vldr	d0, [r7]
 8001bc8:	f00c fe70 	bl	800e8ac <atan2>
 8001bcc:	ec51 0b10 	vmov	r0, r1, d0
 8001bd0:	a347      	add	r3, pc, #284	@ (adr r3, 8001cf0 <MPU6050_Read_WithKalman+0x3e8>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fd17 	bl	8000608 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Pitch için ±90° kontrolü (Gimbal lock önleme)
        if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b48      	ldr	r3, [pc, #288]	@ (8001d08 <MPU6050_Read_WithKalman+0x400>)
 8001be8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bec:	f7fe ff7e 	bl	8000aec <__aeabi_dcmplt>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00a      	beq.n	8001c0c <MPU6050_Read_WithKalman+0x304>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b42      	ldr	r3, [pc, #264]	@ (8001d0c <MPU6050_Read_WithKalman+0x404>)
 8001c02:	f7fe ff91 	bl	8000b28 <__aeabi_dcmpgt>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d114      	bne.n	8001c36 <MPU6050_Read_WithKalman+0x32e>
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <MPU6050_Read_WithKalman+0x404>)
 8001c12:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c16:	f7fe ff87 	bl	8000b28 <__aeabi_dcmpgt>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d015      	beq.n	8001c4c <MPU6050_Read_WithKalman+0x344>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4b37      	ldr	r3, [pc, #220]	@ (8001d08 <MPU6050_Read_WithKalman+0x400>)
 8001c2c:	f7fe ff5e 	bl	8000aec <__aeabi_dcmplt>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <MPU6050_Read_WithKalman+0x344>
        {
            KalmanY.angle = pitch;
 8001c36:	4936      	ldr	r1, [pc, #216]	@ (8001d10 <MPU6050_Read_WithKalman+0x408>)
 8001c38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
            DataStruct->KalmanAngleY = pitch;
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c46:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001c4a:	e014      	b.n	8001c76 <MPU6050_Read_WithKalman+0x36e>
        }
        else
        {
            DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001c52:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8001c56:	eeb0 1a47 	vmov.f32	s2, s14
 8001c5a:	eef0 1a67 	vmov.f32	s3, s15
 8001c5e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001c62:	482b      	ldr	r0, [pc, #172]	@ (8001d10 <MPU6050_Read_WithKalman+0x408>)
 8001c64:	f7ff fcf2 	bl	800164c <Kalman_getAngle>
 8001c68:	eeb0 7a40 	vmov.f32	s14, s0
 8001c6c:	eef0 7a60 	vmov.f32	s15, s1
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
        }

        // Roll için ±90° kontrolü (Gimbal lock önleme)
        if ((roll < -90 && DataStruct->KalmanAngleX > 90) || (roll > 90 && DataStruct->KalmanAngleX < -90))
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <MPU6050_Read_WithKalman+0x400>)
 8001c7c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c80:	f7fe ff34 	bl	8000aec <__aeabi_dcmplt>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00a      	beq.n	8001ca0 <MPU6050_Read_WithKalman+0x398>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <MPU6050_Read_WithKalman+0x404>)
 8001c96:	f7fe ff47 	bl	8000b28 <__aeabi_dcmpgt>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d114      	bne.n	8001cca <MPU6050_Read_WithKalman+0x3c2>
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <MPU6050_Read_WithKalman+0x404>)
 8001ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001caa:	f7fe ff3d 	bl	8000b28 <__aeabi_dcmpgt>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d031      	beq.n	8001d18 <MPU6050_Read_WithKalman+0x410>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <MPU6050_Read_WithKalman+0x400>)
 8001cc0:	f7fe ff14 	bl	8000aec <__aeabi_dcmplt>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d026      	beq.n	8001d18 <MPU6050_Read_WithKalman+0x410>
        {
            KalmanX.angle = roll;
 8001cca:	4912      	ldr	r1, [pc, #72]	@ (8001d14 <MPU6050_Read_WithKalman+0x40c>)
 8001ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cd0:	e9c1 2306 	strd	r2, r3, [r1, #24]
            DataStruct->KalmanAngleX = roll;
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cda:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001cde:	e030      	b.n	8001d42 <MPU6050_Read_WithKalman+0x43a>
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	40606000 	.word	0x40606000
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	412e8480 	.word	0x412e8480
 8001cf0:	1a63c1f8 	.word	0x1a63c1f8
 8001cf4:	404ca5dc 	.word	0x404ca5dc
 8001cf8:	40d00000 	.word	0x40d00000
 8001cfc:	43aa0000 	.word	0x43aa0000
 8001d00:	42121eb8 	.word	0x42121eb8
 8001d04:	20000560 	.word	0x20000560
 8001d08:	c0568000 	.word	0xc0568000
 8001d0c:	40568000 	.word	0x40568000
 8001d10:	20000048 	.word	0x20000048
 8001d14:	20000000 	.word	0x20000000
        }
        else
        {
            DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8001d1e:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8001d22:	eeb0 1a47 	vmov.f32	s2, s14
 8001d26:	eef0 1a67 	vmov.f32	s3, s15
 8001d2a:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001d2e:	4820      	ldr	r0, [pc, #128]	@ (8001db0 <MPU6050_Read_WithKalman+0x4a8>)
 8001d30:	f7ff fc8c 	bl	800164c <Kalman_getAngle>
 8001d34:	eeb0 7a40 	vmov.f32	s14, s0
 8001d38:	eef0 7a60 	vmov.f32	s15, s1
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
        }

    // Yaw için jiroskop entegrasyonu
    DataStruct->KalmanAngleZ += DataStruct->Gz * dt;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	e9d3 ab18 	ldrd	sl, fp, [r3, #96]	@ 0x60
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001d4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d52:	f7fe fc59 	bl	8000608 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4650      	mov	r0, sl
 8001d5c:	4659      	mov	r1, fp
 8001d5e:	f7fe fa9d 	bl	800029c <__adddf3>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60

    // Jiroskop yön düzeltmesi (pitch ±90° durumunda)
    if (fabs(DataStruct->KalmanAngleY) > 90) {
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001d72:	4690      	mov	r8, r2
 8001d74:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <MPU6050_Read_WithKalman+0x4ac>)
 8001d7e:	4640      	mov	r0, r8
 8001d80:	4649      	mov	r1, r9
 8001d82:	f7fe fed1 	bl	8000b28 <__aeabi_dcmpgt>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d100      	bne.n	8001d8e <MPU6050_Read_WithKalman+0x486>
        DataStruct->Gx = -DataStruct->Gx;
    }
}
 8001d8c:	e008      	b.n	8001da0 <MPU6050_Read_WithKalman+0x498>
        DataStruct->Gx = -DataStruct->Gx;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001d94:	4614      	mov	r4, r2
 8001d96:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
}
 8001da0:	bf00      	nop
 8001da2:	3740      	adds	r7, #64	@ 0x40
 8001da4:	46bd      	mov	sp, r7
 8001da6:	ecbd 8b02 	vpop	{d8}
 8001daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000
 8001db4:	40568000 	.word	0x40568000

08001db8 <MPU6050_Calibration>:
        return (0xFFFFFFFF - timer_start) + timer_end + 1;
    }
}

void MPU6050_Calibration(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	@ 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	int32_t kalibreAx = 0, kalibreAy = 0, kalibreAz = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
	int32_t kalibreGx = 0, kalibreGy = 0, kalibreGz = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]

	for (uint8_t sayac = 0; sayac < 250; sayac++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e033      	b.n	8001e48 <MPU6050_Calibration+0x90>
	{
		MPU6050_Read_All(I2Cx,DataStruct);
 8001de0:	6839      	ldr	r1, [r7, #0]
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f890 	bl	8001f08 <MPU6050_Read_All>
		kalibreAx += DataStruct->Accel_X_RAW;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dee:	461a      	mov	r2, r3
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	4413      	add	r3, r2
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
		kalibreAy += DataStruct->Accel_Y_RAW;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	4413      	add	r3, r2
 8001e02:	623b      	str	r3, [r7, #32]
		kalibreAz += DataStruct->Accel_Z_RAW;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	4413      	add	r3, r2
 8001e10:	61fb      	str	r3, [r7, #28]

		kalibreGx += DataStruct->Gyro_X_RAW;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
		kalibreGy += DataStruct->Gyro_Y_RAW;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001e26:	461a      	mov	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
		kalibreGz += DataStruct->Gyro_Z_RAW;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001e34:	461a      	mov	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
		HAL_Delay(1);
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f000 fc2d 	bl	800269c <HAL_Delay>
	for (uint8_t sayac = 0; sayac < 250; sayac++)
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	3301      	adds	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2bf9      	cmp	r3, #249	@ 0xf9
 8001e4c:	d9c8      	bls.n	8001de0 <MPU6050_Calibration+0x28>
	}

	DataStruct->Accel_X_RAW_K = (int16_t)(kalibreAx / 250);
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	4a2a      	ldr	r2, [pc, #168]	@ (8001efc <MPU6050_Calibration+0x144>)
 8001e52:	fb82 1203 	smull	r1, r2, r2, r3
 8001e56:	1112      	asrs	r2, r2, #4
 8001e58:	17db      	asrs	r3, r3, #31
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	DataStruct->Accel_Y_RAW_K = (int16_t)(kalibreAy / 250);
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	4a25      	ldr	r2, [pc, #148]	@ (8001efc <MPU6050_Calibration+0x144>)
 8001e68:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6c:	1112      	asrs	r2, r2, #4
 8001e6e:	17db      	asrs	r3, r3, #31
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	DataStruct->Accel_Z_RAW_K = (int16_t)((kalibreAz / 250.0) - 16384.0);
 8001e7a:	69f8      	ldr	r0, [r7, #28]
 8001e7c:	f7fe fb5a 	bl	8000534 <__aeabi_i2d>
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <MPU6050_Calibration+0x148>)
 8001e86:	f7fe fce9 	bl	800085c <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <MPU6050_Calibration+0x14c>)
 8001e98:	f7fe f9fe 	bl	8000298 <__aeabi_dsub>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fe60 	bl	8000b68 <__aeabi_d2iz>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	DataStruct->Gyro_X_RAW_K = (int16_t)(kalibreGx / 250);
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4a11      	ldr	r2, [pc, #68]	@ (8001efc <MPU6050_Calibration+0x144>)
 8001eb6:	fb82 1203 	smull	r1, r2, r2, r3
 8001eba:	1112      	asrs	r2, r2, #4
 8001ebc:	17db      	asrs	r3, r3, #31
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	b21a      	sxth	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	DataStruct->Gyro_Y_RAW_K = (int16_t)(kalibreGy / 250);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	4a0c      	ldr	r2, [pc, #48]	@ (8001efc <MPU6050_Calibration+0x144>)
 8001ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed0:	1112      	asrs	r2, r2, #4
 8001ed2:	17db      	asrs	r3, r3, #31
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	DataStruct->Gyro_Z_RAW_K = (int16_t)(kalibreGz / 250);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4a06      	ldr	r2, [pc, #24]	@ (8001efc <MPU6050_Calibration+0x144>)
 8001ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee6:	1112      	asrs	r2, r2, #4
 8001ee8:	17db      	asrs	r3, r3, #31
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b21a      	sxth	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	@ 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	10624dd3 	.word	0x10624dd3
 8001f00:	406f4000 	.word	0x406f4000
 8001f04:	40d00000 	.word	0x40d00000

08001f08 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af04      	add	r7, sp, #16
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001f12:	2364      	movs	r3, #100	@ 0x64
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	230e      	movs	r3, #14
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	f107 0308 	add.w	r3, r7, #8
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	223b      	movs	r2, #59	@ 0x3b
 8001f24:	21d0      	movs	r1, #208	@ 0xd0
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f001 f89a 	bl	8003060 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001f2c:	7a3b      	ldrb	r3, [r7, #8]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	7a7b      	ldrb	r3, [r7, #9]
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001f40:	7abb      	ldrb	r3, [r7, #10]
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	7afb      	ldrb	r3, [r7, #11]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b21a      	sxth	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001f54:	7b3b      	ldrb	r3, [r7, #12]
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	7b7b      	ldrb	r3, [r7, #13]
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001f68:	7bbb      	ldrb	r3, [r7, #14]
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	82fb      	strh	r3, [r7, #22]
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001f78:	7c3b      	ldrb	r3, [r7, #16]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	7c7b      	ldrb	r3, [r7, #17]
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001f8c:	7cbb      	ldrb	r3, [r7, #18]
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001fa0:	7d3b      	ldrb	r3, [r7, #20]
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	7d7b      	ldrb	r3, [r7, #21]
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe faba 	bl	8000534 <__aeabi_i2d>
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <MPU6050_Read_All+0x1a0>)
 8001fc6:	f7fe fc49 	bl	800085c <__aeabi_ddiv>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	6839      	ldr	r1, [r7, #0]
 8001fd0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe faaa 	bl	8000534 <__aeabi_i2d>
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	4b30      	ldr	r3, [pc, #192]	@ (80020a8 <MPU6050_Read_All+0x1a0>)
 8001fe6:	f7fe fc39 	bl	800085c <__aeabi_ddiv>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	6839      	ldr	r1, [r7, #0]
 8001ff0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / 16384.0;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa9a 	bl	8000534 <__aeabi_i2d>
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	4b28      	ldr	r3, [pc, #160]	@ (80020a8 <MPU6050_Read_All+0x1a0>)
 8002006:	f7fe fc29 	bl	800085c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002014:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002020:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80020ac <MPU6050_Read_All+0x1a4>
 8002024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002028:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80020b0 <MPU6050_Read_All+0x1a8>
 800202c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa79 	bl	8000534 <__aeabi_i2d>
 8002042:	a317      	add	r3, pc, #92	@ (adr r3, 80020a0 <MPU6050_Read_All+0x198>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe fc08 	bl	800085c <__aeabi_ddiv>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa69 	bl	8000534 <__aeabi_i2d>
 8002062:	a30f      	add	r3, pc, #60	@ (adr r3, 80020a0 <MPU6050_Read_All+0x198>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	f7fe fbf8 	bl	800085c <__aeabi_ddiv>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa59 	bl	8000534 <__aeabi_i2d>
 8002082:	a307      	add	r3, pc, #28	@ (adr r3, 80020a0 <MPU6050_Read_All+0x198>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fbe8 	bl	800085c <__aeabi_ddiv>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	00000000 	.word	0x00000000
 80020a4:	40606000 	.word	0x40606000
 80020a8:	40d00000 	.word	0x40d00000
 80020ac:	43aa0000 	.word	0x43aa0000
 80020b0:	42121eb8 	.word	0x42121eb8

080020b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80020c6:	f000 fac9 	bl	800265c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40014800 	.word	0x40014800

080020d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
}
 80020de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <Error_Handler+0x8>

080020e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <HAL_MspInit+0x4c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002130 <HAL_MspInit+0x4c>)
 80020f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <HAL_MspInit+0x4c>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <HAL_MspInit+0x4c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	4a08      	ldr	r2, [pc, #32]	@ (8002130 <HAL_MspInit+0x4c>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	@ 0x40
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_MspInit+0x4c>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800

08002134 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a21      	ldr	r2, [pc, #132]	@ (80021d8 <HAL_I2C_MspInit+0xa4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d13c      	bne.n	80021d0 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <HAL_I2C_MspInit+0xa8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a1f      	ldr	r2, [pc, #124]	@ (80021dc <HAL_I2C_MspInit+0xa8>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <HAL_I2C_MspInit+0xa8>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002178:	2312      	movs	r3, #18
 800217a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002184:	2304      	movs	r3, #4
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	4814      	ldr	r0, [pc, #80]	@ (80021e0 <HAL_I2C_MspInit+0xac>)
 8002190:	f000 fb8a 	bl	80028a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002194:	2308      	movs	r3, #8
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002198:	2312      	movs	r3, #18
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80021a4:	2309      	movs	r3, #9
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	480c      	ldr	r0, [pc, #48]	@ (80021e0 <HAL_I2C_MspInit+0xac>)
 80021b0:	f000 fb7a 	bl	80028a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <HAL_I2C_MspInit+0xa8>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <HAL_I2C_MspInit+0xa8>)
 80021be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <HAL_I2C_MspInit+0xa8>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	@ 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40005800 	.word	0x40005800
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020400 	.word	0x40020400

080021e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	4b27      	ldr	r3, [pc, #156]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	4a26      	ldr	r2, [pc, #152]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6413      	str	r3, [r2, #64]	@ 0x40
 8002206:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002212:	e03a      	b.n	800228a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a20      	ldr	r2, [pc, #128]	@ (800229c <HAL_TIM_Base_MspInit+0xb8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10e      	bne.n	800223c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	4a1c      	ldr	r2, [pc, #112]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6413      	str	r3, [r2, #64]	@ 0x40
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
}
 800223a:	e026      	b.n	800228a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <HAL_TIM_Base_MspInit+0xbc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10e      	bne.n	8002264 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6413      	str	r3, [r2, #64]	@ 0x40
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
}
 8002262:	e012      	b.n	800228a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0e      	ldr	r2, [pc, #56]	@ (80022a4 <HAL_TIM_Base_MspInit+0xc0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10d      	bne.n	800228a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227c:	6453      	str	r3, [r2, #68]	@ 0x44
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_TIM_Base_MspInit+0xb4>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800
 80022a4:	40014000 	.word	0x40014000

080022a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	@ 0x30
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002378 <HAL_InitTick+0xd0>)
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002378 <HAL_InitTick+0xd0>)
 80022c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002378 <HAL_InitTick+0xd0>)
 80022ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022d4:	f107 020c 	add.w	r2, r7, #12
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fb4e 	bl	8005980 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022e4:	f003 fb38 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 80022e8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	4a23      	ldr	r2, [pc, #140]	@ (800237c <HAL_InitTick+0xd4>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	0c9b      	lsrs	r3, r3, #18
 80022f4:	3b01      	subs	r3, #1
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80022f8:	4b21      	ldr	r3, [pc, #132]	@ (8002380 <HAL_InitTick+0xd8>)
 80022fa:	4a22      	ldr	r2, [pc, #136]	@ (8002384 <HAL_InitTick+0xdc>)
 80022fc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <HAL_InitTick+0xd8>)
 8002300:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002304:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002306:	4a1e      	ldr	r2, [pc, #120]	@ (8002380 <HAL_InitTick+0xd8>)
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800230c:	4b1c      	ldr	r3, [pc, #112]	@ (8002380 <HAL_InitTick+0xd8>)
 800230e:	2200      	movs	r2, #0
 8002310:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_InitTick+0xd8>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002318:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <HAL_InitTick+0xd8>)
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800231e:	4818      	ldr	r0, [pc, #96]	@ (8002380 <HAL_InitTick+0xd8>)
 8002320:	f003 fb60 	bl	80059e4 <HAL_TIM_Base_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800232a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800232e:	2b00      	cmp	r3, #0
 8002330:	d11b      	bne.n	800236a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8002332:	4813      	ldr	r0, [pc, #76]	@ (8002380 <HAL_InitTick+0xd8>)
 8002334:	f003 fba6 	bl	8005a84 <HAL_TIM_Base_Start_IT>
 8002338:	4603      	mov	r3, r0
 800233a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800233e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002342:	2b00      	cmp	r3, #0
 8002344:	d111      	bne.n	800236a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002346:	201a      	movs	r0, #26
 8002348:	f000 faa0 	bl	800288c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b0f      	cmp	r3, #15
 8002350:	d808      	bhi.n	8002364 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8002352:	2200      	movs	r2, #0
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	201a      	movs	r0, #26
 8002358:	f000 fa7c 	bl	8002854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800235c:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_InitTick+0xe0>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e002      	b.n	800236a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800236a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800236e:	4618      	mov	r0, r3
 8002370:	3730      	adds	r7, #48	@ 0x30
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	431bde83 	.word	0x431bde83
 8002380:	20000564 	.word	0x20000564
 8002384:	40014800 	.word	0x40014800
 8002388:	20000094 	.word	0x20000094

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <NMI_Handler+0x4>

08002394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <HardFault_Handler+0x4>

0800239c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <MemManage_Handler+0x4>

080023a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <BusFault_Handler+0x4>

080023ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <UsageFault_Handler+0x4>

080023b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80023f0:	4802      	ldr	r0, [pc, #8]	@ (80023fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80023f2:	f003 fba9 	bl	8005b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000564 	.word	0x20000564

08002400 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002404:	4802      	ldr	r0, [pc, #8]	@ (8002410 <OTG_FS_IRQHandler+0x10>)
 8002406:	f001 fd55 	bl	8003eb4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20001a94 	.word	0x20001a94

08002414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return 1;
 8002418:	2301      	movs	r3, #1
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_kill>:

int _kill(int pid, int sig)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800242e:	f008 feb5 	bl	800b19c <__errno>
 8002432:	4603      	mov	r3, r0
 8002434:	2216      	movs	r2, #22
 8002436:	601a      	str	r2, [r3, #0]
  return -1;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_exit>:

void _exit (int status)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ffe7 	bl	8002424 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002456:	bf00      	nop
 8002458:	e7fd      	b.n	8002456 <_exit+0x12>

0800245a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e00a      	b.n	8002482 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800246c:	f3af 8000 	nop.w
 8002470:	4601      	mov	r1, r0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	60ba      	str	r2, [r7, #8]
 8002478:	b2ca      	uxtb	r2, r1
 800247a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3301      	adds	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	dbf0      	blt.n	800246c <_read+0x12>
  }

  return len;
 800248a:	687b      	ldr	r3, [r7, #4]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	e009      	b.n	80024ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	60ba      	str	r2, [r7, #8]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3301      	adds	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	dbf1      	blt.n	80024a6 <_write+0x12>
  }
  return len;
 80024c2:	687b      	ldr	r3, [r7, #4]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_close>:

int _close(int file)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024f4:	605a      	str	r2, [r3, #4]
  return 0;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_isatty>:

int _isatty(int file)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800250c:	2301      	movs	r3, #1
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800253c:	4a14      	ldr	r2, [pc, #80]	@ (8002590 <_sbrk+0x5c>)
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <_sbrk+0x60>)
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002548:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <_sbrk+0x64>)
 8002552:	4a12      	ldr	r2, [pc, #72]	@ (800259c <_sbrk+0x68>)
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <_sbrk+0x64>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	429a      	cmp	r2, r3
 8002562:	d207      	bcs.n	8002574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002564:	f008 fe1a 	bl	800b19c <__errno>
 8002568:	4603      	mov	r3, r0
 800256a:	220c      	movs	r2, #12
 800256c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	e009      	b.n	8002588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002574:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <_sbrk+0x64>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800257a:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	4a05      	ldr	r2, [pc, #20]	@ (8002598 <_sbrk+0x64>)
 8002584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20020000 	.word	0x20020000
 8002594:	00000400 	.word	0x00000400
 8002598:	200005ac 	.word	0x200005ac
 800259c:	200022e8 	.word	0x200022e8

080025a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <SystemInit+0x20>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <SystemInit+0x20>)
 80025ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025c8:	f7ff ffea 	bl	80025a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025cc:	480c      	ldr	r0, [pc, #48]	@ (8002600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ce:	490d      	ldr	r1, [pc, #52]	@ (8002604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d4:	e002      	b.n	80025dc <LoopCopyDataInit>

080025d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025da:	3304      	adds	r3, #4

080025dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e0:	d3f9      	bcc.n	80025d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e2:	4a0a      	ldr	r2, [pc, #40]	@ (800260c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e8:	e001      	b.n	80025ee <LoopFillZerobss>

080025ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ec:	3204      	adds	r2, #4

080025ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f0:	d3fb      	bcc.n	80025ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025f2:	f008 fdd9 	bl	800b1a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025f6:	f7fe fd1b 	bl	8001030 <main>
  bx  lr    
 80025fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002604:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8002608:	0800f4b0 	.word	0x0800f4b0
  ldr r2, =_sbss
 800260c:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002610:	200022e4 	.word	0x200022e4

08002614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC_IRQHandler>
	...

08002618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800261c:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <HAL_Init+0x40>)
 8002622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_Init+0x40>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <HAL_Init+0x40>)
 800262e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002634:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a07      	ldr	r2, [pc, #28]	@ (8002658 <HAL_Init+0x40>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002640:	2003      	movs	r0, #3
 8002642:	f000 f8fc 	bl	800283e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002646:	200f      	movs	r0, #15
 8002648:	f7ff fe2e 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800264c:	f7ff fd4a 	bl	80020e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023c00 	.word	0x40023c00

0800265c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_IncTick+0x20>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_IncTick+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4413      	add	r3, r2
 800266c:	4a04      	ldr	r2, [pc, #16]	@ (8002680 <HAL_IncTick+0x24>)
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000098 	.word	0x20000098
 8002680:	200005b0 	.word	0x200005b0

08002684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <HAL_GetTick+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	200005b0 	.word	0x200005b0

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff ffee 	bl	8002684 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d005      	beq.n	80026c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <HAL_Delay+0x44>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026c2:	bf00      	nop
 80026c4:	f7ff ffde 	bl	8002684 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8f7      	bhi.n	80026c4 <HAL_Delay+0x28>
  {
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000098 	.word	0x20000098

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4907      	ldr	r1, [pc, #28]	@ (8002780 <__NVIC_EnableIRQ+0x38>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	@ (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	@ (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	@ 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	@ 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ff4c 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002866:	f7ff ff61 	bl	800272c <__NVIC_GetPriorityGrouping>
 800286a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	6978      	ldr	r0, [r7, #20]
 8002872:	f7ff ffb1 	bl	80027d8 <NVIC_EncodePriority>
 8002876:	4602      	mov	r2, r0
 8002878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ff80 	bl	8002784 <__NVIC_SetPriority>
}
 8002884:	bf00      	nop
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff54 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	@ 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	e159      	b.n	8002b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c4:	2201      	movs	r2, #1
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	429a      	cmp	r2, r3
 80028de:	f040 8148 	bne.w	8002b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d005      	beq.n	80028fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d130      	bne.n	800295c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002930:	2201      	movs	r2, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 0201 	and.w	r2, r3, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b03      	cmp	r3, #3
 8002966:	d017      	beq.n	8002998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2203      	movs	r2, #3
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d123      	bne.n	80029ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	08da      	lsrs	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3208      	adds	r2, #8
 80029ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	08da      	lsrs	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3208      	adds	r2, #8
 80029e6:	69b9      	ldr	r1, [r7, #24]
 80029e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0203 	and.w	r2, r3, #3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a2 	beq.w	8002b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b57      	ldr	r3, [pc, #348]	@ (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	4a56      	ldr	r2, [pc, #344]	@ (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a3e:	4b54      	ldr	r3, [pc, #336]	@ (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a4a:	4a52      	ldr	r2, [pc, #328]	@ (8002b94 <HAL_GPIO_Init+0x2ec>)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	220f      	movs	r2, #15
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a49      	ldr	r2, [pc, #292]	@ (8002b98 <HAL_GPIO_Init+0x2f0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x202>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a48      	ldr	r2, [pc, #288]	@ (8002b9c <HAL_GPIO_Init+0x2f4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x1fe>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a47      	ldr	r2, [pc, #284]	@ (8002ba0 <HAL_GPIO_Init+0x2f8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a46      	ldr	r2, [pc, #280]	@ (8002ba4 <HAL_GPIO_Init+0x2fc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x1f6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a45      	ldr	r2, [pc, #276]	@ (8002ba8 <HAL_GPIO_Init+0x300>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x1f2>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e008      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e004      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f002 0203 	and.w	r2, r2, #3
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4093      	lsls	r3, r2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002abc:	4935      	ldr	r1, [pc, #212]	@ (8002b94 <HAL_GPIO_Init+0x2ec>)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aca:	4b38      	ldr	r3, [pc, #224]	@ (8002bac <HAL_GPIO_Init+0x304>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aee:	4a2f      	ldr	r2, [pc, #188]	@ (8002bac <HAL_GPIO_Init+0x304>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af4:	4b2d      	ldr	r3, [pc, #180]	@ (8002bac <HAL_GPIO_Init+0x304>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b18:	4a24      	ldr	r2, [pc, #144]	@ (8002bac <HAL_GPIO_Init+0x304>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b1e:	4b23      	ldr	r3, [pc, #140]	@ (8002bac <HAL_GPIO_Init+0x304>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b42:	4a1a      	ldr	r2, [pc, #104]	@ (8002bac <HAL_GPIO_Init+0x304>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b48:	4b18      	ldr	r3, [pc, #96]	@ (8002bac <HAL_GPIO_Init+0x304>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bac <HAL_GPIO_Init+0x304>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3301      	adds	r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	f67f aea2 	bls.w	80028c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3724      	adds	r7, #36	@ 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	40020400 	.word	0x40020400
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020c00 	.word	0x40020c00
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e12b      	b.n	8002e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fa92 	bl	8002134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2224      	movs	r2, #36	@ 0x24
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c48:	f002 fe72 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8002c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a81      	ldr	r2, [pc, #516]	@ (8002e58 <HAL_I2C_Init+0x274>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d807      	bhi.n	8002c68 <HAL_I2C_Init+0x84>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a80      	ldr	r2, [pc, #512]	@ (8002e5c <HAL_I2C_Init+0x278>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	bf94      	ite	ls
 8002c60:	2301      	movls	r3, #1
 8002c62:	2300      	movhi	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e006      	b.n	8002c76 <HAL_I2C_Init+0x92>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a7d      	ldr	r2, [pc, #500]	@ (8002e60 <HAL_I2C_Init+0x27c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0e7      	b.n	8002e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a78      	ldr	r2, [pc, #480]	@ (8002e64 <HAL_I2C_Init+0x280>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0c9b      	lsrs	r3, r3, #18
 8002c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a6a      	ldr	r2, [pc, #424]	@ (8002e58 <HAL_I2C_Init+0x274>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_I2C_Init+0xd4>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	e009      	b.n	8002ccc <HAL_I2C_Init+0xe8>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	4a69      	ldr	r2, [pc, #420]	@ (8002e68 <HAL_I2C_Init+0x284>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	3301      	adds	r3, #1
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cde:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	495c      	ldr	r1, [pc, #368]	@ (8002e58 <HAL_I2C_Init+0x274>)
 8002ce8:	428b      	cmp	r3, r1
 8002cea:	d819      	bhi.n	8002d20 <HAL_I2C_Init+0x13c>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1e59      	subs	r1, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d00:	400b      	ands	r3, r1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_I2C_Init+0x138>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1e59      	subs	r1, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1a:	e051      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	e04f      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d111      	bne.n	8002d4c <HAL_I2C_Init+0x168>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	440b      	add	r3, r1
 8002d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e012      	b.n	8002d72 <HAL_I2C_Init+0x18e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e58      	subs	r0, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	0099      	lsls	r1, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Init+0x196>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e022      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10e      	bne.n	8002da0 <HAL_I2C_Init+0x1bc>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1e58      	subs	r0, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	440b      	add	r3, r1
 8002d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d9e:	e00f      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	6809      	ldr	r1, [r1, #0]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002dee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6911      	ldr	r1, [r2, #16]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	000186a0 	.word	0x000186a0
 8002e5c:	001e847f 	.word	0x001e847f
 8002e60:	003d08ff 	.word	0x003d08ff
 8002e64:	431bde83 	.word	0x431bde83
 8002e68:	10624dd3 	.word	0x10624dd3

08002e6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	4608      	mov	r0, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	817b      	strh	r3, [r7, #10]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	813b      	strh	r3, [r7, #8]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e86:	f7ff fbfd 	bl	8002684 <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	f040 80d9 	bne.w	800304c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2319      	movs	r3, #25
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	496d      	ldr	r1, [pc, #436]	@ (8003058 <HAL_I2C_Mem_Write+0x1ec>)
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fc8b 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0cc      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2C_Mem_Write+0x56>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e0c5      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d007      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2221      	movs	r2, #33	@ 0x21
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2240      	movs	r2, #64	@ 0x40
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a3a      	ldr	r2, [r7, #32]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a4d      	ldr	r2, [pc, #308]	@ (800305c <HAL_I2C_Mem_Write+0x1f0>)
 8002f28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f2a:	88f8      	ldrh	r0, [r7, #6]
 8002f2c:	893a      	ldrh	r2, [r7, #8]
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4603      	mov	r3, r0
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fac2 	bl	80034c4 <I2C_RequestMemoryWrite>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d052      	beq.n	8002fec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e081      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fd50 	bl	80039f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d107      	bne.n	8002f72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06b      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d11b      	bne.n	8002fec <HAL_I2C_Mem_Write+0x180>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d017      	beq.n	8002fec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1aa      	bne.n	8002f4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fd43 	bl	8003a84 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	2b04      	cmp	r3, #4
 800300a:	d107      	bne.n	800301c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800301a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e016      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	00100002 	.word	0x00100002
 800305c:	ffff0000 	.word	0xffff0000

08003060 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08c      	sub	sp, #48	@ 0x30
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4603      	mov	r3, r0
 8003070:	817b      	strh	r3, [r7, #10]
 8003072:	460b      	mov	r3, r1
 8003074:	813b      	strh	r3, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800307a:	f7ff fb03 	bl	8002684 <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b20      	cmp	r3, #32
 800308a:	f040 8214 	bne.w	80034b6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	2319      	movs	r3, #25
 8003094:	2201      	movs	r2, #1
 8003096:	497b      	ldr	r1, [pc, #492]	@ (8003284 <HAL_I2C_Mem_Read+0x224>)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fb91 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030a4:	2302      	movs	r3, #2
 80030a6:	e207      	b.n	80034b8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_I2C_Mem_Read+0x56>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e200      	b.n	80034b8 <HAL_I2C_Mem_Read+0x458>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d007      	beq.n	80030dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2222      	movs	r2, #34	@ 0x22
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2240      	movs	r2, #64	@ 0x40
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003106:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800310c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a5b      	ldr	r2, [pc, #364]	@ (8003288 <HAL_I2C_Mem_Read+0x228>)
 800311c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800311e:	88f8      	ldrh	r0, [r7, #6]
 8003120:	893a      	ldrh	r2, [r7, #8]
 8003122:	8979      	ldrh	r1, [r7, #10]
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	4603      	mov	r3, r0
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fa5e 	bl	80035f0 <I2C_RequestMemoryRead>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e1bc      	b.n	80034b8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	d113      	bne.n	800316e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003146:	2300      	movs	r3, #0
 8003148:	623b      	str	r3, [r7, #32]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	623b      	str	r3, [r7, #32]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e190      	b.n	8003490 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	2b01      	cmp	r3, #1
 8003174:	d11b      	bne.n	80031ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e170      	b.n	8003490 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d11b      	bne.n	80031ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	e150      	b.n	8003490 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003204:	e144      	b.n	8003490 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320a:	2b03      	cmp	r3, #3
 800320c:	f200 80f1 	bhi.w	80033f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003214:	2b01      	cmp	r3, #1
 8003216:	d123      	bne.n	8003260 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fc79 	bl	8003b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e145      	b.n	80034b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800325e:	e117      	b.n	8003490 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003264:	2b02      	cmp	r3, #2
 8003266:	d14e      	bne.n	8003306 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326e:	2200      	movs	r2, #0
 8003270:	4906      	ldr	r1, [pc, #24]	@ (800328c <HAL_I2C_Mem_Read+0x22c>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 faa4 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e11a      	b.n	80034b8 <HAL_I2C_Mem_Read+0x458>
 8003282:	bf00      	nop
 8003284:	00100002 	.word	0x00100002
 8003288:	ffff0000 	.word	0xffff0000
 800328c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003304:	e0c4      	b.n	8003490 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330c:	2200      	movs	r2, #0
 800330e:	496c      	ldr	r1, [pc, #432]	@ (80034c0 <HAL_I2C_Mem_Read+0x460>)
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fa55 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0cb      	b.n	80034b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800332e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003368:	2200      	movs	r2, #0
 800336a:	4955      	ldr	r1, [pc, #340]	@ (80034c0 <HAL_I2C_Mem_Read+0x460>)
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fa27 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e09d      	b.n	80034b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800338a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033f0:	e04e      	b.n	8003490 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fb8c 	bl	8003b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e058      	b.n	80034b8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d124      	bne.n	8003490 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344a:	2b03      	cmp	r3, #3
 800344c:	d107      	bne.n	800345e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800345c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	f47f aeb6 	bne.w	8003206 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3728      	adds	r7, #40	@ 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	00010004 	.word	0x00010004

080034c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	4608      	mov	r0, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	461a      	mov	r2, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	817b      	strh	r3, [r7, #10]
 80034d6:	460b      	mov	r3, r1
 80034d8:	813b      	strh	r3, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f960 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003514:	d103      	bne.n	800351e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800351c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e05f      	b.n	80035e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003530:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	492d      	ldr	r1, [pc, #180]	@ (80035ec <I2C_RequestMemoryWrite+0x128>)
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f9bb 	bl	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e04c      	b.n	80035e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800355e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003560:	6a39      	ldr	r1, [r7, #32]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fa46 	bl	80039f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	2b04      	cmp	r3, #4
 8003574:	d107      	bne.n	8003586 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003584:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e02b      	b.n	80035e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003590:	893b      	ldrh	r3, [r7, #8]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	611a      	str	r2, [r3, #16]
 800359a:	e021      	b.n	80035e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800359c:	893b      	ldrh	r3, [r7, #8]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ac:	6a39      	ldr	r1, [r7, #32]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fa20 	bl	80039f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d107      	bne.n	80035d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e005      	b.n	80035e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035d6:	893b      	ldrh	r3, [r7, #8]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	00010002 	.word	0x00010002

080035f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	4608      	mov	r0, r1
 80035fa:	4611      	mov	r1, r2
 80035fc:	461a      	mov	r2, r3
 80035fe:	4603      	mov	r3, r0
 8003600:	817b      	strh	r3, [r7, #10]
 8003602:	460b      	mov	r3, r1
 8003604:	813b      	strh	r3, [r7, #8]
 8003606:	4613      	mov	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003618:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003628:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	2200      	movs	r2, #0
 8003632:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f8c2 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00d      	beq.n	800365e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003650:	d103      	bne.n	800365a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003658:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0aa      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800365e:	897b      	ldrh	r3, [r7, #10]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800366c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	6a3a      	ldr	r2, [r7, #32]
 8003672:	4952      	ldr	r1, [pc, #328]	@ (80037bc <I2C_RequestMemoryRead+0x1cc>)
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f91d 	bl	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e097      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369c:	6a39      	ldr	r1, [r7, #32]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f9a8 	bl	80039f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d107      	bne.n	80036c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e076      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d105      	bne.n	80036d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036cc:	893b      	ldrh	r3, [r7, #8]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	611a      	str	r2, [r3, #16]
 80036d6:	e021      	b.n	800371c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036d8:	893b      	ldrh	r3, [r7, #8]
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	b29b      	uxth	r3, r3
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e8:	6a39      	ldr	r1, [r7, #32]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f982 	bl	80039f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d107      	bne.n	800370e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e050      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003712:	893b      	ldrh	r3, [r7, #8]
 8003714:	b2da      	uxtb	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371e:	6a39      	ldr	r1, [r7, #32]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f967 	bl	80039f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	2b04      	cmp	r3, #4
 8003732:	d107      	bne.n	8003744 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003742:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e035      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003756:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	2200      	movs	r2, #0
 8003760:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f82b 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00d      	beq.n	800378c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377e:	d103      	bne.n	8003788 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e013      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800378c:	897b      	ldrh	r3, [r7, #10]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	6a3a      	ldr	r2, [r7, #32]
 80037a0:	4906      	ldr	r1, [pc, #24]	@ (80037bc <I2C_RequestMemoryRead+0x1cc>)
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f886 	bl	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	00010002 	.word	0x00010002

080037c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d0:	e048      	b.n	8003864 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d044      	beq.n	8003864 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037da:	f7fe ff53 	bl	8002684 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d139      	bne.n	8003864 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	0c1b      	lsrs	r3, r3, #16
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10d      	bne.n	8003816 <I2C_WaitOnFlagUntilTimeout+0x56>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	43da      	mvns	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4013      	ands	r3, r2
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	e00c      	b.n	8003830 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	43da      	mvns	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4013      	ands	r3, r2
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	429a      	cmp	r2, r3
 8003834:	d116      	bne.n	8003864 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e023      	b.n	80038ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	0c1b      	lsrs	r3, r3, #16
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b01      	cmp	r3, #1
 800386c:	d10d      	bne.n	800388a <I2C_WaitOnFlagUntilTimeout+0xca>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	43da      	mvns	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	4013      	ands	r3, r2
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	e00c      	b.n	80038a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	43da      	mvns	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4013      	ands	r3, r2
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d093      	beq.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c2:	e071      	b.n	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d2:	d123      	bne.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e067      	b.n	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d041      	beq.n	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003924:	f7fe feae 	bl	8002684 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d302      	bcc.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d136      	bne.n	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d10c      	bne.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e00b      	b.n	8003976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	43da      	mvns	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4013      	ands	r3, r2
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e021      	b.n	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10c      	bne.n	80039cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e00b      	b.n	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	43da      	mvns	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bf14      	ite	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	2300      	moveq	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f47f af6d 	bne.w	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a00:	e034      	b.n	8003a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f8e3 	bl	8003bce <I2C_IsAcknowledgeFailed>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e034      	b.n	8003a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d028      	beq.n	8003a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7fe fe33 	bl	8002684 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11d      	bne.n	8003a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3a:	2b80      	cmp	r3, #128	@ 0x80
 8003a3c:	d016      	beq.n	8003a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e007      	b.n	8003a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a76:	2b80      	cmp	r3, #128	@ 0x80
 8003a78:	d1c3      	bne.n	8003a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a90:	e034      	b.n	8003afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f89b 	bl	8003bce <I2C_IsAcknowledgeFailed>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e034      	b.n	8003b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d028      	beq.n	8003afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fe fdeb 	bl	8002684 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d11d      	bne.n	8003afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d016      	beq.n	8003afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e007      	b.n	8003b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d1c3      	bne.n	8003a92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b20:	e049      	b.n	8003bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b10      	cmp	r3, #16
 8003b2e:	d119      	bne.n	8003b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0210 	mvn.w	r2, #16
 8003b38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e030      	b.n	8003bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b64:	f7fe fd8e 	bl	8002684 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d302      	bcc.n	8003b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d11d      	bne.n	8003bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	d016      	beq.n	8003bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e007      	b.n	8003bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc0:	2b40      	cmp	r3, #64	@ 0x40
 8003bc2:	d1ae      	bne.n	8003b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be4:	d11b      	bne.n	8003c1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f043 0204 	orr.w	r2, r3, #4
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e101      	b.n	8003e42 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f005 ffb7 	bl	8009bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c6c:	d102      	bne.n	8003c74 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f002 fc04 	bl	8006486 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	7c1a      	ldrb	r2, [r3, #16]
 8003c86:	f88d 2000 	strb.w	r2, [sp]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c8e:	f002 fae3 	bl	8006258 <USB_CoreInit>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0ce      	b.n	8003e42 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f002 fbfc 	bl	80064a8 <USB_SetCurrentMode>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0bf      	b.n	8003e42 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
 8003cc6:	e04a      	b.n	8003d5e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3315      	adds	r3, #21
 8003cd8:	2201      	movs	r2, #1
 8003cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3314      	adds	r3, #20
 8003cec:	7bfa      	ldrb	r2, [r7, #15]
 8003cee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	b298      	uxth	r0, r3
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	332e      	adds	r3, #46	@ 0x2e
 8003d04:	4602      	mov	r2, r0
 8003d06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d08:	7bfa      	ldrb	r2, [r7, #15]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	3318      	adds	r3, #24
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d1c:	7bfa      	ldrb	r2, [r7, #15]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	331c      	adds	r3, #28
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3320      	adds	r3, #32
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	3324      	adds	r3, #36	@ 0x24
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	791b      	ldrb	r3, [r3, #4]
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d3af      	bcc.n	8003cc8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	e044      	b.n	8003df8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d6e:	7bfa      	ldrb	r2, [r7, #15]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d84:	7bfa      	ldrb	r2, [r7, #15]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dc6:	7bfa      	ldrb	r2, [r7, #15]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	3301      	adds	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	791b      	ldrb	r3, [r3, #4]
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d3b5      	bcc.n	8003d6e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7c1a      	ldrb	r2, [r3, #16]
 8003e0a:	f88d 2000 	strb.w	r2, [sp]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e12:	f002 fb95 	bl	8006540 <USB_DevInit>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e00c      	b.n	8003e42 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f003 fbdf 	bl	80075fe <USB_DevDisconnect>

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_PCD_Start+0x1c>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e022      	b.n	8003eac <HAL_PCD_Start+0x62>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e86:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f002 fae6 	bl	8006464 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f003 fb8d 	bl	80075bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b08d      	sub	sp, #52	@ 0x34
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f003 fc4b 	bl	8007766 <USB_GetMode>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 848c 	bne.w	80047f0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 fbaf 	bl	8007640 <USB_ReadInterrupts>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8482 	beq.w	80047ee <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f003 fb9c 	bl	8007640 <USB_ReadInterrupts>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d107      	bne.n	8003f22 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f002 0202 	and.w	r2, r2, #2
 8003f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 fb8a 	bl	8007640 <USB_ReadInterrupts>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d161      	bne.n	8003ffa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0210 	bic.w	r2, r2, #16
 8003f44:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f003 020f 	and.w	r2, r3, #15
 8003f52:	4613      	mov	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	3304      	adds	r3, #4
 8003f64:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003f6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f70:	d124      	bne.n	8003fbc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d035      	beq.n	8003fea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6a38      	ldr	r0, [r7, #32]
 8003f92:	f003 f9c1 	bl	8007318 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa2:	441a      	add	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fb4:	441a      	add	r2, r3
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	615a      	str	r2, [r3, #20]
 8003fba:	e016      	b.n	8003fea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003fc2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003fc6:	d110      	bne.n	8003fea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fce:	2208      	movs	r2, #8
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	6a38      	ldr	r0, [r7, #32]
 8003fd4:	f003 f9a0 	bl	8007318 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fe4:	441a      	add	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0210 	orr.w	r2, r2, #16
 8003ff8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f003 fb1e 	bl	8007640 <USB_ReadInterrupts>
 8004004:	4603      	mov	r3, r0
 8004006:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800400a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800400e:	f040 80a7 	bne.w	8004160 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f003 fb23 	bl	8007666 <USB_ReadDevAllOutEpInterrupt>
 8004020:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004022:	e099      	b.n	8004158 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 808e 	beq.w	800414c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	4611      	mov	r1, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f003 fb47 	bl	80076ce <USB_ReadDevOutEPInterrupt>
 8004040:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00c      	beq.n	8004066 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004058:	461a      	mov	r2, r3
 800405a:	2301      	movs	r3, #1
 800405c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800405e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fea3 	bl	8004dac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00c      	beq.n	800408a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407c:	461a      	mov	r2, r3
 800407e:	2308      	movs	r3, #8
 8004080:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004082:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 ff79 	bl	8004f7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a0:	461a      	mov	r2, r3
 80040a2:	2310      	movs	r3, #16
 80040a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d030      	beq.n	8004112 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b8:	2b80      	cmp	r3, #128	@ 0x80
 80040ba:	d109      	bne.n	80040d0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ce:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80040d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	3304      	adds	r3, #4
 80040e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	78db      	ldrb	r3, [r3, #3]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d108      	bne.n	8004100 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2200      	movs	r2, #0
 80040f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f005 fe62 	bl	8009dc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	2302      	movs	r3, #2
 8004110:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004128:	461a      	mov	r2, r3
 800412a:	2320      	movs	r3, #32
 800412c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d009      	beq.n	800414c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004144:	461a      	mov	r2, r3
 8004146:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800414a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	3301      	adds	r3, #1
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	085b      	lsrs	r3, r3, #1
 8004156:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415a:	2b00      	cmp	r3, #0
 800415c:	f47f af62 	bne.w	8004024 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f003 fa6b 	bl	8007640 <USB_ReadInterrupts>
 800416a:	4603      	mov	r3, r0
 800416c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004170:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004174:	f040 80db 	bne.w	800432e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f003 fa8c 	bl	800769a <USB_ReadDevAllInEpInterrupt>
 8004182:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004188:	e0cd      	b.n	8004326 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80c2 	beq.w	800431a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f003 fab2 	bl	800770a <USB_ReadDevInEPInterrupt>
 80041a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d057      	beq.n	8004262 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	2201      	movs	r2, #1
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	69f9      	ldr	r1, [r7, #28]
 80041ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041d2:	4013      	ands	r3, r2
 80041d4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e2:	461a      	mov	r2, r3
 80041e4:	2301      	movs	r3, #1
 80041e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	799b      	ldrb	r3, [r3, #6]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d132      	bne.n	8004256 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f4:	4613      	mov	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	3320      	adds	r3, #32
 8004200:	6819      	ldr	r1, [r3, #0]
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4403      	add	r3, r0
 8004210:	331c      	adds	r3, #28
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4419      	add	r1, r3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4403      	add	r3, r0
 8004224:	3320      	adds	r3, #32
 8004226:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d113      	bne.n	8004256 <HAL_PCD_IRQHandler+0x3a2>
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004232:	4613      	mov	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	3324      	adds	r3, #36	@ 0x24
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d108      	bne.n	8004256 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800424e:	461a      	mov	r2, r3
 8004250:	2101      	movs	r1, #1
 8004252:	f003 fab9 	bl	80077c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f005 fd36 	bl	8009cce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004278:	461a      	mov	r2, r3
 800427a:	2308      	movs	r3, #8
 800427c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004294:	461a      	mov	r2, r3
 8004296:	2310      	movs	r3, #16
 8004298:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b0:	461a      	mov	r2, r3
 80042b2:	2340      	movs	r3, #64	@ 0x40
 80042b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d023      	beq.n	8004308 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80042c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042c2:	6a38      	ldr	r0, [r7, #32]
 80042c4:	f002 faa0 	bl	8006808 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80042c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	3310      	adds	r3, #16
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	3304      	adds	r3, #4
 80042da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	78db      	ldrb	r3, [r3, #3]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d108      	bne.n	80042f6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2200      	movs	r2, #0
 80042e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	4619      	mov	r1, r3
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f005 fd79 	bl	8009de8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004302:	461a      	mov	r2, r3
 8004304:	2302      	movs	r3, #2
 8004306:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004312:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fcbd 	bl	8004c94 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	3301      	adds	r3, #1
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	f47f af2e 	bne.w	800418a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f003 f984 	bl	8007640 <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800433e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004342:	d122      	bne.n	800438a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800435e:	2b01      	cmp	r3, #1
 8004360:	d108      	bne.n	8004374 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800436a:	2100      	movs	r1, #0
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fea3 	bl	80050b8 <HAL_PCDEx_LPM_Callback>
 8004372:	e002      	b.n	800437a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f005 fd17 	bl	8009da8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f003 f956 	bl	8007640 <USB_ReadInterrupts>
 8004394:	4603      	mov	r3, r0
 8004396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800439a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800439e:	d112      	bne.n	80043c6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d102      	bne.n	80043b6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f005 fcd3 	bl	8009d5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80043c4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f003 f938 	bl	8007640 <USB_ReadInterrupts>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043da:	f040 80b7 	bne.w	800454c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2110      	movs	r1, #16
 80043f8:	4618      	mov	r0, r3
 80043fa:	f002 fa05 	bl	8006808 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004402:	e046      	b.n	8004492 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004410:	461a      	mov	r2, r3
 8004412:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004416:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004432:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004436:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800444a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800444c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800445c:	0151      	lsls	r1, r2, #5
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	440a      	add	r2, r1
 8004462:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004466:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800446a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800446c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	440a      	add	r2, r1
 8004482:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004486:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800448a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448e:	3301      	adds	r3, #1
 8004490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	791b      	ldrb	r3, [r3, #4]
 8004496:	461a      	mov	r2, r3
 8004498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449a:	4293      	cmp	r3, r2
 800449c:	d3b2      	bcc.n	8004404 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ac:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80044b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	7bdb      	ldrb	r3, [r3, #15]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ca:	f043 030b 	orr.w	r3, r3, #11
 80044ce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044e0:	f043 030b 	orr.w	r3, r3, #11
 80044e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044e6:	e015      	b.n	8004514 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044fa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80044fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800450e:	f043 030b 	orr.w	r3, r3, #11
 8004512:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004522:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004526:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004536:	461a      	mov	r2, r3
 8004538:	f003 f946 	bl	80077c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800454a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f003 f875 	bl	8007640 <USB_ReadInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800455c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004560:	d123      	bne.n	80045aa <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f003 f90b 	bl	8007782 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f002 f9c2 	bl	80068fa <USB_GetDevSpeed>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681c      	ldr	r4, [r3, #0]
 8004582:	f001 f9c9 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8004586:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800458c:	461a      	mov	r2, r3
 800458e:	4620      	mov	r0, r4
 8004590:	f001 fec6 	bl	8006320 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f005 fbc2 	bl	8009d1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80045a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f003 f846 	bl	8007640 <USB_ReadInterrupts>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d10a      	bne.n	80045d4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f005 fb9f 	bl	8009d02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f002 0208 	and.w	r2, r2, #8
 80045d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f003 f831 	bl	8007640 <USB_ReadInterrupts>
 80045de:	4603      	mov	r3, r0
 80045e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e4:	2b80      	cmp	r3, #128	@ 0x80
 80045e6:	d123      	bne.n	8004630 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045f4:	2301      	movs	r3, #1
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f8:	e014      	b.n	8004624 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	b2db      	uxtb	r3, r3
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fb0a 	bl	8004c32 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	3301      	adds	r3, #1
 8004622:	627b      	str	r3, [r7, #36]	@ 0x24
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	791b      	ldrb	r3, [r3, #4]
 8004628:	461a      	mov	r2, r3
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	4293      	cmp	r3, r2
 800462e:	d3e4      	bcc.n	80045fa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f003 f803 	bl	8007640 <USB_ReadInterrupts>
 800463a:	4603      	mov	r3, r0
 800463c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004640:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004644:	d13c      	bne.n	80046c0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004646:	2301      	movs	r3, #1
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
 800464a:	e02b      	b.n	80046a4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	3318      	adds	r3, #24
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d115      	bne.n	800469e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004672:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004674:	2b00      	cmp	r3, #0
 8004676:	da12      	bge.n	800469e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	3317      	adds	r3, #23
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004694:	b2db      	uxtb	r3, r3
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 faca 	bl	8004c32 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	3301      	adds	r3, #1
 80046a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	791b      	ldrb	r3, [r3, #4]
 80046a8:	461a      	mov	r2, r3
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d3cd      	bcc.n	800464c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80046be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f002 ffbb 	bl	8007640 <USB_ReadInterrupts>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046d4:	d156      	bne.n	8004784 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046d6:	2301      	movs	r3, #1
 80046d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046da:	e045      	b.n	8004768 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d12e      	bne.n	8004762 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004704:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004706:	2b00      	cmp	r3, #0
 8004708:	da2b      	bge.n	8004762 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004716:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800471a:	429a      	cmp	r2, r3
 800471c:	d121      	bne.n	8004762 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004722:	4613      	mov	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004730:	2201      	movs	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800475a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800475e:	6053      	str	r3, [r2, #4]
            break;
 8004760:	e008      	b.n	8004774 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	3301      	adds	r3, #1
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	791b      	ldrb	r3, [r3, #4]
 800476c:	461a      	mov	r2, r3
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	4293      	cmp	r3, r2
 8004772:	d3b3      	bcc.n	80046dc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f002 ff59 	bl	8007640 <USB_ReadInterrupts>
 800478e:	4603      	mov	r3, r0
 8004790:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004798:	d10a      	bne.n	80047b0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f005 fb36 	bl	8009e0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80047ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f002 ff43 	bl	8007640 <USB_ReadInterrupts>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d115      	bne.n	80047f0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f005 fb26 	bl	8009e28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	e000      	b.n	80047f0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80047ee:	bf00      	nop
    }
  }
}
 80047f0:	3734      	adds	r7, #52	@ 0x34
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd90      	pop	{r4, r7, pc}

080047f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_PCD_SetAddress+0x1a>
 800480c:	2302      	movs	r3, #2
 800480e:	e012      	b.n	8004836 <HAL_PCD_SetAddress+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	4611      	mov	r1, r2
 8004826:	4618      	mov	r0, r3
 8004828:	f002 fea2 	bl	8007570 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	4608      	mov	r0, r1
 8004848:	4611      	mov	r1, r2
 800484a:	461a      	mov	r2, r3
 800484c:	4603      	mov	r3, r0
 800484e:	70fb      	strb	r3, [r7, #3]
 8004850:	460b      	mov	r3, r1
 8004852:	803b      	strh	r3, [r7, #0]
 8004854:	4613      	mov	r3, r2
 8004856:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800485c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004860:	2b00      	cmp	r3, #0
 8004862:	da0f      	bge.n	8004884 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	f003 020f 	and.w	r2, r3, #15
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	3310      	adds	r3, #16
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	4413      	add	r3, r2
 8004878:	3304      	adds	r3, #4
 800487a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	705a      	strb	r2, [r3, #1]
 8004882:	e00f      	b.n	80048a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	f003 020f 	and.w	r2, r3, #15
 800488a:	4613      	mov	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	3304      	adds	r3, #4
 800489c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80048b0:	883b      	ldrh	r3, [r7, #0]
 80048b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	78ba      	ldrb	r2, [r7, #2]
 80048be:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048d2:	78bb      	ldrb	r3, [r7, #2]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d102      	bne.n	80048de <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_PCD_EP_Open+0xae>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e00e      	b.n	800490a <HAL_PCD_EP_Open+0xcc>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68f9      	ldr	r1, [r7, #12]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f002 f822 	bl	8006944 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004908:	7afb      	ldrb	r3, [r7, #11]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800491e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004922:	2b00      	cmp	r3, #0
 8004924:	da0f      	bge.n	8004946 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	f003 020f 	and.w	r2, r3, #15
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	3310      	adds	r3, #16
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	3304      	adds	r3, #4
 800493c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	705a      	strb	r2, [r3, #1]
 8004944:	e00f      	b.n	8004966 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 020f 	and.w	r2, r3, #15
 800494c:	4613      	mov	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	4413      	add	r3, r2
 800495c:	3304      	adds	r3, #4
 800495e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_PCD_EP_Close+0x6e>
 800497c:	2302      	movs	r3, #2
 800497e:	e00e      	b.n	800499e <HAL_PCD_EP_Close+0x8c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68f9      	ldr	r1, [r7, #12]
 800498e:	4618      	mov	r0, r3
 8004990:	f002 f860 	bl	8006a54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	460b      	mov	r3, r1
 80049b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049b6:	7afb      	ldrb	r3, [r7, #11]
 80049b8:	f003 020f 	and.w	r2, r3, #15
 80049bc:	4613      	mov	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	3304      	adds	r3, #4
 80049ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2200      	movs	r2, #0
 80049e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049e8:	7afb      	ldrb	r3, [r7, #11]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	799b      	ldrb	r3, [r3, #6]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d102      	bne.n	8004a02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	799b      	ldrb	r3, [r3, #6]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	6979      	ldr	r1, [r7, #20]
 8004a0e:	f002 f8fd 	bl	8006c0c <USB_EPStartXfer>

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	f003 020f 	and.w	r2, r3, #15
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	607a      	str	r2, [r7, #4]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a5c:	7afb      	ldrb	r3, [r7, #11]
 8004a5e:	f003 020f 	and.w	r2, r3, #15
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	3310      	adds	r3, #16
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	3304      	adds	r3, #4
 8004a72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2200      	movs	r2, #0
 8004a84:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a8c:	7afb      	ldrb	r3, [r7, #11]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	799b      	ldrb	r3, [r3, #6]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d102      	bne.n	8004aa6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	799b      	ldrb	r3, [r3, #6]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6979      	ldr	r1, [r7, #20]
 8004ab2:	f002 f8ab 	bl	8006c0c <USB_EPStartXfer>

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	7912      	ldrb	r2, [r2, #4]
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e04f      	b.n	8004b7e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	da0f      	bge.n	8004b06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	f003 020f 	and.w	r2, r3, #15
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	3310      	adds	r3, #16
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	3304      	adds	r3, #4
 8004afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	705a      	strb	r2, [r3, #1]
 8004b04:	e00d      	b.n	8004b22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4413      	add	r3, r2
 8004b18:	3304      	adds	r3, #4
 8004b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_PCD_EP_SetStall+0x82>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e01d      	b.n	8004b7e <HAL_PCD_EP_SetStall+0xbe>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f002 fc39 	bl	80073c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	7999      	ldrb	r1, [r3, #6]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b6e:	461a      	mov	r2, r3
 8004b70:	f002 fe2a 	bl	80077c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	7912      	ldrb	r2, [r2, #4]
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e042      	b.n	8004c2a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	da0f      	bge.n	8004bcc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	3310      	adds	r3, #16
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	705a      	strb	r2, [r3, #1]
 8004bca:	e00f      	b.n	8004bec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	f003 020f 	and.w	r2, r3, #15
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4413      	add	r3, r2
 8004be2:	3304      	adds	r3, #4
 8004be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_PCD_EP_ClrStall+0x86>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e00e      	b.n	8004c2a <HAL_PCD_EP_ClrStall+0xa4>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68f9      	ldr	r1, [r7, #12]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f002 fc42 	bl	80074a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	da0c      	bge.n	8004c60 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 020f 	and.w	r2, r3, #15
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	3310      	adds	r3, #16
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	e00c      	b.n	8004c7a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	3304      	adds	r3, #4
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f002 fa61 	bl	8007148 <USB_EPStopXfer>
 8004c86:	4603      	mov	r3, r0
 8004c88:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	@ 0x28
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	3310      	adds	r3, #16
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3304      	adds	r3, #4
 8004cba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d901      	bls.n	8004ccc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e06b      	b.n	8004da4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d902      	bls.n	8004ce8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	3303      	adds	r3, #3
 8004cec:	089b      	lsrs	r3, r3, #2
 8004cee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cf0:	e02a      	b.n	8004d48 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d902      	bls.n	8004d0e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	3303      	adds	r3, #3
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68d9      	ldr	r1, [r3, #12]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	4603      	mov	r3, r0
 8004d2a:	6978      	ldr	r0, [r7, #20]
 8004d2c:	f002 fab6 	bl	800729c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	441a      	add	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	441a      	add	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d809      	bhi.n	8004d72 <PCD_WriteEmptyTxFifo+0xde>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d203      	bcs.n	8004d72 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1bf      	bne.n	8004cf2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d811      	bhi.n	8004da2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	2201      	movs	r2, #1
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	43db      	mvns	r3, r3
 8004d98:	6939      	ldr	r1, [r7, #16]
 8004d9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d9e:	4013      	ands	r3, r2
 8004da0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	333c      	adds	r3, #60	@ 0x3c
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	799b      	ldrb	r3, [r3, #6]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d17b      	bne.n	8004eda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d015      	beq.n	8004e18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	4a61      	ldr	r2, [pc, #388]	@ (8004f74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	f240 80b9 	bls.w	8004f68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80b3 	beq.w	8004f68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e14:	6093      	str	r3, [r2, #8]
 8004e16:	e0a7      	b.n	8004f68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2320      	movs	r3, #32
 8004e32:	6093      	str	r3, [r2, #8]
 8004e34:	e098      	b.n	8004f68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f040 8093 	bne.w	8004f68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4a4b      	ldr	r2, [pc, #300]	@ (8004f74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d90f      	bls.n	8004e6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e60:	461a      	mov	r2, r3
 8004e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e66:	6093      	str	r3, [r2, #8]
 8004e68:	e07e      	b.n	8004f68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	0159      	lsls	r1, r3, #5
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	440b      	add	r3, r1
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e96:	1ad2      	subs	r2, r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d114      	bne.n	8004ecc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	f002 fc86 	bl	80077c8 <USB_EP0_OutStart>
 8004ebc:	e006      	b.n	8004ecc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	441a      	add	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f004 fee0 	bl	8009c98 <HAL_PCD_DataOutStageCallback>
 8004ed8:	e046      	b.n	8004f68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	4a26      	ldr	r2, [pc, #152]	@ (8004f78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d124      	bne.n	8004f2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004efe:	6093      	str	r3, [r2, #8]
 8004f00:	e032      	b.n	8004f68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f004 feb7 	bl	8009c98 <HAL_PCD_DataOutStageCallback>
 8004f2a:	e01d      	b.n	8004f68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d114      	bne.n	8004f5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f54:	461a      	mov	r2, r3
 8004f56:	2100      	movs	r1, #0
 8004f58:	f002 fc36 	bl	80077c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f004 fe98 	bl	8009c98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	4f54300a 	.word	0x4f54300a
 8004f78:	4f54310a 	.word	0x4f54310a

08004f7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	333c      	adds	r3, #60	@ 0x3c
 8004f94:	3304      	adds	r3, #4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a15      	ldr	r2, [pc, #84]	@ (8005004 <PCD_EP_OutSetupPacket_int+0x88>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d90e      	bls.n	8004fd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f004 fe4f 	bl	8009c74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005004 <PCD_EP_OutSetupPacket_int+0x88>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d90c      	bls.n	8004ff8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	799b      	ldrb	r3, [r3, #6]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d108      	bne.n	8004ff8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	f002 fbe8 	bl	80077c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	4f54300a 	.word	0x4f54300a

08005008 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
 8005014:	4613      	mov	r3, r2
 8005016:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005026:	883b      	ldrh	r3, [r7, #0]
 8005028:	0419      	lsls	r1, r3, #16
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	430a      	orrs	r2, r1
 8005032:	629a      	str	r2, [r3, #40]	@ 0x28
 8005034:	e028      	b.n	8005088 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	0c1b      	lsrs	r3, r3, #16
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	4413      	add	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	e00d      	b.n	8005066 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	3340      	adds	r3, #64	@ 0x40
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4413      	add	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	3301      	adds	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
 8005066:	7bfa      	ldrb	r2, [r7, #15]
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	3b01      	subs	r3, #1
 800506c:	429a      	cmp	r2, r3
 800506e:	d3ec      	bcc.n	800504a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005070:	883b      	ldrh	r3, [r7, #0]
 8005072:	0418      	lsls	r0, r3, #16
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6819      	ldr	r1, [r3, #0]
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	3b01      	subs	r3, #1
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	4302      	orrs	r2, r0
 8005080:	3340      	adds	r3, #64	@ 0x40
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	460b      	mov	r3, r1
 80050a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	887a      	ldrh	r2, [r7, #2]
 80050a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e267      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d075      	beq.n	80051da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050ee:	4b88      	ldr	r3, [pc, #544]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d00c      	beq.n	8005114 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050fa:	4b85      	ldr	r3, [pc, #532]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005102:	2b08      	cmp	r3, #8
 8005104:	d112      	bne.n	800512c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005106:	4b82      	ldr	r3, [pc, #520]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800510e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005112:	d10b      	bne.n	800512c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005114:	4b7e      	ldr	r3, [pc, #504]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d05b      	beq.n	80051d8 <HAL_RCC_OscConfig+0x108>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d157      	bne.n	80051d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e242      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005134:	d106      	bne.n	8005144 <HAL_RCC_OscConfig+0x74>
 8005136:	4b76      	ldr	r3, [pc, #472]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a75      	ldr	r2, [pc, #468]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800513c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e01d      	b.n	8005180 <HAL_RCC_OscConfig+0xb0>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800514c:	d10c      	bne.n	8005168 <HAL_RCC_OscConfig+0x98>
 800514e:	4b70      	ldr	r3, [pc, #448]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a6f      	ldr	r2, [pc, #444]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	4b6d      	ldr	r3, [pc, #436]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a6c      	ldr	r2, [pc, #432]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e00b      	b.n	8005180 <HAL_RCC_OscConfig+0xb0>
 8005168:	4b69      	ldr	r3, [pc, #420]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a68      	ldr	r2, [pc, #416]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800516e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	4b66      	ldr	r3, [pc, #408]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a65      	ldr	r2, [pc, #404]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800517a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800517e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d013      	beq.n	80051b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005188:	f7fd fa7c 	bl	8002684 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005190:	f7fd fa78 	bl	8002684 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	@ 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e207      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0xc0>
 80051ae:	e014      	b.n	80051da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fd fa68 	bl	8002684 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b8:	f7fd fa64 	bl	8002684 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b64      	cmp	r3, #100	@ 0x64
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e1f3      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ca:	4b51      	ldr	r3, [pc, #324]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0xe8>
 80051d6:	e000      	b.n	80051da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d063      	beq.n	80052ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f2:	4b47      	ldr	r3, [pc, #284]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d11c      	bne.n	8005238 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051fe:	4b44      	ldr	r3, [pc, #272]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d116      	bne.n	8005238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800520a:	4b41      	ldr	r3, [pc, #260]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_RCC_OscConfig+0x152>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d001      	beq.n	8005222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e1c7      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005222:	4b3b      	ldr	r3, [pc, #236]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4937      	ldr	r1, [pc, #220]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005232:	4313      	orrs	r3, r2
 8005234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005236:	e03a      	b.n	80052ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d020      	beq.n	8005282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005240:	4b34      	ldr	r3, [pc, #208]	@ (8005314 <HAL_RCC_OscConfig+0x244>)
 8005242:	2201      	movs	r2, #1
 8005244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fd fa1d 	bl	8002684 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524e:	f7fd fa19 	bl	8002684 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e1a8      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005260:	4b2b      	ldr	r3, [pc, #172]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526c:	4b28      	ldr	r3, [pc, #160]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4925      	ldr	r1, [pc, #148]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800527c:	4313      	orrs	r3, r2
 800527e:	600b      	str	r3, [r1, #0]
 8005280:	e015      	b.n	80052ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005282:	4b24      	ldr	r3, [pc, #144]	@ (8005314 <HAL_RCC_OscConfig+0x244>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd f9fc 	bl	8002684 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005290:	f7fd f9f8 	bl	8002684 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e187      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d036      	beq.n	8005328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052c2:	4b15      	ldr	r3, [pc, #84]	@ (8005318 <HAL_RCC_OscConfig+0x248>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c8:	f7fd f9dc 	bl	8002684 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d0:	f7fd f9d8 	bl	8002684 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e167      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80052e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f0      	beq.n	80052d0 <HAL_RCC_OscConfig+0x200>
 80052ee:	e01b      	b.n	8005328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052f0:	4b09      	ldr	r3, [pc, #36]	@ (8005318 <HAL_RCC_OscConfig+0x248>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f6:	f7fd f9c5 	bl	8002684 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052fc:	e00e      	b.n	800531c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052fe:	f7fd f9c1 	bl	8002684 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d907      	bls.n	800531c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e150      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
 8005310:	40023800 	.word	0x40023800
 8005314:	42470000 	.word	0x42470000
 8005318:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800531c:	4b88      	ldr	r3, [pc, #544]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800531e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ea      	bne.n	80052fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8097 	beq.w	8005464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005336:	2300      	movs	r3, #0
 8005338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800533a:	4b81      	ldr	r3, [pc, #516]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10f      	bne.n	8005366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	4b7d      	ldr	r3, [pc, #500]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	4a7c      	ldr	r2, [pc, #496]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005354:	6413      	str	r3, [r2, #64]	@ 0x40
 8005356:	4b7a      	ldr	r3, [pc, #488]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005366:	4b77      	ldr	r3, [pc, #476]	@ (8005544 <HAL_RCC_OscConfig+0x474>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d118      	bne.n	80053a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005372:	4b74      	ldr	r3, [pc, #464]	@ (8005544 <HAL_RCC_OscConfig+0x474>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a73      	ldr	r2, [pc, #460]	@ (8005544 <HAL_RCC_OscConfig+0x474>)
 8005378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800537c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800537e:	f7fd f981 	bl	8002684 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005386:	f7fd f97d 	bl	8002684 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e10c      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005398:	4b6a      	ldr	r3, [pc, #424]	@ (8005544 <HAL_RCC_OscConfig+0x474>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d106      	bne.n	80053ba <HAL_RCC_OscConfig+0x2ea>
 80053ac:	4b64      	ldr	r3, [pc, #400]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b0:	4a63      	ldr	r2, [pc, #396]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b8:	e01c      	b.n	80053f4 <HAL_RCC_OscConfig+0x324>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b05      	cmp	r3, #5
 80053c0:	d10c      	bne.n	80053dc <HAL_RCC_OscConfig+0x30c>
 80053c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053c8:	f043 0304 	orr.w	r3, r3, #4
 80053cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053da:	e00b      	b.n	80053f4 <HAL_RCC_OscConfig+0x324>
 80053dc:	4b58      	ldr	r3, [pc, #352]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e0:	4a57      	ldr	r2, [pc, #348]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053e2:	f023 0301 	bic.w	r3, r3, #1
 80053e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e8:	4b55      	ldr	r3, [pc, #340]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ec:	4a54      	ldr	r2, [pc, #336]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053ee:	f023 0304 	bic.w	r3, r3, #4
 80053f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d015      	beq.n	8005428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fd f942 	bl	8002684 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005402:	e00a      	b.n	800541a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005404:	f7fd f93e 	bl	8002684 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005412:	4293      	cmp	r3, r2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e0cb      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541a:	4b49      	ldr	r3, [pc, #292]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0ee      	beq.n	8005404 <HAL_RCC_OscConfig+0x334>
 8005426:	e014      	b.n	8005452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005428:	f7fd f92c 	bl	8002684 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542e:	e00a      	b.n	8005446 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005430:	f7fd f928 	bl	8002684 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800543e:	4293      	cmp	r3, r2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e0b5      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005446:	4b3e      	ldr	r3, [pc, #248]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1ee      	bne.n	8005430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d105      	bne.n	8005464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005458:	4b39      	ldr	r3, [pc, #228]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800545a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545c:	4a38      	ldr	r2, [pc, #224]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800545e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005462:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80a1 	beq.w	80055b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800546e:	4b34      	ldr	r3, [pc, #208]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b08      	cmp	r3, #8
 8005478:	d05c      	beq.n	8005534 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d141      	bne.n	8005506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005482:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <HAL_RCC_OscConfig+0x478>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005488:	f7fd f8fc 	bl	8002684 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005490:	f7fd f8f8 	bl	8002684 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e087      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a2:	4b27      	ldr	r3, [pc, #156]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	019b      	lsls	r3, r3, #6
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	3b01      	subs	r3, #1
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	491b      	ldr	r1, [pc, #108]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005548 <HAL_RCC_OscConfig+0x478>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7fd f8d1 	bl	8002684 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e6:	f7fd f8cd 	bl	8002684 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e05c      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f8:	4b11      	ldr	r3, [pc, #68]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x416>
 8005504:	e054      	b.n	80055b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005506:	4b10      	ldr	r3, [pc, #64]	@ (8005548 <HAL_RCC_OscConfig+0x478>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550c:	f7fd f8ba 	bl	8002684 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005514:	f7fd f8b6 	bl	8002684 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e045      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	4b06      	ldr	r3, [pc, #24]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x444>
 8005532:	e03d      	b.n	80055b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d107      	bne.n	800554c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e038      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
 8005540:	40023800 	.word	0x40023800
 8005544:	40007000 	.word	0x40007000
 8005548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800554c:	4b1b      	ldr	r3, [pc, #108]	@ (80055bc <HAL_RCC_OscConfig+0x4ec>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d028      	beq.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d121      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005572:	429a      	cmp	r2, r3
 8005574:	d11a      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005584:	4293      	cmp	r3, r2
 8005586:	d111      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	3b01      	subs	r3, #1
 8005596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d107      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800

080055c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0cc      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055d4:	4b68      	ldr	r3, [pc, #416]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d90c      	bls.n	80055fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e2:	4b65      	ldr	r3, [pc, #404]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ea:	4b63      	ldr	r3, [pc, #396]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0b8      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d020      	beq.n	800564a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005614:	4b59      	ldr	r3, [pc, #356]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a58      	ldr	r2, [pc, #352]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800561e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800562c:	4b53      	ldr	r3, [pc, #332]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4a52      	ldr	r2, [pc, #328]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005638:	4b50      	ldr	r3, [pc, #320]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	494d      	ldr	r1, [pc, #308]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	4313      	orrs	r3, r2
 8005648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d044      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d107      	bne.n	800566e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565e:	4b47      	ldr	r3, [pc, #284]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d119      	bne.n	800569e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e07f      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d003      	beq.n	800567e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567a:	2b03      	cmp	r3, #3
 800567c:	d107      	bne.n	800568e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567e:	4b3f      	ldr	r3, [pc, #252]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e06f      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568e:	4b3b      	ldr	r3, [pc, #236]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e067      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800569e:	4b37      	ldr	r3, [pc, #220]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f023 0203 	bic.w	r2, r3, #3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	4934      	ldr	r1, [pc, #208]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056b0:	f7fc ffe8 	bl	8002684 <HAL_GetTick>
 80056b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b6:	e00a      	b.n	80056ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b8:	f7fc ffe4 	bl	8002684 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e04f      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ce:	4b2b      	ldr	r3, [pc, #172]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 020c 	and.w	r2, r3, #12
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1eb      	bne.n	80056b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056e0:	4b25      	ldr	r3, [pc, #148]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d20c      	bcs.n	8005708 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ee:	4b22      	ldr	r3, [pc, #136]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f6:	4b20      	ldr	r3, [pc, #128]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d001      	beq.n	8005708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e032      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005714:	4b19      	ldr	r3, [pc, #100]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4916      	ldr	r1, [pc, #88]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005732:	4b12      	ldr	r3, [pc, #72]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	490e      	ldr	r1, [pc, #56]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	4313      	orrs	r3, r2
 8005744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005746:	f000 f821 	bl	800578c <HAL_RCC_GetSysClockFreq>
 800574a:	4602      	mov	r2, r0
 800574c:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	490a      	ldr	r1, [pc, #40]	@ (8005780 <HAL_RCC_ClockConfig+0x1c0>)
 8005758:	5ccb      	ldrb	r3, [r1, r3]
 800575a:	fa22 f303 	lsr.w	r3, r2, r3
 800575e:	4a09      	ldr	r2, [pc, #36]	@ (8005784 <HAL_RCC_ClockConfig+0x1c4>)
 8005760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005762:	4b09      	ldr	r3, [pc, #36]	@ (8005788 <HAL_RCC_ClockConfig+0x1c8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7fc fd9e 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40023c00 	.word	0x40023c00
 800577c:	40023800 	.word	0x40023800
 8005780:	0800efd8 	.word	0x0800efd8
 8005784:	20000090 	.word	0x20000090
 8005788:	20000094 	.word	0x20000094

0800578c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800578c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005790:	b090      	sub	sp, #64	@ 0x40
 8005792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057a4:	4b59      	ldr	r3, [pc, #356]	@ (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 030c 	and.w	r3, r3, #12
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d00d      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0x40>
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	f200 80a1 	bhi.w	80058f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x34>
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057be:	e09b      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057c0:	4b53      	ldr	r3, [pc, #332]	@ (8005910 <HAL_RCC_GetSysClockFreq+0x184>)
 80057c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057c4:	e09b      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057c6:	4b53      	ldr	r3, [pc, #332]	@ (8005914 <HAL_RCC_GetSysClockFreq+0x188>)
 80057c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057ca:	e098      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057cc:	4b4f      	ldr	r3, [pc, #316]	@ (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057d6:	4b4d      	ldr	r3, [pc, #308]	@ (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d028      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057e2:	4b4a      	ldr	r3, [pc, #296]	@ (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	099b      	lsrs	r3, r3, #6
 80057e8:	2200      	movs	r2, #0
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057f4:	2100      	movs	r1, #0
 80057f6:	4b47      	ldr	r3, [pc, #284]	@ (8005914 <HAL_RCC_GetSysClockFreq+0x188>)
 80057f8:	fb03 f201 	mul.w	r2, r3, r1
 80057fc:	2300      	movs	r3, #0
 80057fe:	fb00 f303 	mul.w	r3, r0, r3
 8005802:	4413      	add	r3, r2
 8005804:	4a43      	ldr	r2, [pc, #268]	@ (8005914 <HAL_RCC_GetSysClockFreq+0x188>)
 8005806:	fba0 1202 	umull	r1, r2, r0, r2
 800580a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800580c:	460a      	mov	r2, r1
 800580e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005812:	4413      	add	r3, r2
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005818:	2200      	movs	r2, #0
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	61fa      	str	r2, [r7, #28]
 800581e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005822:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005826:	f7fb fa37 	bl	8000c98 <__aeabi_uldivmod>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4613      	mov	r3, r2
 8005830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005832:	e053      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005834:	4b35      	ldr	r3, [pc, #212]	@ (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	2200      	movs	r2, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	617a      	str	r2, [r7, #20]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005846:	f04f 0b00 	mov.w	fp, #0
 800584a:	4652      	mov	r2, sl
 800584c:	465b      	mov	r3, fp
 800584e:	f04f 0000 	mov.w	r0, #0
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	0159      	lsls	r1, r3, #5
 8005858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800585c:	0150      	lsls	r0, r2, #5
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	ebb2 080a 	subs.w	r8, r2, sl
 8005866:	eb63 090b 	sbc.w	r9, r3, fp
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005876:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800587a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800587e:	ebb2 0408 	subs.w	r4, r2, r8
 8005882:	eb63 0509 	sbc.w	r5, r3, r9
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	00eb      	lsls	r3, r5, #3
 8005890:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005894:	00e2      	lsls	r2, r4, #3
 8005896:	4614      	mov	r4, r2
 8005898:	461d      	mov	r5, r3
 800589a:	eb14 030a 	adds.w	r3, r4, sl
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	eb45 030b 	adc.w	r3, r5, fp
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058b2:	4629      	mov	r1, r5
 80058b4:	028b      	lsls	r3, r1, #10
 80058b6:	4621      	mov	r1, r4
 80058b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058bc:	4621      	mov	r1, r4
 80058be:	028a      	lsls	r2, r1, #10
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c6:	2200      	movs	r2, #0
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	60fa      	str	r2, [r7, #12]
 80058cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058d0:	f7fb f9e2 	bl	8000c98 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4613      	mov	r3, r2
 80058da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80058dc:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	3301      	adds	r3, #1
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80058ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058f6:	e002      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058f8:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <HAL_RCC_GetSysClockFreq+0x184>)
 80058fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005900:	4618      	mov	r0, r3
 8005902:	3740      	adds	r7, #64	@ 0x40
 8005904:	46bd      	mov	sp, r7
 8005906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800
 8005910:	00f42400 	.word	0x00f42400
 8005914:	017d7840 	.word	0x017d7840

08005918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800591c:	4b03      	ldr	r3, [pc, #12]	@ (800592c <HAL_RCC_GetHCLKFreq+0x14>)
 800591e:	681b      	ldr	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000090 	.word	0x20000090

08005930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005934:	f7ff fff0 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b05      	ldr	r3, [pc, #20]	@ (8005950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0a9b      	lsrs	r3, r3, #10
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4903      	ldr	r1, [pc, #12]	@ (8005954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40023800 	.word	0x40023800
 8005954:	0800efe8 	.word	0x0800efe8

08005958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800595c:	f7ff ffdc 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005960:	4602      	mov	r2, r0
 8005962:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	0b5b      	lsrs	r3, r3, #13
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	4903      	ldr	r1, [pc, #12]	@ (800597c <HAL_RCC_GetPCLK2Freq+0x24>)
 800596e:	5ccb      	ldrb	r3, [r1, r3]
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40023800 	.word	0x40023800
 800597c:	0800efe8 	.word	0x0800efe8

08005980 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	220f      	movs	r2, #15
 800598e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005990:	4b12      	ldr	r3, [pc, #72]	@ (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0203 	and.w	r2, r3, #3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800599c:	4b0f      	ldr	r3, [pc, #60]	@ (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059a8:	4b0c      	ldr	r3, [pc, #48]	@ (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80059b4:	4b09      	ldr	r3, [pc, #36]	@ (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	08db      	lsrs	r3, r3, #3
 80059ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059c2:	4b07      	ldr	r3, [pc, #28]	@ (80059e0 <HAL_RCC_GetClockConfig+0x60>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0207 	and.w	r2, r3, #7
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40023c00 	.word	0x40023c00

080059e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e041      	b.n	8005a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fc fbea 	bl	80021e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f000 fa70 	bl	8005f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d001      	beq.n	8005a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e044      	b.n	8005b26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8005b34 <HAL_TIM_Base_Start_IT+0xb0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d018      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0x6c>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac6:	d013      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1a      	ldr	r2, [pc, #104]	@ (8005b38 <HAL_TIM_Base_Start_IT+0xb4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00e      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a19      	ldr	r2, [pc, #100]	@ (8005b3c <HAL_TIM_Base_Start_IT+0xb8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d009      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0x6c>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a17      	ldr	r2, [pc, #92]	@ (8005b40 <HAL_TIM_Base_Start_IT+0xbc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a16      	ldr	r2, [pc, #88]	@ (8005b44 <HAL_TIM_Base_Start_IT+0xc0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d111      	bne.n	8005b14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b06      	cmp	r3, #6
 8005b00:	d010      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0201 	orr.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b12:	e007      	b.n	8005b24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40000800 	.word	0x40000800
 8005b40:	40000c00 	.word	0x40000c00
 8005b44:	40014000 	.word	0x40014000

08005b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d020      	beq.n	8005bac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01b      	beq.n	8005bac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0202 	mvn.w	r2, #2
 8005b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f999 	bl	8005eca <HAL_TIM_IC_CaptureCallback>
 8005b98:	e005      	b.n	8005ba6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f98b 	bl	8005eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f99c 	bl	8005ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d020      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01b      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0204 	mvn.w	r2, #4
 8005bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f973 	bl	8005eca <HAL_TIM_IC_CaptureCallback>
 8005be4:	e005      	b.n	8005bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f965 	bl	8005eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f976 	bl	8005ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d020      	beq.n	8005c44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01b      	beq.n	8005c44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0208 	mvn.w	r2, #8
 8005c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2204      	movs	r2, #4
 8005c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f94d 	bl	8005eca <HAL_TIM_IC_CaptureCallback>
 8005c30:	e005      	b.n	8005c3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f93f 	bl	8005eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f950 	bl	8005ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d020      	beq.n	8005c90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01b      	beq.n	8005c90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0210 	mvn.w	r2, #16
 8005c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2208      	movs	r2, #8
 8005c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f927 	bl	8005eca <HAL_TIM_IC_CaptureCallback>
 8005c7c:	e005      	b.n	8005c8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f919 	bl	8005eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f92a 	bl	8005ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00c      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0201 	mvn.w	r2, #1
 8005cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fc fa00 	bl	80020b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00c      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fab6 	bl	8006244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00c      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f8fb 	bl	8005ef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00c      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0220 	mvn.w	r2, #32
 8005d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fa88 	bl	8006230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_TIM_ConfigClockSource+0x1c>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e0b4      	b.n	8005eae <HAL_TIM_ConfigClockSource+0x186>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d7c:	d03e      	beq.n	8005dfc <HAL_TIM_ConfigClockSource+0xd4>
 8005d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d82:	f200 8087 	bhi.w	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d8a:	f000 8086 	beq.w	8005e9a <HAL_TIM_ConfigClockSource+0x172>
 8005d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d92:	d87f      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005d94:	2b70      	cmp	r3, #112	@ 0x70
 8005d96:	d01a      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0xa6>
 8005d98:	2b70      	cmp	r3, #112	@ 0x70
 8005d9a:	d87b      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005d9c:	2b60      	cmp	r3, #96	@ 0x60
 8005d9e:	d050      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x11a>
 8005da0:	2b60      	cmp	r3, #96	@ 0x60
 8005da2:	d877      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b50      	cmp	r3, #80	@ 0x50
 8005da6:	d03c      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0xfa>
 8005da8:	2b50      	cmp	r3, #80	@ 0x50
 8005daa:	d873      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b40      	cmp	r3, #64	@ 0x40
 8005dae:	d058      	beq.n	8005e62 <HAL_TIM_ConfigClockSource+0x13a>
 8005db0:	2b40      	cmp	r3, #64	@ 0x40
 8005db2:	d86f      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b30      	cmp	r3, #48	@ 0x30
 8005db6:	d064      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x15a>
 8005db8:	2b30      	cmp	r3, #48	@ 0x30
 8005dba:	d86b      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d060      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d867      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d05c      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	d05a      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x15a>
 8005dcc:	e062      	b.n	8005e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dde:	f000 f999 	bl	8006114 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	609a      	str	r2, [r3, #8]
      break;
 8005dfa:	e04f      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e0c:	f000 f982 	bl	8006114 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e1e:	609a      	str	r2, [r3, #8]
      break;
 8005e20:	e03c      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f000 f8f6 	bl	8006020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2150      	movs	r1, #80	@ 0x50
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 f94f 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005e40:	e02c      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f000 f915 	bl	800607e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2160      	movs	r1, #96	@ 0x60
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 f93f 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005e60:	e01c      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f000 f8d6 	bl	8006020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2140      	movs	r1, #64	@ 0x40
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f92f 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005e80:	e00c      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f000 f926 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005e92:	e003      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	73fb      	strb	r3, [r7, #15]
      break;
 8005e98:	e000      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
	...

08005f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a3a      	ldr	r2, [pc, #232]	@ (8006004 <TIM_Base_SetConfig+0xfc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00f      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f26:	d00b      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a37      	ldr	r2, [pc, #220]	@ (8006008 <TIM_Base_SetConfig+0x100>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a36      	ldr	r2, [pc, #216]	@ (800600c <TIM_Base_SetConfig+0x104>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a35      	ldr	r2, [pc, #212]	@ (8006010 <TIM_Base_SetConfig+0x108>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d108      	bne.n	8005f52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2b      	ldr	r2, [pc, #172]	@ (8006004 <TIM_Base_SetConfig+0xfc>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01b      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f60:	d017      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a28      	ldr	r2, [pc, #160]	@ (8006008 <TIM_Base_SetConfig+0x100>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d013      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a27      	ldr	r2, [pc, #156]	@ (800600c <TIM_Base_SetConfig+0x104>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00f      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a26      	ldr	r2, [pc, #152]	@ (8006010 <TIM_Base_SetConfig+0x108>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00b      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a25      	ldr	r2, [pc, #148]	@ (8006014 <TIM_Base_SetConfig+0x10c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d007      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a24      	ldr	r2, [pc, #144]	@ (8006018 <TIM_Base_SetConfig+0x110>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_Base_SetConfig+0x8a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a23      	ldr	r2, [pc, #140]	@ (800601c <TIM_Base_SetConfig+0x114>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d108      	bne.n	8005fa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a0e      	ldr	r2, [pc, #56]	@ (8006004 <TIM_Base_SetConfig+0xfc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d103      	bne.n	8005fd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d105      	bne.n	8005ff6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f023 0201 	bic.w	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	611a      	str	r2, [r3, #16]
  }
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400
 800601c:	40014800 	.word	0x40014800

08006020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0201 	bic.w	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f023 030a 	bic.w	r3, r3, #10
 800605c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f023 0210 	bic.w	r2, r3, #16
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f043 0307 	orr.w	r3, r3, #7
 8006100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800612e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	431a      	orrs	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006168:	2302      	movs	r3, #2
 800616a:	e050      	b.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1c      	ldr	r2, [pc, #112]	@ (800621c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d018      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b8:	d013      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a18      	ldr	r2, [pc, #96]	@ (8006220 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00e      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a16      	ldr	r2, [pc, #88]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a15      	ldr	r2, [pc, #84]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a13      	ldr	r2, [pc, #76]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d10c      	bne.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40010000 	.word	0x40010000
 8006220:	40000400 	.word	0x40000400
 8006224:	40000800 	.word	0x40000800
 8006228:	40000c00 	.word	0x40000c00
 800622c:	40014000 	.word	0x40014000

08006230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006258:	b084      	sub	sp, #16
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	f107 001c 	add.w	r0, r7, #28
 8006266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800626a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800626e:	2b01      	cmp	r3, #1
 8006270:	d123      	bne.n	80062ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006276:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800629a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d105      	bne.n	80062ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 fae8 	bl	8007884 <USB_CoreReset>
 80062b4:	4603      	mov	r3, r0
 80062b6:	73fb      	strb	r3, [r7, #15]
 80062b8:	e01b      	b.n	80062f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 fadc 	bl	8007884 <USB_CoreReset>
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80062e4:	e005      	b.n	80062f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062f2:	7fbb      	ldrb	r3, [r7, #30]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d10b      	bne.n	8006310 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f043 0206 	orr.w	r2, r3, #6
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800631c:	b004      	add	sp, #16
 800631e:	4770      	bx	lr

08006320 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	4613      	mov	r3, r2
 800632c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d165      	bne.n	8006400 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4a41      	ldr	r2, [pc, #260]	@ (800643c <USB_SetTurnaroundTime+0x11c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d906      	bls.n	800634a <USB_SetTurnaroundTime+0x2a>
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4a40      	ldr	r2, [pc, #256]	@ (8006440 <USB_SetTurnaroundTime+0x120>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d202      	bcs.n	800634a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006344:	230f      	movs	r3, #15
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	e062      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4a3c      	ldr	r2, [pc, #240]	@ (8006440 <USB_SetTurnaroundTime+0x120>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d306      	bcc.n	8006360 <USB_SetTurnaroundTime+0x40>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4a3b      	ldr	r2, [pc, #236]	@ (8006444 <USB_SetTurnaroundTime+0x124>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d202      	bcs.n	8006360 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800635a:	230e      	movs	r3, #14
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	e057      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4a38      	ldr	r2, [pc, #224]	@ (8006444 <USB_SetTurnaroundTime+0x124>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d306      	bcc.n	8006376 <USB_SetTurnaroundTime+0x56>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4a37      	ldr	r2, [pc, #220]	@ (8006448 <USB_SetTurnaroundTime+0x128>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d202      	bcs.n	8006376 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006370:	230d      	movs	r3, #13
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	e04c      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4a33      	ldr	r2, [pc, #204]	@ (8006448 <USB_SetTurnaroundTime+0x128>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d306      	bcc.n	800638c <USB_SetTurnaroundTime+0x6c>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4a32      	ldr	r2, [pc, #200]	@ (800644c <USB_SetTurnaroundTime+0x12c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d802      	bhi.n	800638c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006386:	230c      	movs	r3, #12
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	e041      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4a2f      	ldr	r2, [pc, #188]	@ (800644c <USB_SetTurnaroundTime+0x12c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d906      	bls.n	80063a2 <USB_SetTurnaroundTime+0x82>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4a2e      	ldr	r2, [pc, #184]	@ (8006450 <USB_SetTurnaroundTime+0x130>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d802      	bhi.n	80063a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800639c:	230b      	movs	r3, #11
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e036      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006450 <USB_SetTurnaroundTime+0x130>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d906      	bls.n	80063b8 <USB_SetTurnaroundTime+0x98>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	4a29      	ldr	r2, [pc, #164]	@ (8006454 <USB_SetTurnaroundTime+0x134>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d802      	bhi.n	80063b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80063b2:	230a      	movs	r3, #10
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	e02b      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4a26      	ldr	r2, [pc, #152]	@ (8006454 <USB_SetTurnaroundTime+0x134>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d906      	bls.n	80063ce <USB_SetTurnaroundTime+0xae>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4a25      	ldr	r2, [pc, #148]	@ (8006458 <USB_SetTurnaroundTime+0x138>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d202      	bcs.n	80063ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063c8:	2309      	movs	r3, #9
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e020      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4a21      	ldr	r2, [pc, #132]	@ (8006458 <USB_SetTurnaroundTime+0x138>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d306      	bcc.n	80063e4 <USB_SetTurnaroundTime+0xc4>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4a20      	ldr	r2, [pc, #128]	@ (800645c <USB_SetTurnaroundTime+0x13c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d802      	bhi.n	80063e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063de:	2308      	movs	r3, #8
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e015      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4a1d      	ldr	r2, [pc, #116]	@ (800645c <USB_SetTurnaroundTime+0x13c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d906      	bls.n	80063fa <USB_SetTurnaroundTime+0xda>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006460 <USB_SetTurnaroundTime+0x140>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d202      	bcs.n	80063fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063f4:	2307      	movs	r3, #7
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	e00a      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063fa:	2306      	movs	r3, #6
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	e007      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006406:	2309      	movs	r3, #9
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	e001      	b.n	8006410 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800640c:	2309      	movs	r3, #9
 800640e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	029b      	lsls	r3, r3, #10
 8006424:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006428:	431a      	orrs	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	00d8acbf 	.word	0x00d8acbf
 8006440:	00e4e1c0 	.word	0x00e4e1c0
 8006444:	00f42400 	.word	0x00f42400
 8006448:	01067380 	.word	0x01067380
 800644c:	011a499f 	.word	0x011a499f
 8006450:	01312cff 	.word	0x01312cff
 8006454:	014ca43f 	.word	0x014ca43f
 8006458:	016e3600 	.word	0x016e3600
 800645c:	01a6ab1f 	.word	0x01a6ab1f
 8006460:	01e84800 	.word	0x01e84800

08006464 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f043 0201 	orr.w	r2, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f023 0201 	bic.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d115      	bne.n	80064f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064d6:	200a      	movs	r0, #10
 80064d8:	f7fc f8e0 	bl	800269c <HAL_Delay>
      ms += 10U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	330a      	adds	r3, #10
 80064e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 f93f 	bl	8007766 <USB_GetMode>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d01e      	beq.n	800652c <USB_SetCurrentMode+0x84>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80064f2:	d9f0      	bls.n	80064d6 <USB_SetCurrentMode+0x2e>
 80064f4:	e01a      	b.n	800652c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d115      	bne.n	8006528 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006508:	200a      	movs	r0, #10
 800650a:	f7fc f8c7 	bl	800269c <HAL_Delay>
      ms += 10U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	330a      	adds	r3, #10
 8006512:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 f926 	bl	8007766 <USB_GetMode>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <USB_SetCurrentMode+0x84>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2bc7      	cmp	r3, #199	@ 0xc7
 8006524:	d9f0      	bls.n	8006508 <USB_SetCurrentMode+0x60>
 8006526:	e001      	b.n	800652c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e005      	b.n	8006538 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006530:	d101      	bne.n	8006536 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006540:	b084      	sub	sp, #16
 8006542:	b580      	push	{r7, lr}
 8006544:	b086      	sub	sp, #24
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800654e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	e009      	b.n	8006574 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	3340      	adds	r3, #64	@ 0x40
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	2200      	movs	r2, #0
 800656c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	3301      	adds	r3, #1
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2b0e      	cmp	r3, #14
 8006578:	d9f2      	bls.n	8006560 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800657a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800657e:	2b00      	cmp	r3, #0
 8006580:	d11c      	bne.n	80065bc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006590:	f043 0302 	orr.w	r3, r3, #2
 8006594:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80065ba:	e00b      	b.n	80065d4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065cc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065da:	461a      	mov	r2, r3
 80065dc:	2300      	movs	r3, #0
 80065de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d10d      	bne.n	8006604 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065f0:	2100      	movs	r1, #0
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f968 	bl	80068c8 <USB_SetDevSpeed>
 80065f8:	e008      	b.n	800660c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065fa:	2101      	movs	r1, #1
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f963 	bl	80068c8 <USB_SetDevSpeed>
 8006602:	e003      	b.n	800660c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006604:	2103      	movs	r1, #3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f95e 	bl	80068c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800660c:	2110      	movs	r1, #16
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f8fa 	bl	8006808 <USB_FlushTxFifo>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f924 	bl	800686c <USB_FlushRxFifo>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006634:	461a      	mov	r2, r3
 8006636:	2300      	movs	r3, #0
 8006638:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006640:	461a      	mov	r2, r3
 8006642:	2300      	movs	r3, #0
 8006644:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800664c:	461a      	mov	r2, r3
 800664e:	2300      	movs	r3, #0
 8006650:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006652:	2300      	movs	r3, #0
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	e043      	b.n	80066e0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800666a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800666e:	d118      	bne.n	80066a2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006682:	461a      	mov	r2, r3
 8006684:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	e013      	b.n	80066b4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006698:	461a      	mov	r2, r3
 800669a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	e008      	b.n	80066b4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ae:	461a      	mov	r2, r3
 80066b0:	2300      	movs	r3, #0
 80066b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c0:	461a      	mov	r2, r3
 80066c2:	2300      	movs	r3, #0
 80066c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d2:	461a      	mov	r2, r3
 80066d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	3301      	adds	r3, #1
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066e4:	461a      	mov	r2, r3
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d3b5      	bcc.n	8006658 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066ec:	2300      	movs	r3, #0
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	e043      	b.n	800677a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006708:	d118      	bne.n	800673c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671c:	461a      	mov	r2, r3
 800671e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	e013      	b.n	800674e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006732:	461a      	mov	r2, r3
 8006734:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e008      	b.n	800674e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006748:	461a      	mov	r2, r3
 800674a:	2300      	movs	r3, #0
 800674c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675a:	461a      	mov	r2, r3
 800675c:	2300      	movs	r3, #0
 800675e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800676c:	461a      	mov	r2, r3
 800676e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006772:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	3301      	adds	r3, #1
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800677e:	461a      	mov	r2, r3
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4293      	cmp	r3, r2
 8006784:	d3b5      	bcc.n	80066f2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006798:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80067a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d105      	bne.n	80067bc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f043 0210 	orr.w	r2, r3, #16
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699a      	ldr	r2, [r3, #24]
 80067c0:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <USB_DevInit+0x2c4>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f043 0208 	orr.w	r2, r3, #8
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d107      	bne.n	80067f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ec:	f043 0304 	orr.w	r3, r3, #4
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006800:	b004      	add	sp, #16
 8006802:	4770      	bx	lr
 8006804:	803c3800 	.word	0x803c3800

08006808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3301      	adds	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006822:	d901      	bls.n	8006828 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e01b      	b.n	8006860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	daf2      	bge.n	8006816 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	019b      	lsls	r3, r3, #6
 8006838:	f043 0220 	orr.w	r2, r3, #32
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3301      	adds	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800684c:	d901      	bls.n	8006852 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e006      	b.n	8006860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b20      	cmp	r3, #32
 800685c:	d0f0      	beq.n	8006840 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3301      	adds	r3, #1
 800687c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006884:	d901      	bls.n	800688a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e018      	b.n	80068bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	daf2      	bge.n	8006878 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2210      	movs	r2, #16
 800689a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3301      	adds	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068a8:	d901      	bls.n	80068ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e006      	b.n	80068bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d0f0      	beq.n	800689c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068e8:	4313      	orrs	r3, r2
 80068ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b087      	sub	sp, #28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 0306 	and.w	r3, r3, #6
 8006912:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d102      	bne.n	8006920 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800691a:	2300      	movs	r3, #0
 800691c:	75fb      	strb	r3, [r7, #23]
 800691e:	e00a      	b.n	8006936 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d002      	beq.n	800692c <USB_GetDevSpeed+0x32>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b06      	cmp	r3, #6
 800692a:	d102      	bne.n	8006932 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800692c:	2302      	movs	r3, #2
 800692e:	75fb      	strb	r3, [r7, #23]
 8006930:	e001      	b.n	8006936 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006932:	230f      	movs	r3, #15
 8006934:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006936:	7dfb      	ldrb	r3, [r7, #23]
}
 8006938:	4618      	mov	r0, r3
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d13a      	bne.n	80069d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f303 	lsl.w	r3, r1, r3
 8006976:	b29b      	uxth	r3, r3
 8006978:	68f9      	ldr	r1, [r7, #12]
 800697a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800697e:	4313      	orrs	r3, r2
 8006980:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d155      	bne.n	8006a44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	791b      	ldrb	r3, [r3, #4]
 80069b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	059b      	lsls	r3, r3, #22
 80069ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069bc:	4313      	orrs	r3, r2
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	e036      	b.n	8006a44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069dc:	69da      	ldr	r2, [r3, #28]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	2101      	movs	r1, #1
 80069e8:	fa01 f303 	lsl.w	r3, r1, r3
 80069ec:	041b      	lsls	r3, r3, #16
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069f4:	4313      	orrs	r3, r2
 80069f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d11a      	bne.n	8006a44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	791b      	ldrb	r3, [r3, #4]
 8006a28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a2a:	430b      	orrs	r3, r1
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d161      	bne.n	8006b34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a86:	d11f      	bne.n	8006ac8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	0151      	lsls	r1, r2, #5
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aa2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006aa6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 030f 	and.w	r3, r3, #15
 8006ad8:	2101      	movs	r1, #1
 8006ada:	fa01 f303 	lsl.w	r3, r1, r3
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ae8:	4013      	ands	r3, r2
 8006aea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	2101      	movs	r1, #1
 8006afe:	fa01 f303 	lsl.w	r3, r1, r3
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	43db      	mvns	r3, r3
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	0159      	lsls	r1, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	440b      	add	r3, r1
 8006b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4b35      	ldr	r3, [pc, #212]	@ (8006c04 <USB_DeactivateEndpoint+0x1b0>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	600b      	str	r3, [r1, #0]
 8006b32:	e060      	b.n	8006bf6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b4a:	d11f      	bne.n	8006b8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba2:	041b      	lsls	r3, r3, #16
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bac:	4013      	ands	r3, r2
 8006bae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb6:	69da      	ldr	r2, [r3, #28]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f003 030f 	and.w	r3, r3, #15
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc6:	041b      	lsls	r3, r3, #16
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	0159      	lsls	r1, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	440b      	add	r3, r1
 8006bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4b05      	ldr	r3, [pc, #20]	@ (8006c08 <USB_DeactivateEndpoint+0x1b4>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	ec337800 	.word	0xec337800
 8006c08:	eff37800 	.word	0xeff37800

08006c0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	@ 0x28
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	f040 817f 	bne.w	8006f2c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d132      	bne.n	8006c9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c50:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c54:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	0151      	lsls	r1, r2, #5
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	440a      	add	r2, r1
 8006c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c94:	0cdb      	lsrs	r3, r3, #19
 8006c96:	04db      	lsls	r3, r3, #19
 8006c98:	6113      	str	r3, [r2, #16]
 8006c9a:	e097      	b.n	8006dcc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	0151      	lsls	r1, r2, #5
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb6:	0cdb      	lsrs	r3, r3, #19
 8006cb8:	04db      	lsls	r3, r3, #19
 8006cba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	0151      	lsls	r1, r2, #5
 8006cce:	69fa      	ldr	r2, [r7, #28]
 8006cd0:	440a      	add	r2, r1
 8006cd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cd6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006cda:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006cde:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d11a      	bne.n	8006d1c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d903      	bls.n	8006cfa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d18:	6113      	str	r3, [r2, #16]
 8006d1a:	e044      	b.n	8006da6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	4413      	add	r3, r2
 8006d26:	1e5a      	subs	r2, r3, #1
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d30:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	8afb      	ldrh	r3, [r7, #22]
 8006d42:	04d9      	lsls	r1, r3, #19
 8006d44:	4ba4      	ldr	r3, [pc, #656]	@ (8006fd8 <USB_EPStartXfer+0x3cc>)
 8006d46:	400b      	ands	r3, r1
 8006d48:	69b9      	ldr	r1, [r7, #24]
 8006d4a:	0148      	lsls	r0, r1, #5
 8006d4c:	69f9      	ldr	r1, [r7, #28]
 8006d4e:	4401      	add	r1, r0
 8006d50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d54:	4313      	orrs	r3, r2
 8006d56:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	791b      	ldrb	r3, [r3, #4]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d122      	bne.n	8006da6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d7a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006d7e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	8afb      	ldrh	r3, [r7, #22]
 8006d90:	075b      	lsls	r3, r3, #29
 8006d92:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006d96:	69b9      	ldr	r1, [r7, #24]
 8006d98:	0148      	lsls	r0, r1, #5
 8006d9a:	69f9      	ldr	r1, [r7, #28]
 8006d9c:	4401      	add	r1, r0
 8006d9e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006da2:	4313      	orrs	r3, r2
 8006da4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dbc:	69b9      	ldr	r1, [r7, #24]
 8006dbe:	0148      	lsls	r0, r1, #5
 8006dc0:	69f9      	ldr	r1, [r7, #28]
 8006dc2:	4401      	add	r1, r0
 8006dc4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d14b      	bne.n	8006e6a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de6:	461a      	mov	r2, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	791b      	ldrb	r3, [r3, #4]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d128      	bne.n	8006e48 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d110      	bne.n	8006e28 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	0151      	lsls	r1, r2, #5
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e00f      	b.n	8006e48 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e46:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	e166      	b.n	8007138 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	0151      	lsls	r1, r2, #5
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	440a      	add	r2, r1
 8006e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e84:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e88:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	791b      	ldrb	r3, [r3, #4]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d015      	beq.n	8006ebe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 814e 	beq.w	8007138 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	2101      	movs	r1, #1
 8006eae:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb2:	69f9      	ldr	r1, [r7, #28]
 8006eb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	634b      	str	r3, [r1, #52]	@ 0x34
 8006ebc:	e13c      	b.n	8007138 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d110      	bne.n	8006ef0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ee8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	e00f      	b.n	8006f10 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	0151      	lsls	r1, r2, #5
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	440a      	add	r2, r1
 8006f06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f0e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	68d9      	ldr	r1, [r3, #12]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	781a      	ldrb	r2, [r3, #0]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	b298      	uxth	r0, r3
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	4603      	mov	r3, r0
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 f9b9 	bl	800729c <USB_WritePacket>
 8006f2a:	e105      	b.n	8007138 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	0151      	lsls	r1, r2, #5
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	440a      	add	r2, r1
 8006f42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f46:	0cdb      	lsrs	r3, r3, #19
 8006f48:	04db      	lsls	r3, r3, #19
 8006f4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f66:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f6a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f6e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d132      	bne.n	8006fdc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa4:	69b9      	ldr	r1, [r7, #24]
 8006fa6:	0148      	lsls	r0, r1, #5
 8006fa8:	69f9      	ldr	r1, [r7, #28]
 8006faa:	4401      	add	r1, r0
 8006fac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fd2:	6113      	str	r3, [r2, #16]
 8006fd4:	e062      	b.n	800709c <USB_EPStartXfer+0x490>
 8006fd6:	bf00      	nop
 8006fd8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d123      	bne.n	800702c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff0:	691a      	ldr	r2, [r3, #16]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ffa:	69b9      	ldr	r1, [r7, #24]
 8006ffc:	0148      	lsls	r0, r1, #5
 8006ffe:	69f9      	ldr	r1, [r7, #28]
 8007000:	4401      	add	r1, r0
 8007002:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007006:	4313      	orrs	r3, r2
 8007008:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007024:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007028:	6113      	str	r3, [r2, #16]
 800702a:	e037      	b.n	800709c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	4413      	add	r3, r2
 8007036:	1e5a      	subs	r2, r3, #1
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007040:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	8afa      	ldrh	r2, [r7, #22]
 8007048:	fb03 f202 	mul.w	r2, r3, r2
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	8afb      	ldrh	r3, [r7, #22]
 8007060:	04d9      	lsls	r1, r3, #19
 8007062:	4b38      	ldr	r3, [pc, #224]	@ (8007144 <USB_EPStartXfer+0x538>)
 8007064:	400b      	ands	r3, r1
 8007066:	69b9      	ldr	r1, [r7, #24]
 8007068:	0148      	lsls	r0, r1, #5
 800706a:	69f9      	ldr	r1, [r7, #28]
 800706c:	4401      	add	r1, r0
 800706e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007072:	4313      	orrs	r3, r2
 8007074:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007082:	691a      	ldr	r2, [r3, #16]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800708c:	69b9      	ldr	r1, [r7, #24]
 800708e:	0148      	lsls	r0, r1, #5
 8007090:	69f9      	ldr	r1, [r7, #28]
 8007092:	4401      	add	r1, r0
 8007094:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007098:	4313      	orrs	r3, r2
 800709a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d10d      	bne.n	80070be <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	68d9      	ldr	r1, [r3, #12]
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ba:	460a      	mov	r2, r1
 80070bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	791b      	ldrb	r3, [r3, #4]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d128      	bne.n	8007118 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d110      	bne.n	80070f8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	0151      	lsls	r1, r2, #5
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	440a      	add	r2, r1
 80070ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	e00f      	b.n	8007118 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	440a      	add	r2, r1
 800710e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007116:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007132:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007136:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3720      	adds	r7, #32
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	1ff80000 	.word	0x1ff80000

08007148 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d14a      	bne.n	80071fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800717a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800717e:	f040 8086 	bne.w	800728e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	7812      	ldrb	r2, [r2, #0]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	440a      	add	r2, r1
 800719c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	7812      	ldrb	r2, [r2, #0]
 80071ba:	0151      	lsls	r1, r2, #5
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	440a      	add	r2, r1
 80071c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3301      	adds	r3, #1
 80071ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d902      	bls.n	80071e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	75fb      	strb	r3, [r7, #23]
          break;
 80071de:	e056      	b.n	800728e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071f8:	d0e7      	beq.n	80071ca <USB_EPStopXfer+0x82>
 80071fa:	e048      	b.n	800728e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	4413      	add	r3, r2
 8007206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007210:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007214:	d13b      	bne.n	800728e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	0151      	lsls	r1, r2, #5
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	440a      	add	r2, r1
 8007230:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007234:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007238:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	7812      	ldrb	r2, [r2, #0]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	440a      	add	r2, r1
 8007254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007258:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800725c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3301      	adds	r3, #1
 8007262:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f242 7210 	movw	r2, #10000	@ 0x2710
 800726a:	4293      	cmp	r3, r2
 800726c:	d902      	bls.n	8007274 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]
          break;
 8007272:	e00c      	b.n	800728e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007288:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800728c:	d0e7      	beq.n	800725e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007290:	4618      	mov	r0, r3
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	@ 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	460b      	mov	r3, r1
 80072ac:	71fb      	strb	r3, [r7, #7]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80072ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d123      	bne.n	800730a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072c2:	88bb      	ldrh	r3, [r7, #4]
 80072c4:	3303      	adds	r3, #3
 80072c6:	089b      	lsrs	r3, r3, #2
 80072c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072ca:	2300      	movs	r3, #0
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e018      	b.n	8007302 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	031a      	lsls	r2, r3, #12
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072dc:	461a      	mov	r2, r3
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	3301      	adds	r3, #1
 80072e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	3301      	adds	r3, #1
 80072ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	3301      	adds	r3, #1
 80072f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	3301      	adds	r3, #1
 80072fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	3301      	adds	r3, #1
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	429a      	cmp	r2, r3
 8007308:	d3e2      	bcc.n	80072d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3724      	adds	r7, #36	@ 0x24
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007318:	b480      	push	{r7}
 800731a:	b08b      	sub	sp, #44	@ 0x2c
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	089b      	lsrs	r3, r3, #2
 8007332:	b29b      	uxth	r3, r3
 8007334:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007336:	88fb      	ldrh	r3, [r7, #6]
 8007338:	f003 0303 	and.w	r3, r3, #3
 800733c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800733e:	2300      	movs	r3, #0
 8007340:	623b      	str	r3, [r7, #32]
 8007342:	e014      	b.n	800736e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007352:	3301      	adds	r3, #1
 8007354:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	3301      	adds	r3, #1
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	3301      	adds	r3, #1
 8007360:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	3301      	adds	r3, #1
 8007366:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	3301      	adds	r3, #1
 800736c:	623b      	str	r3, [r7, #32]
 800736e:	6a3a      	ldr	r2, [r7, #32]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	429a      	cmp	r2, r3
 8007374:	d3e6      	bcc.n	8007344 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007376:	8bfb      	ldrh	r3, [r7, #30]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01e      	beq.n	80073ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007386:	461a      	mov	r2, r3
 8007388:	f107 0310 	add.w	r3, r7, #16
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
 800739c:	b2da      	uxtb	r2, r3
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	701a      	strb	r2, [r3, #0]
      i++;
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	3301      	adds	r3, #1
 80073a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	3301      	adds	r3, #1
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80073ae:	8bfb      	ldrh	r3, [r7, #30]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80073b4:	8bfb      	ldrh	r3, [r7, #30]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1ea      	bne.n	8007390 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073bc:	4618      	mov	r0, r3
 80073be:	372c      	adds	r7, #44	@ 0x2c
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d12c      	bne.n	800743e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	db12      	blt.n	800741c <USB_EPSetStall+0x54>
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00f      	beq.n	800741c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	0151      	lsls	r1, r2, #5
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	440a      	add	r2, r1
 8007412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007416:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800741a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	0151      	lsls	r1, r2, #5
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	440a      	add	r2, r1
 8007432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007436:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	e02b      	b.n	8007496 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	db12      	blt.n	8007476 <USB_EPSetStall+0xae>
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00f      	beq.n	8007476 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	0151      	lsls	r1, r2, #5
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	440a      	add	r2, r1
 800746c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007470:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007474:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007490:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007494:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d128      	bne.n	8007512 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	0151      	lsls	r1, r2, #5
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	440a      	add	r2, r1
 80074d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	791b      	ldrb	r3, [r3, #4]
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d003      	beq.n	80074f0 <USB_EPClearStall+0x4c>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	791b      	ldrb	r3, [r3, #4]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d138      	bne.n	8007562 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	440a      	add	r2, r1
 8007506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800750a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	e027      	b.n	8007562 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	0151      	lsls	r1, r2, #5
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	440a      	add	r2, r1
 8007528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800752c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007530:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	791b      	ldrb	r3, [r3, #4]
 8007536:	2b03      	cmp	r3, #3
 8007538:	d003      	beq.n	8007542 <USB_EPClearStall+0x9e>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	791b      	ldrb	r3, [r3, #4]
 800753e:	2b02      	cmp	r3, #2
 8007540:	d10f      	bne.n	8007562 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800755c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007560:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800758e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007592:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	78fb      	ldrb	r3, [r7, #3]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80075a4:	68f9      	ldr	r1, [r7, #12]
 80075a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075aa:	4313      	orrs	r3, r2
 80075ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075d6:	f023 0303 	bic.w	r3, r3, #3
 80075da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075ea:	f023 0302 	bic.w	r3, r3, #2
 80075ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80075fe:	b480      	push	{r7}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007618:	f023 0303 	bic.w	r3, r3, #3
 800761c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800762c:	f043 0302 	orr.w	r3, r3, #2
 8007630:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4013      	ands	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007658:	68fb      	ldr	r3, [r7, #12]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	4013      	ands	r3, r2
 8007688:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	0c1b      	lsrs	r3, r3, #16
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	4013      	ands	r3, r2
 80076bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	b29b      	uxth	r3, r3
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b085      	sub	sp, #20
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	4013      	ands	r3, r2
 80076fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076fc:	68bb      	ldr	r3, [r7, #8]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800770a:	b480      	push	{r7}
 800770c:	b087      	sub	sp, #28
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800772a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800772c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	f003 030f 	and.w	r3, r3, #15
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	fa22 f303 	lsr.w	r3, r2, r3
 800773a:	01db      	lsls	r3, r3, #7
 800773c:	b2db      	uxtb	r3, r3
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4013      	ands	r3, r2
 8007756:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007758:	68bb      	ldr	r3, [r7, #8]
}
 800775a:	4618      	mov	r0, r3
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	f003 0301 	and.w	r3, r3, #1
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800779c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80077a0:	f023 0307 	bic.w	r3, r3, #7
 80077a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	460b      	mov	r3, r1
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	333c      	adds	r3, #60	@ 0x3c
 80077de:	3304      	adds	r3, #4
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	4a26      	ldr	r2, [pc, #152]	@ (8007880 <USB_EP0_OutStart+0xb8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d90a      	bls.n	8007802 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077fc:	d101      	bne.n	8007802 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	e037      	b.n	8007872 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007808:	461a      	mov	r2, r3
 800780a:	2300      	movs	r3, #0
 800780c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800781c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007820:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007830:	f043 0318 	orr.w	r3, r3, #24
 8007834:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007844:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007848:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d10f      	bne.n	8007870 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007856:	461a      	mov	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800786a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800786e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	4f54300a 	.word	0x4f54300a

08007884 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3301      	adds	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800789c:	d901      	bls.n	80078a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e01b      	b.n	80078da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	daf2      	bge.n	8007890 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f043 0201 	orr.w	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3301      	adds	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078c6:	d901      	bls.n	80078cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e006      	b.n	80078da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d0f0      	beq.n	80078ba <USB_CoreReset+0x36>

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
	...

080078e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80078f8:	f002 fc2e 	bl	800a158 <USBD_static_malloc>
 80078fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d109      	bne.n	8007918 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	32b0      	adds	r2, #176	@ 0xb0
 800790e:	2100      	movs	r1, #0
 8007910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007914:	2302      	movs	r3, #2
 8007916:	e0d4      	b.n	8007ac2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007918:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800791c:	2100      	movs	r1, #0
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f003 fbe9 	bl	800b0f6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	32b0      	adds	r2, #176	@ 0xb0
 800792e:	68f9      	ldr	r1, [r7, #12]
 8007930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	32b0      	adds	r2, #176	@ 0xb0
 800793e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	7c1b      	ldrb	r3, [r3, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d138      	bne.n	80079c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007950:	4b5e      	ldr	r3, [pc, #376]	@ (8007acc <USBD_CDC_Init+0x1e4>)
 8007952:	7819      	ldrb	r1, [r3, #0]
 8007954:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007958:	2202      	movs	r2, #2
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f002 fad9 	bl	8009f12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007960:	4b5a      	ldr	r3, [pc, #360]	@ (8007acc <USBD_CDC_Init+0x1e4>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	f003 020f 	and.w	r2, r3, #15
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4613      	mov	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	440b      	add	r3, r1
 8007974:	3324      	adds	r3, #36	@ 0x24
 8007976:	2201      	movs	r2, #1
 8007978:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800797a:	4b55      	ldr	r3, [pc, #340]	@ (8007ad0 <USBD_CDC_Init+0x1e8>)
 800797c:	7819      	ldrb	r1, [r3, #0]
 800797e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007982:	2202      	movs	r2, #2
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f002 fac4 	bl	8009f12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800798a:	4b51      	ldr	r3, [pc, #324]	@ (8007ad0 <USBD_CDC_Init+0x1e8>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	f003 020f 	and.w	r2, r3, #15
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	4613      	mov	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	440b      	add	r3, r1
 800799e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80079a2:	2201      	movs	r2, #1
 80079a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80079a6:	4b4b      	ldr	r3, [pc, #300]	@ (8007ad4 <USBD_CDC_Init+0x1ec>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	f003 020f 	and.w	r2, r3, #15
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	3326      	adds	r3, #38	@ 0x26
 80079bc:	2210      	movs	r2, #16
 80079be:	801a      	strh	r2, [r3, #0]
 80079c0:	e035      	b.n	8007a2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80079c2:	4b42      	ldr	r3, [pc, #264]	@ (8007acc <USBD_CDC_Init+0x1e4>)
 80079c4:	7819      	ldrb	r1, [r3, #0]
 80079c6:	2340      	movs	r3, #64	@ 0x40
 80079c8:	2202      	movs	r2, #2
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f002 faa1 	bl	8009f12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079d0:	4b3e      	ldr	r3, [pc, #248]	@ (8007acc <USBD_CDC_Init+0x1e4>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	f003 020f 	and.w	r2, r3, #15
 80079d8:	6879      	ldr	r1, [r7, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	440b      	add	r3, r1
 80079e4:	3324      	adds	r3, #36	@ 0x24
 80079e6:	2201      	movs	r2, #1
 80079e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079ea:	4b39      	ldr	r3, [pc, #228]	@ (8007ad0 <USBD_CDC_Init+0x1e8>)
 80079ec:	7819      	ldrb	r1, [r3, #0]
 80079ee:	2340      	movs	r3, #64	@ 0x40
 80079f0:	2202      	movs	r2, #2
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f002 fa8d 	bl	8009f12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079f8:	4b35      	ldr	r3, [pc, #212]	@ (8007ad0 <USBD_CDC_Init+0x1e8>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	f003 020f 	and.w	r2, r3, #15
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a10:	2201      	movs	r2, #1
 8007a12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a14:	4b2f      	ldr	r3, [pc, #188]	@ (8007ad4 <USBD_CDC_Init+0x1ec>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	f003 020f 	and.w	r2, r3, #15
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	440b      	add	r3, r1
 8007a28:	3326      	adds	r3, #38	@ 0x26
 8007a2a:	2210      	movs	r2, #16
 8007a2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a2e:	4b29      	ldr	r3, [pc, #164]	@ (8007ad4 <USBD_CDC_Init+0x1ec>)
 8007a30:	7819      	ldrb	r1, [r3, #0]
 8007a32:	2308      	movs	r3, #8
 8007a34:	2203      	movs	r2, #3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f002 fa6b 	bl	8009f12 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007a3c:	4b25      	ldr	r3, [pc, #148]	@ (8007ad4 <USBD_CDC_Init+0x1ec>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 020f 	and.w	r2, r3, #15
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	3324      	adds	r3, #36	@ 0x24
 8007a52:	2201      	movs	r2, #1
 8007a54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	33b0      	adds	r3, #176	@ 0xb0
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e018      	b.n	8007ac2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7c1b      	ldrb	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a98:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad0 <USBD_CDC_Init+0x1e8>)
 8007a9a:	7819      	ldrb	r1, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f002 fb22 	bl	800a0f0 <USBD_LL_PrepareReceive>
 8007aac:	e008      	b.n	8007ac0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007aae:	4b08      	ldr	r3, [pc, #32]	@ (8007ad0 <USBD_CDC_Init+0x1e8>)
 8007ab0:	7819      	ldrb	r1, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ab8:	2340      	movs	r3, #64	@ 0x40
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f002 fb18 	bl	800a0f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000123 	.word	0x20000123
 8007ad0:	20000124 	.word	0x20000124
 8007ad4:	20000125 	.word	0x20000125

08007ad8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8007bd0 <USBD_CDC_DeInit+0xf8>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f002 fa37 	bl	8009f5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007af0:	4b37      	ldr	r3, [pc, #220]	@ (8007bd0 <USBD_CDC_DeInit+0xf8>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	f003 020f 	and.w	r2, r3, #15
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	440b      	add	r3, r1
 8007b04:	3324      	adds	r3, #36	@ 0x24
 8007b06:	2200      	movs	r2, #0
 8007b08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007b0a:	4b32      	ldr	r3, [pc, #200]	@ (8007bd4 <USBD_CDC_DeInit+0xfc>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f002 fa24 	bl	8009f5e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007b16:	4b2f      	ldr	r3, [pc, #188]	@ (8007bd4 <USBD_CDC_DeInit+0xfc>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f003 020f 	and.w	r2, r3, #15
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b2e:	2200      	movs	r2, #0
 8007b30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007b32:	4b29      	ldr	r3, [pc, #164]	@ (8007bd8 <USBD_CDC_DeInit+0x100>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f002 fa10 	bl	8009f5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007b3e:	4b26      	ldr	r3, [pc, #152]	@ (8007bd8 <USBD_CDC_DeInit+0x100>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	f003 020f 	and.w	r2, r3, #15
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	440b      	add	r3, r1
 8007b52:	3324      	adds	r3, #36	@ 0x24
 8007b54:	2200      	movs	r2, #0
 8007b56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007b58:	4b1f      	ldr	r3, [pc, #124]	@ (8007bd8 <USBD_CDC_DeInit+0x100>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f003 020f 	and.w	r2, r3, #15
 8007b60:	6879      	ldr	r1, [r7, #4]
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	440b      	add	r3, r1
 8007b6c:	3326      	adds	r3, #38	@ 0x26
 8007b6e:	2200      	movs	r2, #0
 8007b70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	32b0      	adds	r2, #176	@ 0xb0
 8007b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01f      	beq.n	8007bc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	33b0      	adds	r3, #176	@ 0xb0
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	32b0      	adds	r2, #176	@ 0xb0
 8007ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f002 fae4 	bl	800a174 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	32b0      	adds	r2, #176	@ 0xb0
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000123 	.word	0x20000123
 8007bd4:	20000124 	.word	0x20000124
 8007bd8:	20000125 	.word	0x20000125

08007bdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	32b0      	adds	r2, #176	@ 0xb0
 8007bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e0bf      	b.n	8007d8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d050      	beq.n	8007cba <USBD_CDC_Setup+0xde>
 8007c18:	2b20      	cmp	r3, #32
 8007c1a:	f040 80af 	bne.w	8007d7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	88db      	ldrh	r3, [r3, #6]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d03a      	beq.n	8007c9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	b25b      	sxtb	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	da1b      	bge.n	8007c68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	33b0      	adds	r3, #176	@ 0xb0
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007c46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	88d2      	ldrh	r2, [r2, #6]
 8007c4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	88db      	ldrh	r3, [r3, #6]
 8007c52:	2b07      	cmp	r3, #7
 8007c54:	bf28      	it	cs
 8007c56:	2307      	movcs	r3, #7
 8007c58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	89fa      	ldrh	r2, [r7, #14]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 fd53 	bl	800970c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007c66:	e090      	b.n	8007d8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	785a      	ldrb	r2, [r3, #1]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	88db      	ldrh	r3, [r3, #6]
 8007c76:	2b3f      	cmp	r3, #63	@ 0x3f
 8007c78:	d803      	bhi.n	8007c82 <USBD_CDC_Setup+0xa6>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	88db      	ldrh	r3, [r3, #6]
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	e000      	b.n	8007c84 <USBD_CDC_Setup+0xa8>
 8007c82:	2240      	movs	r2, #64	@ 0x40
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007c8a:	6939      	ldr	r1, [r7, #16]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007c92:	461a      	mov	r2, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 fd65 	bl	8009764 <USBD_CtlPrepareRx>
      break;
 8007c9a:	e076      	b.n	8007d8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	33b0      	adds	r3, #176	@ 0xb0
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	7850      	ldrb	r0, [r2, #1]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	4798      	blx	r3
      break;
 8007cb8:	e067      	b.n	8007d8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	2b0b      	cmp	r3, #11
 8007cc0:	d851      	bhi.n	8007d66 <USBD_CDC_Setup+0x18a>
 8007cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc8 <USBD_CDC_Setup+0xec>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007cf9 	.word	0x08007cf9
 8007ccc:	08007d75 	.word	0x08007d75
 8007cd0:	08007d67 	.word	0x08007d67
 8007cd4:	08007d67 	.word	0x08007d67
 8007cd8:	08007d67 	.word	0x08007d67
 8007cdc:	08007d67 	.word	0x08007d67
 8007ce0:	08007d67 	.word	0x08007d67
 8007ce4:	08007d67 	.word	0x08007d67
 8007ce8:	08007d67 	.word	0x08007d67
 8007cec:	08007d67 	.word	0x08007d67
 8007cf0:	08007d23 	.word	0x08007d23
 8007cf4:	08007d4d 	.word	0x08007d4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d107      	bne.n	8007d14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d04:	f107 030a 	add.w	r3, r7, #10
 8007d08:	2202      	movs	r2, #2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f001 fcfd 	bl	800970c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d12:	e032      	b.n	8007d7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 fc7b 	bl	8009612 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	75fb      	strb	r3, [r7, #23]
          break;
 8007d20:	e02b      	b.n	8007d7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d107      	bne.n	8007d3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d2e:	f107 030d 	add.w	r3, r7, #13
 8007d32:	2201      	movs	r2, #1
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 fce8 	bl	800970c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d3c:	e01d      	b.n	8007d7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f001 fc66 	bl	8009612 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d46:	2303      	movs	r3, #3
 8007d48:	75fb      	strb	r3, [r7, #23]
          break;
 8007d4a:	e016      	b.n	8007d7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d00f      	beq.n	8007d78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 fc59 	bl	8009612 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d60:	2303      	movs	r3, #3
 8007d62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d64:	e008      	b.n	8007d78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 fc52 	bl	8009612 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	75fb      	strb	r3, [r7, #23]
          break;
 8007d72:	e002      	b.n	8007d7a <USBD_CDC_Setup+0x19e>
          break;
 8007d74:	bf00      	nop
 8007d76:	e008      	b.n	8007d8a <USBD_CDC_Setup+0x1ae>
          break;
 8007d78:	bf00      	nop
      }
      break;
 8007d7a:	e006      	b.n	8007d8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 fc47 	bl	8009612 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d84:	2303      	movs	r3, #3
 8007d86:	75fb      	strb	r3, [r7, #23]
      break;
 8007d88:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007da6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	32b0      	adds	r2, #176	@ 0xb0
 8007db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e065      	b.n	8007e8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	32b0      	adds	r2, #176	@ 0xb0
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	f003 020f 	and.w	r2, r3, #15
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	440b      	add	r3, r1
 8007de0:	3318      	adds	r3, #24
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d02f      	beq.n	8007e48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	f003 020f 	and.w	r2, r3, #15
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	440b      	add	r3, r1
 8007dfa:	3318      	adds	r3, #24
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	f003 010f 	and.w	r1, r3, #15
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	460b      	mov	r3, r1
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	440b      	add	r3, r1
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4403      	add	r3, r0
 8007e10:	331c      	adds	r3, #28
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e18:	fb01 f303 	mul.w	r3, r1, r3
 8007e1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d112      	bne.n	8007e48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	f003 020f 	and.w	r2, r3, #15
 8007e28:	6879      	ldr	r1, [r7, #4]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	440b      	add	r3, r1
 8007e34:	3318      	adds	r3, #24
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e3a:	78f9      	ldrb	r1, [r7, #3]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2200      	movs	r2, #0
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f002 f934 	bl	800a0ae <USBD_LL_Transmit>
 8007e46:	e01f      	b.n	8007e88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	33b0      	adds	r3, #176	@ 0xb0
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d010      	beq.n	8007e88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	33b0      	adds	r3, #176	@ 0xb0
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007e84:	78fa      	ldrb	r2, [r7, #3]
 8007e86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	32b0      	adds	r2, #176	@ 0xb0
 8007ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	32b0      	adds	r2, #176	@ 0xb0
 8007eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e01a      	b.n	8007efa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f002 f932 	bl	800a132 <USBD_LL_GetRxDataSize>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	33b0      	adds	r3, #176	@ 0xb0
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	32b0      	adds	r2, #176	@ 0xb0
 8007f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e024      	b.n	8007f6e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	33b0      	adds	r3, #176	@ 0xb0
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d019      	beq.n	8007f6c <USBD_CDC_EP0_RxReady+0x6a>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007f3e:	2bff      	cmp	r3, #255	@ 0xff
 8007f40:	d014      	beq.n	8007f6c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	33b0      	adds	r3, #176	@ 0xb0
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007f5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f62:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	22ff      	movs	r2, #255	@ 0xff
 8007f68:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f80:	2182      	movs	r1, #130	@ 0x82
 8007f82:	4818      	ldr	r0, [pc, #96]	@ (8007fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f84:	f000 fd0f 	bl	80089a6 <USBD_GetEpDesc>
 8007f88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	4815      	ldr	r0, [pc, #84]	@ (8007fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f8e:	f000 fd0a 	bl	80089a6 <USBD_GetEpDesc>
 8007f92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f94:	2181      	movs	r1, #129	@ 0x81
 8007f96:	4813      	ldr	r0, [pc, #76]	@ (8007fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f98:	f000 fd05 	bl	80089a6 <USBD_GetEpDesc>
 8007f9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d002      	beq.n	8007faa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2210      	movs	r2, #16
 8007fa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d006      	beq.n	8007fbe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fb8:	711a      	strb	r2, [r3, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d006      	beq.n	8007fd2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fcc:	711a      	strb	r2, [r3, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2243      	movs	r2, #67	@ 0x43
 8007fd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fd8:	4b02      	ldr	r3, [pc, #8]	@ (8007fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	200000e0 	.word	0x200000e0

08007fe8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ff0:	2182      	movs	r1, #130	@ 0x82
 8007ff2:	4818      	ldr	r0, [pc, #96]	@ (8008054 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ff4:	f000 fcd7 	bl	80089a6 <USBD_GetEpDesc>
 8007ff8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	4815      	ldr	r0, [pc, #84]	@ (8008054 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ffe:	f000 fcd2 	bl	80089a6 <USBD_GetEpDesc>
 8008002:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008004:	2181      	movs	r1, #129	@ 0x81
 8008006:	4813      	ldr	r0, [pc, #76]	@ (8008054 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008008:	f000 fccd 	bl	80089a6 <USBD_GetEpDesc>
 800800c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2210      	movs	r2, #16
 8008018:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d006      	beq.n	800802e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2200      	movs	r2, #0
 8008024:	711a      	strb	r2, [r3, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f042 0202 	orr.w	r2, r2, #2
 800802c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d006      	beq.n	8008042 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	711a      	strb	r2, [r3, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f042 0202 	orr.w	r2, r2, #2
 8008040:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2243      	movs	r2, #67	@ 0x43
 8008046:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008048:	4b02      	ldr	r3, [pc, #8]	@ (8008054 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	200000e0 	.word	0x200000e0

08008058 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008060:	2182      	movs	r1, #130	@ 0x82
 8008062:	4818      	ldr	r0, [pc, #96]	@ (80080c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008064:	f000 fc9f 	bl	80089a6 <USBD_GetEpDesc>
 8008068:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800806a:	2101      	movs	r1, #1
 800806c:	4815      	ldr	r0, [pc, #84]	@ (80080c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800806e:	f000 fc9a 	bl	80089a6 <USBD_GetEpDesc>
 8008072:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008074:	2181      	movs	r1, #129	@ 0x81
 8008076:	4813      	ldr	r0, [pc, #76]	@ (80080c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008078:	f000 fc95 	bl	80089a6 <USBD_GetEpDesc>
 800807c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2210      	movs	r2, #16
 8008088:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d006      	beq.n	800809e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2200      	movs	r2, #0
 8008094:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008098:	711a      	strb	r2, [r3, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d006      	beq.n	80080b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080ac:	711a      	strb	r2, [r3, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2243      	movs	r2, #67	@ 0x43
 80080b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080b8:	4b02      	ldr	r3, [pc, #8]	@ (80080c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	200000e0 	.word	0x200000e0

080080c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	220a      	movs	r2, #10
 80080d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80080d6:	4b03      	ldr	r3, [pc, #12]	@ (80080e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	2000009c 	.word	0x2000009c

080080e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e009      	b.n	8008110 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	33b0      	adds	r3, #176	@ 0xb0
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	32b0      	adds	r2, #176	@ 0xb0
 8008132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008136:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800813e:	2303      	movs	r3, #3
 8008140:	e008      	b.n	8008154 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	32b0      	adds	r2, #176	@ 0xb0
 8008174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008178:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008180:	2303      	movs	r3, #3
 8008182:	e004      	b.n	800818e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	32b0      	adds	r2, #176	@ 0xb0
 80081ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	32b0      	adds	r2, #176	@ 0xb0
 80081be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e018      	b.n	80081fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	7c1b      	ldrb	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <USBD_CDC_ReceivePacket+0x68>)
 80081d4:	7819      	ldrb	r1, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 ff85 	bl	800a0f0 <USBD_LL_PrepareReceive>
 80081e6:	e008      	b.n	80081fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081e8:	4b06      	ldr	r3, [pc, #24]	@ (8008204 <USBD_CDC_ReceivePacket+0x68>)
 80081ea:	7819      	ldrb	r1, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081f2:	2340      	movs	r3, #64	@ 0x40
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 ff7b 	bl	800a0f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20000124 	.word	0x20000124

08008208 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800821c:	2303      	movs	r3, #3
 800821e:	e01f      	b.n	8008260 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	79fa      	ldrb	r2, [r7, #7]
 8008252:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f001 fdf5 	bl	8009e44 <USBD_LL_Init>
 800825a:	4603      	mov	r3, r0
 800825c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800825e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800827c:	2303      	movs	r3, #3
 800827e:	e025      	b.n	80082cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	32ae      	adds	r2, #174	@ 0xae
 8008292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00f      	beq.n	80082bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	32ae      	adds	r2, #174	@ 0xae
 80082a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ac:	f107 020e 	add.w	r2, r7, #14
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
 80082b4:	4602      	mov	r2, r0
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 fdfd 	bl	8009edc <USBD_LL_Start>
 80082e2:	4603      	mov	r3, r0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d009      	beq.n	8008330 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	4611      	mov	r1, r2
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	4798      	blx	r3
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	78fa      	ldrb	r2, [r7, #3]
 8008354:	4611      	mov	r1, r2
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	4798      	blx	r3
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008360:	2303      	movs	r3, #3
 8008362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	4618      	mov	r0, r3
 8008382:	f001 f90c 	bl	800959e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008394:	461a      	mov	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083a2:	f003 031f 	and.w	r3, r3, #31
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d01a      	beq.n	80083e0 <USBD_LL_SetupStage+0x72>
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d822      	bhi.n	80083f4 <USBD_LL_SetupStage+0x86>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d002      	beq.n	80083b8 <USBD_LL_SetupStage+0x4a>
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d00a      	beq.n	80083cc <USBD_LL_SetupStage+0x5e>
 80083b6:	e01d      	b.n	80083f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fb63 	bl	8008a8c <USBD_StdDevReq>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ca:	e020      	b.n	800840e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fbcb 	bl	8008b70 <USBD_StdItfReq>
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]
      break;
 80083de:	e016      	b.n	800840e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fc2d 	bl	8008c48 <USBD_StdEPReq>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73fb      	strb	r3, [r7, #15]
      break;
 80083f2:	e00c      	b.n	800840e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 fdca 	bl	8009f9c <USBD_LL_StallEP>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
      break;
 800840c:	bf00      	nop
  }

  return ret;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	460b      	mov	r3, r1
 8008422:	607a      	str	r2, [r7, #4]
 8008424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800842a:	7afb      	ldrb	r3, [r7, #11]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d16e      	bne.n	800850e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008436:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800843e:	2b03      	cmp	r3, #3
 8008440:	f040 8098 	bne.w	8008574 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	429a      	cmp	r2, r3
 800844e:	d913      	bls.n	8008478 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	689a      	ldr	r2, [r3, #8]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	1ad2      	subs	r2, r2, r3
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	4293      	cmp	r3, r2
 8008468:	bf28      	it	cs
 800846a:	4613      	movcs	r3, r2
 800846c:	461a      	mov	r2, r3
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f001 f994 	bl	800979e <USBD_CtlContinueRx>
 8008476:	e07d      	b.n	8008574 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800847e:	f003 031f 	and.w	r3, r3, #31
 8008482:	2b02      	cmp	r3, #2
 8008484:	d014      	beq.n	80084b0 <USBD_LL_DataOutStage+0x98>
 8008486:	2b02      	cmp	r3, #2
 8008488:	d81d      	bhi.n	80084c6 <USBD_LL_DataOutStage+0xae>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <USBD_LL_DataOutStage+0x7c>
 800848e:	2b01      	cmp	r3, #1
 8008490:	d003      	beq.n	800849a <USBD_LL_DataOutStage+0x82>
 8008492:	e018      	b.n	80084c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	75bb      	strb	r3, [r7, #22]
            break;
 8008498:	e018      	b.n	80084cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	4619      	mov	r1, r3
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fa64 	bl	8008972 <USBD_CoreFindIF>
 80084aa:	4603      	mov	r3, r0
 80084ac:	75bb      	strb	r3, [r7, #22]
            break;
 80084ae:	e00d      	b.n	80084cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	4619      	mov	r1, r3
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 fa66 	bl	800898c <USBD_CoreFindEP>
 80084c0:	4603      	mov	r3, r0
 80084c2:	75bb      	strb	r3, [r7, #22]
            break;
 80084c4:	e002      	b.n	80084cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	75bb      	strb	r3, [r7, #22]
            break;
 80084ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80084cc:	7dbb      	ldrb	r3, [r7, #22]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d119      	bne.n	8008506 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d113      	bne.n	8008506 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80084de:	7dba      	ldrb	r2, [r7, #22]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	32ae      	adds	r2, #174	@ 0xae
 80084e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00b      	beq.n	8008506 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80084ee:	7dba      	ldrb	r2, [r7, #22]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80084f6:	7dba      	ldrb	r2, [r7, #22]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	32ae      	adds	r2, #174	@ 0xae
 80084fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f001 f95a 	bl	80097c0 <USBD_CtlSendStatus>
 800850c:	e032      	b.n	8008574 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800850e:	7afb      	ldrb	r3, [r7, #11]
 8008510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008514:	b2db      	uxtb	r3, r3
 8008516:	4619      	mov	r1, r3
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 fa37 	bl	800898c <USBD_CoreFindEP>
 800851e:	4603      	mov	r3, r0
 8008520:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008522:	7dbb      	ldrb	r3, [r7, #22]
 8008524:	2bff      	cmp	r3, #255	@ 0xff
 8008526:	d025      	beq.n	8008574 <USBD_LL_DataOutStage+0x15c>
 8008528:	7dbb      	ldrb	r3, [r7, #22]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d122      	bne.n	8008574 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b03      	cmp	r3, #3
 8008538:	d117      	bne.n	800856a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800853a:	7dba      	ldrb	r2, [r7, #22]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	32ae      	adds	r2, #174	@ 0xae
 8008540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00f      	beq.n	800856a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800854a:	7dba      	ldrb	r2, [r7, #22]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008552:	7dba      	ldrb	r2, [r7, #22]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	32ae      	adds	r2, #174	@ 0xae
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	7afa      	ldrb	r2, [r7, #11]
 8008560:	4611      	mov	r1, r2
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	4798      	blx	r3
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800856a:	7dfb      	ldrb	r3, [r7, #23]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008570:	7dfb      	ldrb	r3, [r7, #23]
 8008572:	e000      	b.n	8008576 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b086      	sub	sp, #24
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	460b      	mov	r3, r1
 8008588:	607a      	str	r2, [r7, #4]
 800858a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800858c:	7afb      	ldrb	r3, [r7, #11]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d16f      	bne.n	8008672 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3314      	adds	r3, #20
 8008596:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d15a      	bne.n	8008658 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d914      	bls.n	80085d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	1ad2      	subs	r2, r2, r3
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	461a      	mov	r2, r3
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f001 f8bc 	bl	8009742 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085ca:	2300      	movs	r3, #0
 80085cc:	2200      	movs	r2, #0
 80085ce:	2100      	movs	r1, #0
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f001 fd8d 	bl	800a0f0 <USBD_LL_PrepareReceive>
 80085d6:	e03f      	b.n	8008658 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d11c      	bne.n	800861e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d316      	bcc.n	800861e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d20f      	bcs.n	800861e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085fe:	2200      	movs	r2, #0
 8008600:	2100      	movs	r1, #0
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f001 f89d 	bl	8009742 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008610:	2300      	movs	r3, #0
 8008612:	2200      	movs	r2, #0
 8008614:	2100      	movs	r1, #0
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f001 fd6a 	bl	800a0f0 <USBD_LL_PrepareReceive>
 800861c:	e01c      	b.n	8008658 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b03      	cmp	r3, #3
 8008628:	d10f      	bne.n	800864a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d009      	beq.n	800864a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800864a:	2180      	movs	r1, #128	@ 0x80
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f001 fca5 	bl	8009f9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f001 f8c7 	bl	80097e6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d03a      	beq.n	80086d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f7ff fe42 	bl	80082ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008670:	e032      	b.n	80086d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008672:	7afb      	ldrb	r3, [r7, #11]
 8008674:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008678:	b2db      	uxtb	r3, r3
 800867a:	4619      	mov	r1, r3
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f985 	bl	800898c <USBD_CoreFindEP>
 8008682:	4603      	mov	r3, r0
 8008684:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008686:	7dfb      	ldrb	r3, [r7, #23]
 8008688:	2bff      	cmp	r3, #255	@ 0xff
 800868a:	d025      	beq.n	80086d8 <USBD_LL_DataInStage+0x15a>
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d122      	bne.n	80086d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b03      	cmp	r3, #3
 800869c:	d11c      	bne.n	80086d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800869e:	7dfa      	ldrb	r2, [r7, #23]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	32ae      	adds	r2, #174	@ 0xae
 80086a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d014      	beq.n	80086d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80086ae:	7dfa      	ldrb	r2, [r7, #23]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80086b6:	7dfa      	ldrb	r2, [r7, #23]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	32ae      	adds	r2, #174	@ 0xae
 80086bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	7afa      	ldrb	r2, [r7, #11]
 80086c4:	4611      	mov	r1, r2
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	4798      	blx	r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80086ce:	7dbb      	ldrb	r3, [r7, #22]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80086d4:	7dbb      	ldrb	r3, [r7, #22]
 80086d6:	e000      	b.n	80086da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d014      	beq.n	8008748 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00e      	beq.n	8008748 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	6852      	ldr	r2, [r2, #4]
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	4611      	mov	r1, r2
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008744:	2303      	movs	r3, #3
 8008746:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008748:	2340      	movs	r3, #64	@ 0x40
 800874a:	2200      	movs	r2, #0
 800874c:	2100      	movs	r1, #0
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fbdf 	bl	8009f12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2240      	movs	r2, #64	@ 0x40
 8008760:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008764:	2340      	movs	r3, #64	@ 0x40
 8008766:	2200      	movs	r2, #0
 8008768:	2180      	movs	r1, #128	@ 0x80
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f001 fbd1 	bl	8009f12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2240      	movs	r2, #64	@ 0x40
 800877a:	621a      	str	r2, [r3, #32]

  return ret;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	460b      	mov	r3, r1
 8008790:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	78fa      	ldrb	r2, [r7, #3]
 8008796:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d006      	beq.n	80087c8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2204      	movs	r2, #4
 80087cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d106      	bne.n	8008800 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b03      	cmp	r3, #3
 8008820:	d110      	bne.n	8008844 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	460b      	mov	r3, r1
 8008858:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	32ae      	adds	r2, #174	@ 0xae
 8008864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800886c:	2303      	movs	r3, #3
 800886e:	e01c      	b.n	80088aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b03      	cmp	r3, #3
 800887a:	d115      	bne.n	80088a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	32ae      	adds	r2, #174	@ 0xae
 8008886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00b      	beq.n	80088a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	32ae      	adds	r2, #174	@ 0xae
 800889a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	78fa      	ldrb	r2, [r7, #3]
 80088a2:	4611      	mov	r1, r2
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	460b      	mov	r3, r1
 80088bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	32ae      	adds	r2, #174	@ 0xae
 80088c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e01c      	b.n	800890e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d115      	bne.n	800890c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	32ae      	adds	r2, #174	@ 0xae
 80088ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	32ae      	adds	r2, #174	@ 0xae
 80088fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008904:	78fa      	ldrb	r2, [r7, #3]
 8008906:	4611      	mov	r1, r2
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00e      	beq.n	8008968 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6852      	ldr	r2, [r2, #4]
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	4611      	mov	r1, r2
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	4798      	blx	r3
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008964:	2303      	movs	r3, #3
 8008966:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800897e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008980:	4618      	mov	r0, r3
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008998:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800899a:	4618      	mov	r0, r3
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b086      	sub	sp, #24
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	885b      	ldrh	r3, [r3, #2]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	7812      	ldrb	r2, [r2, #0]
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d91f      	bls.n	8008a0c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80089d2:	e013      	b.n	80089fc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80089d4:	f107 030a 	add.w	r3, r7, #10
 80089d8:	4619      	mov	r1, r3
 80089da:	6978      	ldr	r0, [r7, #20]
 80089dc:	f000 f81b 	bl	8008a16 <USBD_GetNextDesc>
 80089e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	d108      	bne.n	80089fc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	789b      	ldrb	r3, [r3, #2]
 80089f2:	78fa      	ldrb	r2, [r7, #3]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d008      	beq.n	8008a0a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	885b      	ldrh	r3, [r3, #2]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	897b      	ldrh	r3, [r7, #10]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d8e5      	bhi.n	80089d4 <USBD_GetEpDesc+0x2e>
 8008a08:	e000      	b.n	8008a0c <USBD_GetEpDesc+0x66>
          break;
 8008a0a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a0c:	693b      	ldr	r3, [r7, #16]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	7812      	ldrb	r2, [r2, #0]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a40:	68fb      	ldr	r3, [r7, #12]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b087      	sub	sp, #28
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	3301      	adds	r3, #1
 8008a64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	b21a      	sxth	r2, r3
 8008a74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	b21b      	sxth	r3, r3
 8008a7c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a7e:	89fb      	ldrh	r3, [r7, #14]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	371c      	adds	r7, #28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008aa2:	2b40      	cmp	r3, #64	@ 0x40
 8008aa4:	d005      	beq.n	8008ab2 <USBD_StdDevReq+0x26>
 8008aa6:	2b40      	cmp	r3, #64	@ 0x40
 8008aa8:	d857      	bhi.n	8008b5a <USBD_StdDevReq+0xce>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00f      	beq.n	8008ace <USBD_StdDevReq+0x42>
 8008aae:	2b20      	cmp	r3, #32
 8008ab0:	d153      	bne.n	8008b5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	32ae      	adds	r2, #174	@ 0xae
 8008abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	4798      	blx	r3
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]
      break;
 8008acc:	e04a      	b.n	8008b64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	2b09      	cmp	r3, #9
 8008ad4:	d83b      	bhi.n	8008b4e <USBD_StdDevReq+0xc2>
 8008ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8008adc <USBD_StdDevReq+0x50>)
 8008ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008adc:	08008b31 	.word	0x08008b31
 8008ae0:	08008b45 	.word	0x08008b45
 8008ae4:	08008b4f 	.word	0x08008b4f
 8008ae8:	08008b3b 	.word	0x08008b3b
 8008aec:	08008b4f 	.word	0x08008b4f
 8008af0:	08008b0f 	.word	0x08008b0f
 8008af4:	08008b05 	.word	0x08008b05
 8008af8:	08008b4f 	.word	0x08008b4f
 8008afc:	08008b27 	.word	0x08008b27
 8008b00:	08008b19 	.word	0x08008b19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fa3c 	bl	8008f84 <USBD_GetDescriptor>
          break;
 8008b0c:	e024      	b.n	8008b58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fba1 	bl	8009258 <USBD_SetAddress>
          break;
 8008b16:	e01f      	b.n	8008b58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fbe0 	bl	80092e0 <USBD_SetConfig>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
          break;
 8008b24:	e018      	b.n	8008b58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fc83 	bl	8009434 <USBD_GetConfig>
          break;
 8008b2e:	e013      	b.n	8008b58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fcb4 	bl	80094a0 <USBD_GetStatus>
          break;
 8008b38:	e00e      	b.n	8008b58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fce3 	bl	8009508 <USBD_SetFeature>
          break;
 8008b42:	e009      	b.n	8008b58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fd07 	bl	800955a <USBD_ClrFeature>
          break;
 8008b4c:	e004      	b.n	8008b58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fd5e 	bl	8009612 <USBD_CtlError>
          break;
 8008b56:	bf00      	nop
      }
      break;
 8008b58:	e004      	b.n	8008b64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fd58 	bl	8009612 <USBD_CtlError>
      break;
 8008b62:	bf00      	nop
  }

  return ret;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop

08008b70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b86:	2b40      	cmp	r3, #64	@ 0x40
 8008b88:	d005      	beq.n	8008b96 <USBD_StdItfReq+0x26>
 8008b8a:	2b40      	cmp	r3, #64	@ 0x40
 8008b8c:	d852      	bhi.n	8008c34 <USBD_StdItfReq+0xc4>
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d001      	beq.n	8008b96 <USBD_StdItfReq+0x26>
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d14e      	bne.n	8008c34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d840      	bhi.n	8008c26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	889b      	ldrh	r3, [r3, #4]
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d836      	bhi.n	8008c1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	889b      	ldrh	r3, [r3, #4]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7ff fedb 	bl	8008972 <USBD_CoreFindIF>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2bff      	cmp	r3, #255	@ 0xff
 8008bc4:	d01d      	beq.n	8008c02 <USBD_StdItfReq+0x92>
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d11a      	bne.n	8008c02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008bcc:	7bba      	ldrb	r2, [r7, #14]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	32ae      	adds	r2, #174	@ 0xae
 8008bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00f      	beq.n	8008bfc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008bdc:	7bba      	ldrb	r2, [r7, #14]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008be4:	7bba      	ldrb	r2, [r7, #14]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	32ae      	adds	r2, #174	@ 0xae
 8008bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	4798      	blx	r3
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bfa:	e004      	b.n	8008c06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c00:	e001      	b.n	8008c06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c02:	2303      	movs	r3, #3
 8008c04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	88db      	ldrh	r3, [r3, #6]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d110      	bne.n	8008c30 <USBD_StdItfReq+0xc0>
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10d      	bne.n	8008c30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fdd3 	bl	80097c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c1a:	e009      	b.n	8008c30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fcf7 	bl	8009612 <USBD_CtlError>
          break;
 8008c24:	e004      	b.n	8008c30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fcf2 	bl	8009612 <USBD_CtlError>
          break;
 8008c2e:	e000      	b.n	8008c32 <USBD_StdItfReq+0xc2>
          break;
 8008c30:	bf00      	nop
      }
      break;
 8008c32:	e004      	b.n	8008c3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fceb 	bl	8009612 <USBD_CtlError>
      break;
 8008c3c:	bf00      	nop
  }

  return ret;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	889b      	ldrh	r3, [r3, #4]
 8008c5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c64:	2b40      	cmp	r3, #64	@ 0x40
 8008c66:	d007      	beq.n	8008c78 <USBD_StdEPReq+0x30>
 8008c68:	2b40      	cmp	r3, #64	@ 0x40
 8008c6a:	f200 817f 	bhi.w	8008f6c <USBD_StdEPReq+0x324>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d02a      	beq.n	8008cc8 <USBD_StdEPReq+0x80>
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	f040 817a 	bne.w	8008f6c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7ff fe85 	bl	800898c <USBD_CoreFindEP>
 8008c82:	4603      	mov	r3, r0
 8008c84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c86:	7b7b      	ldrb	r3, [r7, #13]
 8008c88:	2bff      	cmp	r3, #255	@ 0xff
 8008c8a:	f000 8174 	beq.w	8008f76 <USBD_StdEPReq+0x32e>
 8008c8e:	7b7b      	ldrb	r3, [r7, #13]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f040 8170 	bne.w	8008f76 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008c96:	7b7a      	ldrb	r2, [r7, #13]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c9e:	7b7a      	ldrb	r2, [r7, #13]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	32ae      	adds	r2, #174	@ 0xae
 8008ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 8163 	beq.w	8008f76 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008cb0:	7b7a      	ldrb	r2, [r7, #13]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	32ae      	adds	r2, #174	@ 0xae
 8008cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008cc6:	e156      	b.n	8008f76 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	785b      	ldrb	r3, [r3, #1]
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d008      	beq.n	8008ce2 <USBD_StdEPReq+0x9a>
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	f300 8145 	bgt.w	8008f60 <USBD_StdEPReq+0x318>
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 809b 	beq.w	8008e12 <USBD_StdEPReq+0x1ca>
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d03c      	beq.n	8008d5a <USBD_StdEPReq+0x112>
 8008ce0:	e13e      	b.n	8008f60 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d002      	beq.n	8008cf4 <USBD_StdEPReq+0xac>
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d016      	beq.n	8008d20 <USBD_StdEPReq+0xd8>
 8008cf2:	e02c      	b.n	8008d4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00d      	beq.n	8008d16 <USBD_StdEPReq+0xce>
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b80      	cmp	r3, #128	@ 0x80
 8008cfe:	d00a      	beq.n	8008d16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 f949 	bl	8009f9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d0a:	2180      	movs	r1, #128	@ 0x80
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f001 f945 	bl	8009f9c <USBD_LL_StallEP>
 8008d12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d14:	e020      	b.n	8008d58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fc7a 	bl	8009612 <USBD_CtlError>
              break;
 8008d1e:	e01b      	b.n	8008d58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	885b      	ldrh	r3, [r3, #2]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10e      	bne.n	8008d46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <USBD_StdEPReq+0xfe>
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	2b80      	cmp	r3, #128	@ 0x80
 8008d32:	d008      	beq.n	8008d46 <USBD_StdEPReq+0xfe>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	88db      	ldrh	r3, [r3, #6]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d104      	bne.n	8008d46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 f92b 	bl	8009f9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fd3a 	bl	80097c0 <USBD_CtlSendStatus>

              break;
 8008d4c:	e004      	b.n	8008d58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fc5e 	bl	8009612 <USBD_CtlError>
              break;
 8008d56:	bf00      	nop
          }
          break;
 8008d58:	e107      	b.n	8008f6a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d002      	beq.n	8008d6c <USBD_StdEPReq+0x124>
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d016      	beq.n	8008d98 <USBD_StdEPReq+0x150>
 8008d6a:	e04b      	b.n	8008e04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00d      	beq.n	8008d8e <USBD_StdEPReq+0x146>
 8008d72:	7bbb      	ldrb	r3, [r7, #14]
 8008d74:	2b80      	cmp	r3, #128	@ 0x80
 8008d76:	d00a      	beq.n	8008d8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 f90d 	bl	8009f9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d82:	2180      	movs	r1, #128	@ 0x80
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f001 f909 	bl	8009f9c <USBD_LL_StallEP>
 8008d8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d8c:	e040      	b.n	8008e10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fc3e 	bl	8009612 <USBD_CtlError>
              break;
 8008d96:	e03b      	b.n	8008e10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	885b      	ldrh	r3, [r3, #2]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d136      	bne.n	8008e0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 f913 	bl	8009fda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fd03 	bl	80097c0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7ff fde4 	bl	800898c <USBD_CoreFindEP>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dc8:	7b7b      	ldrb	r3, [r7, #13]
 8008dca:	2bff      	cmp	r3, #255	@ 0xff
 8008dcc:	d01f      	beq.n	8008e0e <USBD_StdEPReq+0x1c6>
 8008dce:	7b7b      	ldrb	r3, [r7, #13]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d11c      	bne.n	8008e0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008dd4:	7b7a      	ldrb	r2, [r7, #13]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ddc:	7b7a      	ldrb	r2, [r7, #13]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	32ae      	adds	r2, #174	@ 0xae
 8008de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d010      	beq.n	8008e0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008dec:	7b7a      	ldrb	r2, [r7, #13]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	32ae      	adds	r2, #174	@ 0xae
 8008df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	4798      	blx	r3
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e02:	e004      	b.n	8008e0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fc03 	bl	8009612 <USBD_CtlError>
              break;
 8008e0c:	e000      	b.n	8008e10 <USBD_StdEPReq+0x1c8>
              break;
 8008e0e:	bf00      	nop
          }
          break;
 8008e10:	e0ab      	b.n	8008f6a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d002      	beq.n	8008e24 <USBD_StdEPReq+0x1dc>
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d032      	beq.n	8008e88 <USBD_StdEPReq+0x240>
 8008e22:	e097      	b.n	8008f54 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d007      	beq.n	8008e3a <USBD_StdEPReq+0x1f2>
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	2b80      	cmp	r3, #128	@ 0x80
 8008e2e:	d004      	beq.n	8008e3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fbed 	bl	8009612 <USBD_CtlError>
                break;
 8008e38:	e091      	b.n	8008f5e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	da0b      	bge.n	8008e5a <USBD_StdEPReq+0x212>
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e48:	4613      	mov	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	3310      	adds	r3, #16
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	4413      	add	r3, r2
 8008e56:	3304      	adds	r3, #4
 8008e58:	e00b      	b.n	8008e72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
 8008e5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	4413      	add	r3, r2
 8008e70:	3304      	adds	r3, #4
 8008e72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fc43 	bl	800970c <USBD_CtlSendData>
              break;
 8008e86:	e06a      	b.n	8008f5e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	da11      	bge.n	8008eb4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	f003 020f 	and.w	r2, r3, #15
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	3324      	adds	r3, #36	@ 0x24
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d117      	bne.n	8008eda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fbb0 	bl	8009612 <USBD_CtlError>
                  break;
 8008eb2:	e054      	b.n	8008f5e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	f003 020f 	and.w	r2, r3, #15
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d104      	bne.n	8008eda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fb9d 	bl	8009612 <USBD_CtlError>
                  break;
 8008ed8:	e041      	b.n	8008f5e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	da0b      	bge.n	8008efa <USBD_StdEPReq+0x2b2>
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ee8:	4613      	mov	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	3310      	adds	r3, #16
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	e00b      	b.n	8008f12 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f00:	4613      	mov	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	4413      	add	r3, r2
 8008f10:	3304      	adds	r3, #4
 8008f12:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <USBD_StdEPReq+0x2d8>
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	2b80      	cmp	r3, #128	@ 0x80
 8008f1e:	d103      	bne.n	8008f28 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	e00e      	b.n	8008f46 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f001 f873 	bl	800a018 <USBD_LL_IsStallEP>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	e002      	b.n	8008f46 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fbdd 	bl	800970c <USBD_CtlSendData>
              break;
 8008f52:	e004      	b.n	8008f5e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fb5b 	bl	8009612 <USBD_CtlError>
              break;
 8008f5c:	bf00      	nop
          }
          break;
 8008f5e:	e004      	b.n	8008f6a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fb55 	bl	8009612 <USBD_CtlError>
          break;
 8008f68:	bf00      	nop
      }
      break;
 8008f6a:	e005      	b.n	8008f78 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fb4f 	bl	8009612 <USBD_CtlError>
      break;
 8008f74:	e000      	b.n	8008f78 <USBD_StdEPReq+0x330>
      break;
 8008f76:	bf00      	nop
  }

  return ret;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
	...

08008f84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	885b      	ldrh	r3, [r3, #2]
 8008f9e:	0a1b      	lsrs	r3, r3, #8
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	2b06      	cmp	r3, #6
 8008fa6:	f200 8128 	bhi.w	80091fa <USBD_GetDescriptor+0x276>
 8008faa:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb0 <USBD_GetDescriptor+0x2c>)
 8008fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb0:	08008fcd 	.word	0x08008fcd
 8008fb4:	08008fe5 	.word	0x08008fe5
 8008fb8:	08009025 	.word	0x08009025
 8008fbc:	080091fb 	.word	0x080091fb
 8008fc0:	080091fb 	.word	0x080091fb
 8008fc4:	0800919b 	.word	0x0800919b
 8008fc8:	080091c7 	.word	0x080091c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7c12      	ldrb	r2, [r2, #16]
 8008fd8:	f107 0108 	add.w	r1, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
      break;
 8008fe2:	e112      	b.n	800920a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	7c1b      	ldrb	r3, [r3, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10d      	bne.n	8009008 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff4:	f107 0208 	add.w	r2, r7, #8
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4798      	blx	r3
 8008ffc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	2202      	movs	r2, #2
 8009004:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009006:	e100      	b.n	800920a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800900e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009010:	f107 0208 	add.w	r2, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3301      	adds	r3, #1
 800901e:	2202      	movs	r2, #2
 8009020:	701a      	strb	r2, [r3, #0]
      break;
 8009022:	e0f2      	b.n	800920a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	885b      	ldrh	r3, [r3, #2]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b05      	cmp	r3, #5
 800902c:	f200 80ac 	bhi.w	8009188 <USBD_GetDescriptor+0x204>
 8009030:	a201      	add	r2, pc, #4	@ (adr r2, 8009038 <USBD_GetDescriptor+0xb4>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	08009051 	.word	0x08009051
 800903c:	08009085 	.word	0x08009085
 8009040:	080090b9 	.word	0x080090b9
 8009044:	080090ed 	.word	0x080090ed
 8009048:	08009121 	.word	0x08009121
 800904c:	08009155 	.word	0x08009155
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	7c12      	ldrb	r2, [r2, #16]
 8009068:	f107 0108 	add.w	r1, r7, #8
 800906c:	4610      	mov	r0, r2
 800906e:	4798      	blx	r3
 8009070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009072:	e091      	b.n	8009198 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 facb 	bl	8009612 <USBD_CtlError>
            err++;
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	3301      	adds	r3, #1
 8009080:	72fb      	strb	r3, [r7, #11]
          break;
 8009082:	e089      	b.n	8009198 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	7c12      	ldrb	r2, [r2, #16]
 800909c:	f107 0108 	add.w	r1, r7, #8
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090a6:	e077      	b.n	8009198 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fab1 	bl	8009612 <USBD_CtlError>
            err++;
 80090b0:	7afb      	ldrb	r3, [r7, #11]
 80090b2:	3301      	adds	r3, #1
 80090b4:	72fb      	strb	r3, [r7, #11]
          break;
 80090b6:	e06f      	b.n	8009198 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	7c12      	ldrb	r2, [r2, #16]
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090da:	e05d      	b.n	8009198 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa97 	bl	8009612 <USBD_CtlError>
            err++;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	3301      	adds	r3, #1
 80090e8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ea:	e055      	b.n	8009198 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	7c12      	ldrb	r2, [r2, #16]
 8009104:	f107 0108 	add.w	r1, r7, #8
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
 800910c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800910e:	e043      	b.n	8009198 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa7d 	bl	8009612 <USBD_CtlError>
            err++;
 8009118:	7afb      	ldrb	r3, [r7, #11]
 800911a:	3301      	adds	r3, #1
 800911c:	72fb      	strb	r3, [r7, #11]
          break;
 800911e:	e03b      	b.n	8009198 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00b      	beq.n	8009144 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	7c12      	ldrb	r2, [r2, #16]
 8009138:	f107 0108 	add.w	r1, r7, #8
 800913c:	4610      	mov	r0, r2
 800913e:	4798      	blx	r3
 8009140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009142:	e029      	b.n	8009198 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fa63 	bl	8009612 <USBD_CtlError>
            err++;
 800914c:	7afb      	ldrb	r3, [r7, #11]
 800914e:	3301      	adds	r3, #1
 8009150:	72fb      	strb	r3, [r7, #11]
          break;
 8009152:	e021      	b.n	8009198 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00b      	beq.n	8009178 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	7c12      	ldrb	r2, [r2, #16]
 800916c:	f107 0108 	add.w	r1, r7, #8
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
 8009174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009176:	e00f      	b.n	8009198 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa49 	bl	8009612 <USBD_CtlError>
            err++;
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	3301      	adds	r3, #1
 8009184:	72fb      	strb	r3, [r7, #11]
          break;
 8009186:	e007      	b.n	8009198 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fa41 	bl	8009612 <USBD_CtlError>
          err++;
 8009190:	7afb      	ldrb	r3, [r7, #11]
 8009192:	3301      	adds	r3, #1
 8009194:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009196:	bf00      	nop
      }
      break;
 8009198:	e037      	b.n	800920a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	7c1b      	ldrb	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091aa:	f107 0208 	add.w	r2, r7, #8
 80091ae:	4610      	mov	r0, r2
 80091b0:	4798      	blx	r3
 80091b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091b4:	e029      	b.n	800920a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fa2a 	bl	8009612 <USBD_CtlError>
        err++;
 80091be:	7afb      	ldrb	r3, [r7, #11]
 80091c0:	3301      	adds	r3, #1
 80091c2:	72fb      	strb	r3, [r7, #11]
      break;
 80091c4:	e021      	b.n	800920a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7c1b      	ldrb	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10d      	bne.n	80091ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d6:	f107 0208 	add.w	r2, r7, #8
 80091da:	4610      	mov	r0, r2
 80091dc:	4798      	blx	r3
 80091de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	3301      	adds	r3, #1
 80091e4:	2207      	movs	r2, #7
 80091e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091e8:	e00f      	b.n	800920a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fa10 	bl	8009612 <USBD_CtlError>
        err++;
 80091f2:	7afb      	ldrb	r3, [r7, #11]
 80091f4:	3301      	adds	r3, #1
 80091f6:	72fb      	strb	r3, [r7, #11]
      break;
 80091f8:	e007      	b.n	800920a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fa08 	bl	8009612 <USBD_CtlError>
      err++;
 8009202:	7afb      	ldrb	r3, [r7, #11]
 8009204:	3301      	adds	r3, #1
 8009206:	72fb      	strb	r3, [r7, #11]
      break;
 8009208:	bf00      	nop
  }

  if (err != 0U)
 800920a:	7afb      	ldrb	r3, [r7, #11]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d11e      	bne.n	800924e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	88db      	ldrh	r3, [r3, #6]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d016      	beq.n	8009246 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009218:	893b      	ldrh	r3, [r7, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	88da      	ldrh	r2, [r3, #6]
 8009222:	893b      	ldrh	r3, [r7, #8]
 8009224:	4293      	cmp	r3, r2
 8009226:	bf28      	it	cs
 8009228:	4613      	movcs	r3, r2
 800922a:	b29b      	uxth	r3, r3
 800922c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800922e:	893b      	ldrh	r3, [r7, #8]
 8009230:	461a      	mov	r2, r3
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fa69 	bl	800970c <USBD_CtlSendData>
 800923a:	e009      	b.n	8009250 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9e7 	bl	8009612 <USBD_CtlError>
 8009244:	e004      	b.n	8009250 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 faba 	bl	80097c0 <USBD_CtlSendStatus>
 800924c:	e000      	b.n	8009250 <USBD_GetDescriptor+0x2cc>
    return;
 800924e:	bf00      	nop
  }
}
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop

08009258 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	889b      	ldrh	r3, [r3, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d131      	bne.n	80092ce <USBD_SetAddress+0x76>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88db      	ldrh	r3, [r3, #6]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d12d      	bne.n	80092ce <USBD_SetAddress+0x76>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	885b      	ldrh	r3, [r3, #2]
 8009276:	2b7f      	cmp	r3, #127	@ 0x7f
 8009278:	d829      	bhi.n	80092ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	885b      	ldrh	r3, [r3, #2]
 800927e:	b2db      	uxtb	r3, r3
 8009280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009284:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b03      	cmp	r3, #3
 8009290:	d104      	bne.n	800929c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f9bc 	bl	8009612 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800929a:	e01d      	b.n	80092d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7bfa      	ldrb	r2, [r7, #15]
 80092a0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fee1 	bl	800a070 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa86 	bl	80097c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d004      	beq.n	80092c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2202      	movs	r2, #2
 80092be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c2:	e009      	b.n	80092d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092cc:	e004      	b.n	80092d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f99e 	bl	8009612 <USBD_CtlError>
  }
}
 80092d6:	bf00      	nop
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	885b      	ldrh	r3, [r3, #2]
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	4b4e      	ldr	r3, [pc, #312]	@ (8009430 <USBD_SetConfig+0x150>)
 80092f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092f8:	4b4d      	ldr	r3, [pc, #308]	@ (8009430 <USBD_SetConfig+0x150>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d905      	bls.n	800930c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f985 	bl	8009612 <USBD_CtlError>
    return USBD_FAIL;
 8009308:	2303      	movs	r3, #3
 800930a:	e08c      	b.n	8009426 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b02      	cmp	r3, #2
 8009316:	d002      	beq.n	800931e <USBD_SetConfig+0x3e>
 8009318:	2b03      	cmp	r3, #3
 800931a:	d029      	beq.n	8009370 <USBD_SetConfig+0x90>
 800931c:	e075      	b.n	800940a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800931e:	4b44      	ldr	r3, [pc, #272]	@ (8009430 <USBD_SetConfig+0x150>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d020      	beq.n	8009368 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009326:	4b42      	ldr	r3, [pc, #264]	@ (8009430 <USBD_SetConfig+0x150>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009330:	4b3f      	ldr	r3, [pc, #252]	@ (8009430 <USBD_SetConfig+0x150>)
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7fe ffe3 	bl	8008302 <USBD_SetClassConfig>
 800933c:	4603      	mov	r3, r0
 800933e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d008      	beq.n	8009358 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f962 	bl	8009612 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2202      	movs	r2, #2
 8009352:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009356:	e065      	b.n	8009424 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fa31 	bl	80097c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2203      	movs	r2, #3
 8009362:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009366:	e05d      	b.n	8009424 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fa29 	bl	80097c0 <USBD_CtlSendStatus>
      break;
 800936e:	e059      	b.n	8009424 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009370:	4b2f      	ldr	r3, [pc, #188]	@ (8009430 <USBD_SetConfig+0x150>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d112      	bne.n	800939e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009380:	4b2b      	ldr	r3, [pc, #172]	@ (8009430 <USBD_SetConfig+0x150>)
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	461a      	mov	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800938a:	4b29      	ldr	r3, [pc, #164]	@ (8009430 <USBD_SetConfig+0x150>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fe ffd2 	bl	800833a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fa12 	bl	80097c0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800939c:	e042      	b.n	8009424 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800939e:	4b24      	ldr	r3, [pc, #144]	@ (8009430 <USBD_SetConfig+0x150>)
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d02a      	beq.n	8009402 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7fe ffc0 	bl	800833a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80093ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009430 <USBD_SetConfig+0x150>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009430 <USBD_SetConfig+0x150>)
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7fe ff99 	bl	8008302 <USBD_SetClassConfig>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00f      	beq.n	80093fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f918 	bl	8009612 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7fe ffa5 	bl	800833a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80093f8:	e014      	b.n	8009424 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f9e0 	bl	80097c0 <USBD_CtlSendStatus>
      break;
 8009400:	e010      	b.n	8009424 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f9dc 	bl	80097c0 <USBD_CtlSendStatus>
      break;
 8009408:	e00c      	b.n	8009424 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f900 	bl	8009612 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009412:	4b07      	ldr	r3, [pc, #28]	@ (8009430 <USBD_SetConfig+0x150>)
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7fe ff8e 	bl	800833a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800941e:	2303      	movs	r3, #3
 8009420:	73fb      	strb	r3, [r7, #15]
      break;
 8009422:	bf00      	nop
  }

  return ret;
 8009424:	7bfb      	ldrb	r3, [r7, #15]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	200005b4 	.word	0x200005b4

08009434 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	88db      	ldrh	r3, [r3, #6]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d004      	beq.n	8009450 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f8e2 	bl	8009612 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800944e:	e023      	b.n	8009498 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b02      	cmp	r3, #2
 800945a:	dc02      	bgt.n	8009462 <USBD_GetConfig+0x2e>
 800945c:	2b00      	cmp	r3, #0
 800945e:	dc03      	bgt.n	8009468 <USBD_GetConfig+0x34>
 8009460:	e015      	b.n	800948e <USBD_GetConfig+0x5a>
 8009462:	2b03      	cmp	r3, #3
 8009464:	d00b      	beq.n	800947e <USBD_GetConfig+0x4a>
 8009466:	e012      	b.n	800948e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3308      	adds	r3, #8
 8009472:	2201      	movs	r2, #1
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f948 	bl	800970c <USBD_CtlSendData>
        break;
 800947c:	e00c      	b.n	8009498 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3304      	adds	r3, #4
 8009482:	2201      	movs	r2, #1
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f940 	bl	800970c <USBD_CtlSendData>
        break;
 800948c:	e004      	b.n	8009498 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f8be 	bl	8009612 <USBD_CtlError>
        break;
 8009496:	bf00      	nop
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	3b01      	subs	r3, #1
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d81e      	bhi.n	80094f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	88db      	ldrh	r3, [r3, #6]
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d004      	beq.n	80094ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f8a5 	bl	8009612 <USBD_CtlError>
        break;
 80094c8:	e01a      	b.n	8009500 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f043 0202 	orr.w	r2, r3, #2
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	330c      	adds	r3, #12
 80094ea:	2202      	movs	r2, #2
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f90c 	bl	800970c <USBD_CtlSendData>
      break;
 80094f4:	e004      	b.n	8009500 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f88a 	bl	8009612 <USBD_CtlError>
      break;
 80094fe:	bf00      	nop
  }
}
 8009500:	bf00      	nop
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	885b      	ldrh	r3, [r3, #2]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d107      	bne.n	800952a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f94c 	bl	80097c0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009528:	e013      	b.n	8009552 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	885b      	ldrh	r3, [r3, #2]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d10b      	bne.n	800954a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	889b      	ldrh	r3, [r3, #4]
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	b29b      	uxth	r3, r3
 800953a:	b2da      	uxtb	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f93c 	bl	80097c0 <USBD_CtlSendStatus>
}
 8009548:	e003      	b.n	8009552 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f860 	bl	8009612 <USBD_CtlError>
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800956a:	b2db      	uxtb	r3, r3
 800956c:	3b01      	subs	r3, #1
 800956e:	2b02      	cmp	r3, #2
 8009570:	d80b      	bhi.n	800958a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	885b      	ldrh	r3, [r3, #2]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d10c      	bne.n	8009594 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f91c 	bl	80097c0 <USBD_CtlSendStatus>
      }
      break;
 8009588:	e004      	b.n	8009594 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f840 	bl	8009612 <USBD_CtlError>
      break;
 8009592:	e000      	b.n	8009596 <USBD_ClrFeature+0x3c>
      break;
 8009594:	bf00      	nop
  }
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	781a      	ldrb	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3301      	adds	r3, #1
 80095b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	781a      	ldrb	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3301      	adds	r3, #1
 80095c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f7ff fa40 	bl	8008a4e <SWAPBYTE>
 80095ce:	4603      	mov	r3, r0
 80095d0:	461a      	mov	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3301      	adds	r3, #1
 80095da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3301      	adds	r3, #1
 80095e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f7ff fa33 	bl	8008a4e <SWAPBYTE>
 80095e8:	4603      	mov	r3, r0
 80095ea:	461a      	mov	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3301      	adds	r3, #1
 80095f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	3301      	adds	r3, #1
 80095fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f7ff fa26 	bl	8008a4e <SWAPBYTE>
 8009602:	4603      	mov	r3, r0
 8009604:	461a      	mov	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	80da      	strh	r2, [r3, #6]
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800961c:	2180      	movs	r1, #128	@ 0x80
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fcbc 	bl	8009f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009624:	2100      	movs	r1, #0
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fcb8 	bl	8009f9c <USBD_LL_StallEP>
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009640:	2300      	movs	r3, #0
 8009642:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d042      	beq.n	80096d0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800964e:	6938      	ldr	r0, [r7, #16]
 8009650:	f000 f842 	bl	80096d8 <USBD_GetLen>
 8009654:	4603      	mov	r3, r0
 8009656:	3301      	adds	r3, #1
 8009658:	005b      	lsls	r3, r3, #1
 800965a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800965e:	d808      	bhi.n	8009672 <USBD_GetString+0x3e>
 8009660:	6938      	ldr	r0, [r7, #16]
 8009662:	f000 f839 	bl	80096d8 <USBD_GetLen>
 8009666:	4603      	mov	r3, r0
 8009668:	3301      	adds	r3, #1
 800966a:	b29b      	uxth	r3, r3
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	b29a      	uxth	r2, r3
 8009670:	e001      	b.n	8009676 <USBD_GetString+0x42>
 8009672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	4413      	add	r3, r2
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	7812      	ldrb	r2, [r2, #0]
 8009684:	701a      	strb	r2, [r3, #0]
  idx++;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	3301      	adds	r3, #1
 800968a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	4413      	add	r3, r2
 8009692:	2203      	movs	r2, #3
 8009694:	701a      	strb	r2, [r3, #0]
  idx++;
 8009696:	7dfb      	ldrb	r3, [r7, #23]
 8009698:	3301      	adds	r3, #1
 800969a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800969c:	e013      	b.n	80096c6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	4413      	add	r3, r2
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	7812      	ldrb	r2, [r2, #0]
 80096a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	3301      	adds	r3, #1
 80096ae:	613b      	str	r3, [r7, #16]
    idx++;
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	3301      	adds	r3, #1
 80096b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	4413      	add	r3, r2
 80096bc:	2200      	movs	r2, #0
 80096be:	701a      	strb	r2, [r3, #0]
    idx++;
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	3301      	adds	r3, #1
 80096c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e7      	bne.n	800969e <USBD_GetString+0x6a>
 80096ce:	e000      	b.n	80096d2 <USBD_GetString+0x9e>
    return;
 80096d0:	bf00      	nop
  }
}
 80096d2:	3718      	adds	r7, #24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80096e8:	e005      	b.n	80096f6 <USBD_GetLen+0x1e>
  {
    len++;
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
 80096ec:	3301      	adds	r3, #1
 80096ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	3301      	adds	r3, #1
 80096f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1f5      	bne.n	80096ea <USBD_GetLen+0x12>
  }

  return len;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2202      	movs	r2, #2
 800971c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	2100      	movs	r1, #0
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 fcbb 	bl	800a0ae <USBD_LL_Transmit>

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	2100      	movs	r1, #0
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f000 fcaa 	bl	800a0ae <USBD_LL_Transmit>

  return USBD_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2203      	movs	r2, #3
 8009774:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	2100      	movs	r1, #0
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 fcae 	bl	800a0f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	2100      	movs	r1, #0
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fc9d 	bl	800a0f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2204      	movs	r2, #4
 80097cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097d0:	2300      	movs	r3, #0
 80097d2:	2200      	movs	r2, #0
 80097d4:	2100      	movs	r1, #0
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fc69 	bl	800a0ae <USBD_LL_Transmit>

  return USBD_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2205      	movs	r2, #5
 80097f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097f6:	2300      	movs	r3, #0
 80097f8:	2200      	movs	r2, #0
 80097fa:	2100      	movs	r1, #0
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fc77 	bl	800a0f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009810:	2200      	movs	r2, #0
 8009812:	4912      	ldr	r1, [pc, #72]	@ (800985c <MX_USB_DEVICE_Init+0x50>)
 8009814:	4812      	ldr	r0, [pc, #72]	@ (8009860 <MX_USB_DEVICE_Init+0x54>)
 8009816:	f7fe fcf7 	bl	8008208 <USBD_Init>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009820:	f7f8 fc5a 	bl	80020d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009824:	490f      	ldr	r1, [pc, #60]	@ (8009864 <MX_USB_DEVICE_Init+0x58>)
 8009826:	480e      	ldr	r0, [pc, #56]	@ (8009860 <MX_USB_DEVICE_Init+0x54>)
 8009828:	f7fe fd1e 	bl	8008268 <USBD_RegisterClass>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009832:	f7f8 fc51 	bl	80020d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009836:	490c      	ldr	r1, [pc, #48]	@ (8009868 <MX_USB_DEVICE_Init+0x5c>)
 8009838:	4809      	ldr	r0, [pc, #36]	@ (8009860 <MX_USB_DEVICE_Init+0x54>)
 800983a:	f7fe fc55 	bl	80080e8 <USBD_CDC_RegisterInterface>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009844:	f7f8 fc48 	bl	80020d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009848:	4805      	ldr	r0, [pc, #20]	@ (8009860 <MX_USB_DEVICE_Init+0x54>)
 800984a:	f7fe fd43 	bl	80082d4 <USBD_Start>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009854:	f7f8 fc40 	bl	80020d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009858:	bf00      	nop
 800985a:	bd80      	pop	{r7, pc}
 800985c:	2000013c 	.word	0x2000013c
 8009860:	200005b8 	.word	0x200005b8
 8009864:	200000a8 	.word	0x200000a8
 8009868:	20000128 	.word	0x20000128

0800986c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009870:	2200      	movs	r2, #0
 8009872:	4905      	ldr	r1, [pc, #20]	@ (8009888 <CDC_Init_FS+0x1c>)
 8009874:	4805      	ldr	r0, [pc, #20]	@ (800988c <CDC_Init_FS+0x20>)
 8009876:	f7fe fc51 	bl	800811c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800987a:	4905      	ldr	r1, [pc, #20]	@ (8009890 <CDC_Init_FS+0x24>)
 800987c:	4803      	ldr	r0, [pc, #12]	@ (800988c <CDC_Init_FS+0x20>)
 800987e:	f7fe fc6f 	bl	8008160 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009882:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009884:	4618      	mov	r0, r3
 8009886:	bd80      	pop	{r7, pc}
 8009888:	20001094 	.word	0x20001094
 800988c:	200005b8 	.word	0x200005b8
 8009890:	20000894 	.word	0x20000894

08009894 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009898:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800989a:	4618      	mov	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	6039      	str	r1, [r7, #0]
 80098ae:	71fb      	strb	r3, [r7, #7]
 80098b0:	4613      	mov	r3, r2
 80098b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	2b23      	cmp	r3, #35	@ 0x23
 80098b8:	d84a      	bhi.n	8009950 <CDC_Control_FS+0xac>
 80098ba:	a201      	add	r2, pc, #4	@ (adr r2, 80098c0 <CDC_Control_FS+0x1c>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	08009951 	.word	0x08009951
 80098c4:	08009951 	.word	0x08009951
 80098c8:	08009951 	.word	0x08009951
 80098cc:	08009951 	.word	0x08009951
 80098d0:	08009951 	.word	0x08009951
 80098d4:	08009951 	.word	0x08009951
 80098d8:	08009951 	.word	0x08009951
 80098dc:	08009951 	.word	0x08009951
 80098e0:	08009951 	.word	0x08009951
 80098e4:	08009951 	.word	0x08009951
 80098e8:	08009951 	.word	0x08009951
 80098ec:	08009951 	.word	0x08009951
 80098f0:	08009951 	.word	0x08009951
 80098f4:	08009951 	.word	0x08009951
 80098f8:	08009951 	.word	0x08009951
 80098fc:	08009951 	.word	0x08009951
 8009900:	08009951 	.word	0x08009951
 8009904:	08009951 	.word	0x08009951
 8009908:	08009951 	.word	0x08009951
 800990c:	08009951 	.word	0x08009951
 8009910:	08009951 	.word	0x08009951
 8009914:	08009951 	.word	0x08009951
 8009918:	08009951 	.word	0x08009951
 800991c:	08009951 	.word	0x08009951
 8009920:	08009951 	.word	0x08009951
 8009924:	08009951 	.word	0x08009951
 8009928:	08009951 	.word	0x08009951
 800992c:	08009951 	.word	0x08009951
 8009930:	08009951 	.word	0x08009951
 8009934:	08009951 	.word	0x08009951
 8009938:	08009951 	.word	0x08009951
 800993c:	08009951 	.word	0x08009951
 8009940:	08009951 	.word	0x08009951
 8009944:	08009951 	.word	0x08009951
 8009948:	08009951 	.word	0x08009951
 800994c:	08009951 	.word	0x08009951
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009950:	bf00      	nop
  }

  return (USBD_OK);
 8009952:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009954:	4618      	mov	r0, r3
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	4805      	ldr	r0, [pc, #20]	@ (8009984 <CDC_Receive_FS+0x24>)
 800996e:	f7fe fbf7 	bl	8008160 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009972:	4804      	ldr	r0, [pc, #16]	@ (8009984 <CDC_Receive_FS+0x24>)
 8009974:	f7fe fc12 	bl	800819c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009978:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	200005b8 	.word	0x200005b8

08009988 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	4613      	mov	r3, r2
 8009994:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800999a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
	...

080099ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	4603      	mov	r3, r0
 80099b4:	6039      	str	r1, [r7, #0]
 80099b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2212      	movs	r2, #18
 80099bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099be:	4b03      	ldr	r3, [pc, #12]	@ (80099cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	20000158 	.word	0x20000158

080099d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	6039      	str	r1, [r7, #0]
 80099da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2204      	movs	r2, #4
 80099e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099e2:	4b03      	ldr	r3, [pc, #12]	@ (80099f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	2000016c 	.word	0x2000016c

080099f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	6039      	str	r1, [r7, #0]
 80099fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a00:	79fb      	ldrb	r3, [r7, #7]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d105      	bne.n	8009a12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	4907      	ldr	r1, [pc, #28]	@ (8009a28 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a0a:	4808      	ldr	r0, [pc, #32]	@ (8009a2c <USBD_FS_ProductStrDescriptor+0x38>)
 8009a0c:	f7ff fe12 	bl	8009634 <USBD_GetString>
 8009a10:	e004      	b.n	8009a1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	4904      	ldr	r1, [pc, #16]	@ (8009a28 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a16:	4805      	ldr	r0, [pc, #20]	@ (8009a2c <USBD_FS_ProductStrDescriptor+0x38>)
 8009a18:	f7ff fe0c 	bl	8009634 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a1c:	4b02      	ldr	r3, [pc, #8]	@ (8009a28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20001894 	.word	0x20001894
 8009a2c:	0800efa0 	.word	0x0800efa0

08009a30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	6039      	str	r1, [r7, #0]
 8009a3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	4904      	ldr	r1, [pc, #16]	@ (8009a50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a40:	4804      	ldr	r0, [pc, #16]	@ (8009a54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a42:	f7ff fdf7 	bl	8009634 <USBD_GetString>
  return USBD_StrDesc;
 8009a46:	4b02      	ldr	r3, [pc, #8]	@ (8009a50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	20001894 	.word	0x20001894
 8009a54:	0800efb0 	.word	0x0800efb0

08009a58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	6039      	str	r1, [r7, #0]
 8009a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	221a      	movs	r2, #26
 8009a68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a6a:	f000 f843 	bl	8009af4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a6e:	4b02      	ldr	r3, [pc, #8]	@ (8009a78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20000170 	.word	0x20000170

08009a7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	6039      	str	r1, [r7, #0]
 8009a86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d105      	bne.n	8009a9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	4907      	ldr	r1, [pc, #28]	@ (8009ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a92:	4808      	ldr	r0, [pc, #32]	@ (8009ab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a94:	f7ff fdce 	bl	8009634 <USBD_GetString>
 8009a98:	e004      	b.n	8009aa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	4904      	ldr	r1, [pc, #16]	@ (8009ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a9e:	4805      	ldr	r0, [pc, #20]	@ (8009ab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009aa0:	f7ff fdc8 	bl	8009634 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009aa4:	4b02      	ldr	r3, [pc, #8]	@ (8009ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20001894 	.word	0x20001894
 8009ab4:	0800efbc 	.word	0x0800efbc

08009ab8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	6039      	str	r1, [r7, #0]
 8009ac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d105      	bne.n	8009ad6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	4907      	ldr	r1, [pc, #28]	@ (8009aec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ace:	4808      	ldr	r0, [pc, #32]	@ (8009af0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ad0:	f7ff fdb0 	bl	8009634 <USBD_GetString>
 8009ad4:	e004      	b.n	8009ae0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	4904      	ldr	r1, [pc, #16]	@ (8009aec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ada:	4805      	ldr	r0, [pc, #20]	@ (8009af0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009adc:	f7ff fdaa 	bl	8009634 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ae0:	4b02      	ldr	r3, [pc, #8]	@ (8009aec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20001894 	.word	0x20001894
 8009af0:	0800efc8 	.word	0x0800efc8

08009af4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009afa:	4b0f      	ldr	r3, [pc, #60]	@ (8009b38 <Get_SerialNum+0x44>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b00:	4b0e      	ldr	r3, [pc, #56]	@ (8009b3c <Get_SerialNum+0x48>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b06:	4b0e      	ldr	r3, [pc, #56]	@ (8009b40 <Get_SerialNum+0x4c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4413      	add	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d009      	beq.n	8009b2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b1a:	2208      	movs	r2, #8
 8009b1c:	4909      	ldr	r1, [pc, #36]	@ (8009b44 <Get_SerialNum+0x50>)
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 f814 	bl	8009b4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b24:	2204      	movs	r2, #4
 8009b26:	4908      	ldr	r1, [pc, #32]	@ (8009b48 <Get_SerialNum+0x54>)
 8009b28:	68b8      	ldr	r0, [r7, #8]
 8009b2a:	f000 f80f 	bl	8009b4c <IntToUnicode>
  }
}
 8009b2e:	bf00      	nop
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	1fff7a10 	.word	0x1fff7a10
 8009b3c:	1fff7a14 	.word	0x1fff7a14
 8009b40:	1fff7a18 	.word	0x1fff7a18
 8009b44:	20000172 	.word	0x20000172
 8009b48:	20000182 	.word	0x20000182

08009b4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	4613      	mov	r3, r2
 8009b58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b5e:	2300      	movs	r3, #0
 8009b60:	75fb      	strb	r3, [r7, #23]
 8009b62:	e027      	b.n	8009bb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	0f1b      	lsrs	r3, r3, #28
 8009b68:	2b09      	cmp	r3, #9
 8009b6a:	d80b      	bhi.n	8009b84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	0f1b      	lsrs	r3, r3, #28
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	7dfb      	ldrb	r3, [r7, #23]
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	4619      	mov	r1, r3
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	440b      	add	r3, r1
 8009b7c:	3230      	adds	r2, #48	@ 0x30
 8009b7e:	b2d2      	uxtb	r2, r2
 8009b80:	701a      	strb	r2, [r3, #0]
 8009b82:	e00a      	b.n	8009b9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	0f1b      	lsrs	r3, r3, #28
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	005b      	lsls	r3, r3, #1
 8009b8e:	4619      	mov	r1, r3
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	440b      	add	r3, r1
 8009b94:	3237      	adds	r2, #55	@ 0x37
 8009b96:	b2d2      	uxtb	r2, r2
 8009b98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	011b      	lsls	r3, r3, #4
 8009b9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	4413      	add	r3, r2
 8009baa:	2200      	movs	r2, #0
 8009bac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	75fb      	strb	r3, [r7, #23]
 8009bb4:	7dfa      	ldrb	r2, [r7, #23]
 8009bb6:	79fb      	ldrb	r3, [r7, #7]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d3d3      	bcc.n	8009b64 <IntToUnicode+0x18>
  }
}
 8009bbc:	bf00      	nop
 8009bbe:	bf00      	nop
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
	...

08009bcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08a      	sub	sp, #40	@ 0x28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bd4:	f107 0314 	add.w	r3, r7, #20
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	609a      	str	r2, [r3, #8]
 8009be0:	60da      	str	r2, [r3, #12]
 8009be2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009bec:	d13a      	bne.n	8009c64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bee:	2300      	movs	r3, #0
 8009bf0:	613b      	str	r3, [r7, #16]
 8009bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c6c <HAL_PCD_MspInit+0xa0>)
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8009c6c <HAL_PCD_MspInit+0xa0>)
 8009bf8:	f043 0301 	orr.w	r3, r3, #1
 8009bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8009c6c <HAL_PCD_MspInit+0xa0>)
 8009c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	613b      	str	r3, [r7, #16]
 8009c08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c0a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c10:	2302      	movs	r3, #2
 8009c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c14:	2300      	movs	r3, #0
 8009c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c1c:	230a      	movs	r3, #10
 8009c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c20:	f107 0314 	add.w	r3, r7, #20
 8009c24:	4619      	mov	r1, r3
 8009c26:	4812      	ldr	r0, [pc, #72]	@ (8009c70 <HAL_PCD_MspInit+0xa4>)
 8009c28:	f7f8 fe3e 	bl	80028a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c6c <HAL_PCD_MspInit+0xa0>)
 8009c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c30:	4a0e      	ldr	r2, [pc, #56]	@ (8009c6c <HAL_PCD_MspInit+0xa0>)
 8009c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c36:	6353      	str	r3, [r2, #52]	@ 0x34
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c6c <HAL_PCD_MspInit+0xa0>)
 8009c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c40:	4a0a      	ldr	r2, [pc, #40]	@ (8009c6c <HAL_PCD_MspInit+0xa0>)
 8009c42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c46:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c48:	4b08      	ldr	r3, [pc, #32]	@ (8009c6c <HAL_PCD_MspInit+0xa0>)
 8009c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c54:	2200      	movs	r2, #0
 8009c56:	2100      	movs	r1, #0
 8009c58:	2043      	movs	r0, #67	@ 0x43
 8009c5a:	f7f8 fdfb 	bl	8002854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c5e:	2043      	movs	r0, #67	@ 0x43
 8009c60:	f7f8 fe14 	bl	800288c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c64:	bf00      	nop
 8009c66:	3728      	adds	r7, #40	@ 0x28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	40023800 	.word	0x40023800
 8009c70:	40020000 	.word	0x40020000

08009c74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f7fe fb6f 	bl	800836e <USBD_LL_SetupStage>
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009caa:	78fa      	ldrb	r2, [r7, #3]
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	440b      	add	r3, r1
 8009cb8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f7fe fba9 	bl	8008418 <USBD_LL_DataOutStage>
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	440b      	add	r3, r1
 8009cee:	3320      	adds	r3, #32
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	78fb      	ldrb	r3, [r7, #3]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	f7fe fc42 	bl	800857e <USBD_LL_DataInStage>
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fe fd7c 	bl	800880e <USBD_LL_SOF>
}
 8009d16:	bf00      	nop
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d26:	2301      	movs	r3, #1
 8009d28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	79db      	ldrb	r3, [r3, #7]
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d001      	beq.n	8009d36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d32:	f7f8 f9d1 	bl	80020d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d3c:	7bfa      	ldrb	r2, [r7, #15]
 8009d3e:	4611      	mov	r1, r2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fe fd20 	bl	8008786 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fe fcc8 	bl	80086e2 <USBD_LL_Reset>
}
 8009d52:	bf00      	nop
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe fd1b 	bl	80087a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	6812      	ldr	r2, [r2, #0]
 8009d7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009d82:	f043 0301 	orr.w	r3, r3, #1
 8009d86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	7adb      	ldrb	r3, [r3, #11]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d90:	4b04      	ldr	r3, [pc, #16]	@ (8009da4 <HAL_PCD_SuspendCallback+0x48>)
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	4a03      	ldr	r2, [pc, #12]	@ (8009da4 <HAL_PCD_SuspendCallback+0x48>)
 8009d96:	f043 0306 	orr.w	r3, r3, #6
 8009d9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	e000ed00 	.word	0xe000ed00

08009da8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe fd11 	bl	80087de <USBD_LL_Resume>
}
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dd6:	78fa      	ldrb	r2, [r7, #3]
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe fd69 	bl	80088b2 <USBD_LL_IsoOUTIncomplete>
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dfa:	78fa      	ldrb	r2, [r7, #3]
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fe fd25 	bl	800884e <USBD_LL_IsoINIncomplete>
}
 8009e04:	bf00      	nop
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe fd7b 	bl	8008916 <USBD_LL_DevConnected>
}
 8009e20:	bf00      	nop
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fe fd78 	bl	800892c <USBD_LL_DevDisconnected>
}
 8009e3c:	bf00      	nop
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d13c      	bne.n	8009ece <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e54:	4a20      	ldr	r2, [pc, #128]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e60:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e64:	4b1c      	ldr	r3, [pc, #112]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009e6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e6e:	2204      	movs	r2, #4
 8009e70:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e72:	4b19      	ldr	r3, [pc, #100]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e74:	2202      	movs	r2, #2
 8009e76:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e78:	4b17      	ldr	r3, [pc, #92]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e7e:	4b16      	ldr	r3, [pc, #88]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e80:	2202      	movs	r2, #2
 8009e82:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e84:	4b14      	ldr	r3, [pc, #80]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e86:	2200      	movs	r2, #0
 8009e88:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e8a:	4b13      	ldr	r3, [pc, #76]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e90:	4b11      	ldr	r3, [pc, #68]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009e96:	4b10      	ldr	r3, [pc, #64]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ea2:	480d      	ldr	r0, [pc, #52]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009ea4:	f7f9 fec2 	bl	8003c2c <HAL_PCD_Init>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009eae:	f7f8 f913 	bl	80020d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009eb2:	2180      	movs	r1, #128	@ 0x80
 8009eb4:	4808      	ldr	r0, [pc, #32]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009eb6:	f7fb f8ee 	bl	8005096 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009eba:	2240      	movs	r2, #64	@ 0x40
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	4806      	ldr	r0, [pc, #24]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009ec0:	f7fb f8a2 	bl	8005008 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ec4:	2280      	movs	r2, #128	@ 0x80
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	4803      	ldr	r0, [pc, #12]	@ (8009ed8 <USBD_LL_Init+0x94>)
 8009eca:	f7fb f89d 	bl	8005008 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20001a94 	.word	0x20001a94

08009edc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7f9 ffa9 	bl	8003e4a <HAL_PCD_Start>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 f942 	bl	800a188 <USBD_Get_USB_Status>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f08:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	461a      	mov	r2, r3
 8009f20:	4603      	mov	r3, r0
 8009f22:	70fb      	strb	r3, [r7, #3]
 8009f24:	460b      	mov	r3, r1
 8009f26:	70bb      	strb	r3, [r7, #2]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009f3a:	78bb      	ldrb	r3, [r7, #2]
 8009f3c:	883a      	ldrh	r2, [r7, #0]
 8009f3e:	78f9      	ldrb	r1, [r7, #3]
 8009f40:	f7fa fc7d 	bl	800483e <HAL_PCD_EP_Open>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 f91c 	bl	800a188 <USBD_Get_USB_Status>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f78:	78fa      	ldrb	r2, [r7, #3]
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fa fcc8 	bl	8004912 <HAL_PCD_EP_Close>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f86:	7bfb      	ldrb	r3, [r7, #15]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 f8fd 	bl	800a188 <USBD_Get_USB_Status>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fb6:	78fa      	ldrb	r2, [r7, #3]
 8009fb8:	4611      	mov	r1, r2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fa fd80 	bl	8004ac0 <HAL_PCD_EP_SetStall>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 f8de 	bl	800a188 <USBD_Get_USB_Status>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b084      	sub	sp, #16
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ff4:	78fa      	ldrb	r2, [r7, #3]
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fa fdc4 	bl	8004b86 <HAL_PCD_EP_ClrStall>
 8009ffe:	4603      	mov	r3, r0
 800a000:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a002:	7bfb      	ldrb	r3, [r7, #15]
 800a004:	4618      	mov	r0, r3
 800a006:	f000 f8bf 	bl	800a188 <USBD_Get_USB_Status>
 800a00a:	4603      	mov	r3, r0
 800a00c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a02a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a02c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a030:	2b00      	cmp	r3, #0
 800a032:	da0b      	bge.n	800a04c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a034:	78fb      	ldrb	r3, [r7, #3]
 800a036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a03a:	68f9      	ldr	r1, [r7, #12]
 800a03c:	4613      	mov	r3, r2
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	4413      	add	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	440b      	add	r3, r1
 800a046:	3316      	adds	r3, #22
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	e00b      	b.n	800a064 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a04c:	78fb      	ldrb	r3, [r7, #3]
 800a04e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a052:	68f9      	ldr	r1, [r7, #12]
 800a054:	4613      	mov	r3, r2
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	4413      	add	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	440b      	add	r3, r1
 800a05e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a062:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a08a:	78fa      	ldrb	r2, [r7, #3]
 800a08c:	4611      	mov	r1, r2
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fa fbb1 	bl	80047f6 <HAL_PCD_SetAddress>
 800a094:	4603      	mov	r3, r0
 800a096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 f874 	bl	800a188 <USBD_Get_USB_Status>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b086      	sub	sp, #24
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a0cc:	7af9      	ldrb	r1, [r7, #11]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	f7fa fcbb 	bl	8004a4c <HAL_PCD_EP_Transmit>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0da:	7dfb      	ldrb	r3, [r7, #23]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 f853 	bl	800a188 <USBD_Get_USB_Status>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a10e:	7af9      	ldrb	r1, [r7, #11]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	f7fa fc47 	bl	80049a6 <HAL_PCD_EP_Receive>
 800a118:	4603      	mov	r3, r0
 800a11a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 f832 	bl	800a188 <USBD_Get_USB_Status>
 800a124:	4603      	mov	r3, r0
 800a126:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a128:	7dbb      	ldrb	r3, [r7, #22]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	460b      	mov	r3, r1
 800a13c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a144:	78fa      	ldrb	r2, [r7, #3]
 800a146:	4611      	mov	r1, r2
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fa fc67 	bl	8004a1c <HAL_PCD_EP_GetRxCount>
 800a14e:	4603      	mov	r3, r0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a160:	4b03      	ldr	r3, [pc, #12]	@ (800a170 <USBD_static_malloc+0x18>)
}
 800a162:	4618      	mov	r0, r3
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	20001f78 	.word	0x20001f78

0800a174 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]

}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a196:	79fb      	ldrb	r3, [r7, #7]
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d817      	bhi.n	800a1cc <USBD_Get_USB_Status+0x44>
 800a19c:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a4 <USBD_Get_USB_Status+0x1c>)
 800a19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a2:	bf00      	nop
 800a1a4:	0800a1b5 	.word	0x0800a1b5
 800a1a8:	0800a1bb 	.word	0x0800a1bb
 800a1ac:	0800a1c1 	.word	0x0800a1c1
 800a1b0:	0800a1c7 	.word	0x0800a1c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b8:	e00b      	b.n	800a1d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a1be:	e008      	b.n	800a1d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1c4:	e005      	b.n	800a1d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ca:	e002      	b.n	800a1d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d0:	bf00      	nop
  }
  return usb_status;
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <__cvt>:
 800a1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	ec57 6b10 	vmov	r6, r7, d0
 800a1e8:	2f00      	cmp	r7, #0
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	463b      	mov	r3, r7
 800a1f0:	bfbb      	ittet	lt
 800a1f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a1f6:	461f      	movlt	r7, r3
 800a1f8:	2300      	movge	r3, #0
 800a1fa:	232d      	movlt	r3, #45	@ 0x2d
 800a1fc:	700b      	strb	r3, [r1, #0]
 800a1fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a200:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a204:	4691      	mov	r9, r2
 800a206:	f023 0820 	bic.w	r8, r3, #32
 800a20a:	bfbc      	itt	lt
 800a20c:	4632      	movlt	r2, r6
 800a20e:	4616      	movlt	r6, r2
 800a210:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a214:	d005      	beq.n	800a222 <__cvt+0x42>
 800a216:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a21a:	d100      	bne.n	800a21e <__cvt+0x3e>
 800a21c:	3401      	adds	r4, #1
 800a21e:	2102      	movs	r1, #2
 800a220:	e000      	b.n	800a224 <__cvt+0x44>
 800a222:	2103      	movs	r1, #3
 800a224:	ab03      	add	r3, sp, #12
 800a226:	9301      	str	r3, [sp, #4]
 800a228:	ab02      	add	r3, sp, #8
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	ec47 6b10 	vmov	d0, r6, r7
 800a230:	4653      	mov	r3, sl
 800a232:	4622      	mov	r2, r4
 800a234:	f001 f870 	bl	800b318 <_dtoa_r>
 800a238:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a23c:	4605      	mov	r5, r0
 800a23e:	d119      	bne.n	800a274 <__cvt+0x94>
 800a240:	f019 0f01 	tst.w	r9, #1
 800a244:	d00e      	beq.n	800a264 <__cvt+0x84>
 800a246:	eb00 0904 	add.w	r9, r0, r4
 800a24a:	2200      	movs	r2, #0
 800a24c:	2300      	movs	r3, #0
 800a24e:	4630      	mov	r0, r6
 800a250:	4639      	mov	r1, r7
 800a252:	f7f6 fc41 	bl	8000ad8 <__aeabi_dcmpeq>
 800a256:	b108      	cbz	r0, 800a25c <__cvt+0x7c>
 800a258:	f8cd 900c 	str.w	r9, [sp, #12]
 800a25c:	2230      	movs	r2, #48	@ 0x30
 800a25e:	9b03      	ldr	r3, [sp, #12]
 800a260:	454b      	cmp	r3, r9
 800a262:	d31e      	bcc.n	800a2a2 <__cvt+0xc2>
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a268:	1b5b      	subs	r3, r3, r5
 800a26a:	4628      	mov	r0, r5
 800a26c:	6013      	str	r3, [r2, #0]
 800a26e:	b004      	add	sp, #16
 800a270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a274:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a278:	eb00 0904 	add.w	r9, r0, r4
 800a27c:	d1e5      	bne.n	800a24a <__cvt+0x6a>
 800a27e:	7803      	ldrb	r3, [r0, #0]
 800a280:	2b30      	cmp	r3, #48	@ 0x30
 800a282:	d10a      	bne.n	800a29a <__cvt+0xba>
 800a284:	2200      	movs	r2, #0
 800a286:	2300      	movs	r3, #0
 800a288:	4630      	mov	r0, r6
 800a28a:	4639      	mov	r1, r7
 800a28c:	f7f6 fc24 	bl	8000ad8 <__aeabi_dcmpeq>
 800a290:	b918      	cbnz	r0, 800a29a <__cvt+0xba>
 800a292:	f1c4 0401 	rsb	r4, r4, #1
 800a296:	f8ca 4000 	str.w	r4, [sl]
 800a29a:	f8da 3000 	ldr.w	r3, [sl]
 800a29e:	4499      	add	r9, r3
 800a2a0:	e7d3      	b.n	800a24a <__cvt+0x6a>
 800a2a2:	1c59      	adds	r1, r3, #1
 800a2a4:	9103      	str	r1, [sp, #12]
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	e7d9      	b.n	800a25e <__cvt+0x7e>

0800a2aa <__exponent>:
 800a2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2ac:	2900      	cmp	r1, #0
 800a2ae:	bfba      	itte	lt
 800a2b0:	4249      	neglt	r1, r1
 800a2b2:	232d      	movlt	r3, #45	@ 0x2d
 800a2b4:	232b      	movge	r3, #43	@ 0x2b
 800a2b6:	2909      	cmp	r1, #9
 800a2b8:	7002      	strb	r2, [r0, #0]
 800a2ba:	7043      	strb	r3, [r0, #1]
 800a2bc:	dd29      	ble.n	800a312 <__exponent+0x68>
 800a2be:	f10d 0307 	add.w	r3, sp, #7
 800a2c2:	461d      	mov	r5, r3
 800a2c4:	270a      	movs	r7, #10
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800a2cc:	fb07 1416 	mls	r4, r7, r6, r1
 800a2d0:	3430      	adds	r4, #48	@ 0x30
 800a2d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	2c63      	cmp	r4, #99	@ 0x63
 800a2da:	f103 33ff 	add.w	r3, r3, #4294967295
 800a2de:	4631      	mov	r1, r6
 800a2e0:	dcf1      	bgt.n	800a2c6 <__exponent+0x1c>
 800a2e2:	3130      	adds	r1, #48	@ 0x30
 800a2e4:	1e94      	subs	r4, r2, #2
 800a2e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a2ea:	1c41      	adds	r1, r0, #1
 800a2ec:	4623      	mov	r3, r4
 800a2ee:	42ab      	cmp	r3, r5
 800a2f0:	d30a      	bcc.n	800a308 <__exponent+0x5e>
 800a2f2:	f10d 0309 	add.w	r3, sp, #9
 800a2f6:	1a9b      	subs	r3, r3, r2
 800a2f8:	42ac      	cmp	r4, r5
 800a2fa:	bf88      	it	hi
 800a2fc:	2300      	movhi	r3, #0
 800a2fe:	3302      	adds	r3, #2
 800a300:	4403      	add	r3, r0
 800a302:	1a18      	subs	r0, r3, r0
 800a304:	b003      	add	sp, #12
 800a306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a308:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a30c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a310:	e7ed      	b.n	800a2ee <__exponent+0x44>
 800a312:	2330      	movs	r3, #48	@ 0x30
 800a314:	3130      	adds	r1, #48	@ 0x30
 800a316:	7083      	strb	r3, [r0, #2]
 800a318:	70c1      	strb	r1, [r0, #3]
 800a31a:	1d03      	adds	r3, r0, #4
 800a31c:	e7f1      	b.n	800a302 <__exponent+0x58>
	...

0800a320 <_printf_float>:
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a324:	b08d      	sub	sp, #52	@ 0x34
 800a326:	460c      	mov	r4, r1
 800a328:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a32c:	4616      	mov	r6, r2
 800a32e:	461f      	mov	r7, r3
 800a330:	4605      	mov	r5, r0
 800a332:	f000 fee9 	bl	800b108 <_localeconv_r>
 800a336:	6803      	ldr	r3, [r0, #0]
 800a338:	9304      	str	r3, [sp, #16]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7f5 ffa0 	bl	8000280 <strlen>
 800a340:	2300      	movs	r3, #0
 800a342:	930a      	str	r3, [sp, #40]	@ 0x28
 800a344:	f8d8 3000 	ldr.w	r3, [r8]
 800a348:	9005      	str	r0, [sp, #20]
 800a34a:	3307      	adds	r3, #7
 800a34c:	f023 0307 	bic.w	r3, r3, #7
 800a350:	f103 0208 	add.w	r2, r3, #8
 800a354:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a358:	f8d4 b000 	ldr.w	fp, [r4]
 800a35c:	f8c8 2000 	str.w	r2, [r8]
 800a360:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a364:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a368:	9307      	str	r3, [sp, #28]
 800a36a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a36e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a372:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a376:	4b9c      	ldr	r3, [pc, #624]	@ (800a5e8 <_printf_float+0x2c8>)
 800a378:	f04f 32ff 	mov.w	r2, #4294967295
 800a37c:	f7f6 fbde 	bl	8000b3c <__aeabi_dcmpun>
 800a380:	bb70      	cbnz	r0, 800a3e0 <_printf_float+0xc0>
 800a382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a386:	4b98      	ldr	r3, [pc, #608]	@ (800a5e8 <_printf_float+0x2c8>)
 800a388:	f04f 32ff 	mov.w	r2, #4294967295
 800a38c:	f7f6 fbb8 	bl	8000b00 <__aeabi_dcmple>
 800a390:	bb30      	cbnz	r0, 800a3e0 <_printf_float+0xc0>
 800a392:	2200      	movs	r2, #0
 800a394:	2300      	movs	r3, #0
 800a396:	4640      	mov	r0, r8
 800a398:	4649      	mov	r1, r9
 800a39a:	f7f6 fba7 	bl	8000aec <__aeabi_dcmplt>
 800a39e:	b110      	cbz	r0, 800a3a6 <_printf_float+0x86>
 800a3a0:	232d      	movs	r3, #45	@ 0x2d
 800a3a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3a6:	4a91      	ldr	r2, [pc, #580]	@ (800a5ec <_printf_float+0x2cc>)
 800a3a8:	4b91      	ldr	r3, [pc, #580]	@ (800a5f0 <_printf_float+0x2d0>)
 800a3aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a3ae:	bf8c      	ite	hi
 800a3b0:	4690      	movhi	r8, r2
 800a3b2:	4698      	movls	r8, r3
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	6123      	str	r3, [r4, #16]
 800a3b8:	f02b 0304 	bic.w	r3, fp, #4
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	f04f 0900 	mov.w	r9, #0
 800a3c2:	9700      	str	r7, [sp, #0]
 800a3c4:	4633      	mov	r3, r6
 800a3c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 f9d2 	bl	800a774 <_printf_common>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	f040 808d 	bne.w	800a4f0 <_printf_float+0x1d0>
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	b00d      	add	sp, #52	@ 0x34
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	f7f6 fba8 	bl	8000b3c <__aeabi_dcmpun>
 800a3ec:	b140      	cbz	r0, 800a400 <_printf_float+0xe0>
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfbc      	itt	lt
 800a3f4:	232d      	movlt	r3, #45	@ 0x2d
 800a3f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a3fa:	4a7e      	ldr	r2, [pc, #504]	@ (800a5f4 <_printf_float+0x2d4>)
 800a3fc:	4b7e      	ldr	r3, [pc, #504]	@ (800a5f8 <_printf_float+0x2d8>)
 800a3fe:	e7d4      	b.n	800a3aa <_printf_float+0x8a>
 800a400:	6863      	ldr	r3, [r4, #4]
 800a402:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a406:	9206      	str	r2, [sp, #24]
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	d13b      	bne.n	800a484 <_printf_float+0x164>
 800a40c:	2306      	movs	r3, #6
 800a40e:	6063      	str	r3, [r4, #4]
 800a410:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a414:	2300      	movs	r3, #0
 800a416:	6022      	str	r2, [r4, #0]
 800a418:	9303      	str	r3, [sp, #12]
 800a41a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a41c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a420:	ab09      	add	r3, sp, #36	@ 0x24
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	6861      	ldr	r1, [r4, #4]
 800a426:	ec49 8b10 	vmov	d0, r8, r9
 800a42a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a42e:	4628      	mov	r0, r5
 800a430:	f7ff fed6 	bl	800a1e0 <__cvt>
 800a434:	9b06      	ldr	r3, [sp, #24]
 800a436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a438:	2b47      	cmp	r3, #71	@ 0x47
 800a43a:	4680      	mov	r8, r0
 800a43c:	d129      	bne.n	800a492 <_printf_float+0x172>
 800a43e:	1cc8      	adds	r0, r1, #3
 800a440:	db02      	blt.n	800a448 <_printf_float+0x128>
 800a442:	6863      	ldr	r3, [r4, #4]
 800a444:	4299      	cmp	r1, r3
 800a446:	dd41      	ble.n	800a4cc <_printf_float+0x1ac>
 800a448:	f1aa 0a02 	sub.w	sl, sl, #2
 800a44c:	fa5f fa8a 	uxtb.w	sl, sl
 800a450:	3901      	subs	r1, #1
 800a452:	4652      	mov	r2, sl
 800a454:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a458:	9109      	str	r1, [sp, #36]	@ 0x24
 800a45a:	f7ff ff26 	bl	800a2aa <__exponent>
 800a45e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a460:	1813      	adds	r3, r2, r0
 800a462:	2a01      	cmp	r2, #1
 800a464:	4681      	mov	r9, r0
 800a466:	6123      	str	r3, [r4, #16]
 800a468:	dc02      	bgt.n	800a470 <_printf_float+0x150>
 800a46a:	6822      	ldr	r2, [r4, #0]
 800a46c:	07d2      	lsls	r2, r2, #31
 800a46e:	d501      	bpl.n	800a474 <_printf_float+0x154>
 800a470:	3301      	adds	r3, #1
 800a472:	6123      	str	r3, [r4, #16]
 800a474:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d0a2      	beq.n	800a3c2 <_printf_float+0xa2>
 800a47c:	232d      	movs	r3, #45	@ 0x2d
 800a47e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a482:	e79e      	b.n	800a3c2 <_printf_float+0xa2>
 800a484:	9a06      	ldr	r2, [sp, #24]
 800a486:	2a47      	cmp	r2, #71	@ 0x47
 800a488:	d1c2      	bne.n	800a410 <_printf_float+0xf0>
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1c0      	bne.n	800a410 <_printf_float+0xf0>
 800a48e:	2301      	movs	r3, #1
 800a490:	e7bd      	b.n	800a40e <_printf_float+0xee>
 800a492:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a496:	d9db      	bls.n	800a450 <_printf_float+0x130>
 800a498:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a49c:	d118      	bne.n	800a4d0 <_printf_float+0x1b0>
 800a49e:	2900      	cmp	r1, #0
 800a4a0:	6863      	ldr	r3, [r4, #4]
 800a4a2:	dd0b      	ble.n	800a4bc <_printf_float+0x19c>
 800a4a4:	6121      	str	r1, [r4, #16]
 800a4a6:	b913      	cbnz	r3, 800a4ae <_printf_float+0x18e>
 800a4a8:	6822      	ldr	r2, [r4, #0]
 800a4aa:	07d0      	lsls	r0, r2, #31
 800a4ac:	d502      	bpl.n	800a4b4 <_printf_float+0x194>
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	440b      	add	r3, r1
 800a4b2:	6123      	str	r3, [r4, #16]
 800a4b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a4b6:	f04f 0900 	mov.w	r9, #0
 800a4ba:	e7db      	b.n	800a474 <_printf_float+0x154>
 800a4bc:	b913      	cbnz	r3, 800a4c4 <_printf_float+0x1a4>
 800a4be:	6822      	ldr	r2, [r4, #0]
 800a4c0:	07d2      	lsls	r2, r2, #31
 800a4c2:	d501      	bpl.n	800a4c8 <_printf_float+0x1a8>
 800a4c4:	3302      	adds	r3, #2
 800a4c6:	e7f4      	b.n	800a4b2 <_printf_float+0x192>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e7f2      	b.n	800a4b2 <_printf_float+0x192>
 800a4cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d2:	4299      	cmp	r1, r3
 800a4d4:	db05      	blt.n	800a4e2 <_printf_float+0x1c2>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	6121      	str	r1, [r4, #16]
 800a4da:	07d8      	lsls	r0, r3, #31
 800a4dc:	d5ea      	bpl.n	800a4b4 <_printf_float+0x194>
 800a4de:	1c4b      	adds	r3, r1, #1
 800a4e0:	e7e7      	b.n	800a4b2 <_printf_float+0x192>
 800a4e2:	2900      	cmp	r1, #0
 800a4e4:	bfd4      	ite	le
 800a4e6:	f1c1 0202 	rsble	r2, r1, #2
 800a4ea:	2201      	movgt	r2, #1
 800a4ec:	4413      	add	r3, r2
 800a4ee:	e7e0      	b.n	800a4b2 <_printf_float+0x192>
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	055a      	lsls	r2, r3, #21
 800a4f4:	d407      	bmi.n	800a506 <_printf_float+0x1e6>
 800a4f6:	6923      	ldr	r3, [r4, #16]
 800a4f8:	4642      	mov	r2, r8
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b8      	blx	r7
 800a500:	3001      	adds	r0, #1
 800a502:	d12b      	bne.n	800a55c <_printf_float+0x23c>
 800a504:	e767      	b.n	800a3d6 <_printf_float+0xb6>
 800a506:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a50a:	f240 80dd 	bls.w	800a6c8 <_printf_float+0x3a8>
 800a50e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a512:	2200      	movs	r2, #0
 800a514:	2300      	movs	r3, #0
 800a516:	f7f6 fadf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d033      	beq.n	800a586 <_printf_float+0x266>
 800a51e:	4a37      	ldr	r2, [pc, #220]	@ (800a5fc <_printf_float+0x2dc>)
 800a520:	2301      	movs	r3, #1
 800a522:	4631      	mov	r1, r6
 800a524:	4628      	mov	r0, r5
 800a526:	47b8      	blx	r7
 800a528:	3001      	adds	r0, #1
 800a52a:	f43f af54 	beq.w	800a3d6 <_printf_float+0xb6>
 800a52e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a532:	4543      	cmp	r3, r8
 800a534:	db02      	blt.n	800a53c <_printf_float+0x21c>
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	07d8      	lsls	r0, r3, #31
 800a53a:	d50f      	bpl.n	800a55c <_printf_float+0x23c>
 800a53c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a540:	4631      	mov	r1, r6
 800a542:	4628      	mov	r0, r5
 800a544:	47b8      	blx	r7
 800a546:	3001      	adds	r0, #1
 800a548:	f43f af45 	beq.w	800a3d6 <_printf_float+0xb6>
 800a54c:	f04f 0900 	mov.w	r9, #0
 800a550:	f108 38ff 	add.w	r8, r8, #4294967295
 800a554:	f104 0a1a 	add.w	sl, r4, #26
 800a558:	45c8      	cmp	r8, r9
 800a55a:	dc09      	bgt.n	800a570 <_printf_float+0x250>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	079b      	lsls	r3, r3, #30
 800a560:	f100 8103 	bmi.w	800a76a <_printf_float+0x44a>
 800a564:	68e0      	ldr	r0, [r4, #12]
 800a566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a568:	4298      	cmp	r0, r3
 800a56a:	bfb8      	it	lt
 800a56c:	4618      	movlt	r0, r3
 800a56e:	e734      	b.n	800a3da <_printf_float+0xba>
 800a570:	2301      	movs	r3, #1
 800a572:	4652      	mov	r2, sl
 800a574:	4631      	mov	r1, r6
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	f43f af2b 	beq.w	800a3d6 <_printf_float+0xb6>
 800a580:	f109 0901 	add.w	r9, r9, #1
 800a584:	e7e8      	b.n	800a558 <_printf_float+0x238>
 800a586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	dc39      	bgt.n	800a600 <_printf_float+0x2e0>
 800a58c:	4a1b      	ldr	r2, [pc, #108]	@ (800a5fc <_printf_float+0x2dc>)
 800a58e:	2301      	movs	r3, #1
 800a590:	4631      	mov	r1, r6
 800a592:	4628      	mov	r0, r5
 800a594:	47b8      	blx	r7
 800a596:	3001      	adds	r0, #1
 800a598:	f43f af1d 	beq.w	800a3d6 <_printf_float+0xb6>
 800a59c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a5a0:	ea59 0303 	orrs.w	r3, r9, r3
 800a5a4:	d102      	bne.n	800a5ac <_printf_float+0x28c>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	07d9      	lsls	r1, r3, #31
 800a5aa:	d5d7      	bpl.n	800a55c <_printf_float+0x23c>
 800a5ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	47b8      	blx	r7
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	f43f af0d 	beq.w	800a3d6 <_printf_float+0xb6>
 800a5bc:	f04f 0a00 	mov.w	sl, #0
 800a5c0:	f104 0b1a 	add.w	fp, r4, #26
 800a5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c6:	425b      	negs	r3, r3
 800a5c8:	4553      	cmp	r3, sl
 800a5ca:	dc01      	bgt.n	800a5d0 <_printf_float+0x2b0>
 800a5cc:	464b      	mov	r3, r9
 800a5ce:	e793      	b.n	800a4f8 <_printf_float+0x1d8>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	465a      	mov	r2, fp
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	47b8      	blx	r7
 800a5da:	3001      	adds	r0, #1
 800a5dc:	f43f aefb 	beq.w	800a3d6 <_printf_float+0xb6>
 800a5e0:	f10a 0a01 	add.w	sl, sl, #1
 800a5e4:	e7ee      	b.n	800a5c4 <_printf_float+0x2a4>
 800a5e6:	bf00      	nop
 800a5e8:	7fefffff 	.word	0x7fefffff
 800a5ec:	0800eff4 	.word	0x0800eff4
 800a5f0:	0800eff0 	.word	0x0800eff0
 800a5f4:	0800effc 	.word	0x0800effc
 800a5f8:	0800eff8 	.word	0x0800eff8
 800a5fc:	0800f000 	.word	0x0800f000
 800a600:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a602:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a606:	4553      	cmp	r3, sl
 800a608:	bfa8      	it	ge
 800a60a:	4653      	movge	r3, sl
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	4699      	mov	r9, r3
 800a610:	dc36      	bgt.n	800a680 <_printf_float+0x360>
 800a612:	f04f 0b00 	mov.w	fp, #0
 800a616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a61a:	f104 021a 	add.w	r2, r4, #26
 800a61e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a620:	9306      	str	r3, [sp, #24]
 800a622:	eba3 0309 	sub.w	r3, r3, r9
 800a626:	455b      	cmp	r3, fp
 800a628:	dc31      	bgt.n	800a68e <_printf_float+0x36e>
 800a62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a62c:	459a      	cmp	sl, r3
 800a62e:	dc3a      	bgt.n	800a6a6 <_printf_float+0x386>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	07da      	lsls	r2, r3, #31
 800a634:	d437      	bmi.n	800a6a6 <_printf_float+0x386>
 800a636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a638:	ebaa 0903 	sub.w	r9, sl, r3
 800a63c:	9b06      	ldr	r3, [sp, #24]
 800a63e:	ebaa 0303 	sub.w	r3, sl, r3
 800a642:	4599      	cmp	r9, r3
 800a644:	bfa8      	it	ge
 800a646:	4699      	movge	r9, r3
 800a648:	f1b9 0f00 	cmp.w	r9, #0
 800a64c:	dc33      	bgt.n	800a6b6 <_printf_float+0x396>
 800a64e:	f04f 0800 	mov.w	r8, #0
 800a652:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a656:	f104 0b1a 	add.w	fp, r4, #26
 800a65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a65c:	ebaa 0303 	sub.w	r3, sl, r3
 800a660:	eba3 0309 	sub.w	r3, r3, r9
 800a664:	4543      	cmp	r3, r8
 800a666:	f77f af79 	ble.w	800a55c <_printf_float+0x23c>
 800a66a:	2301      	movs	r3, #1
 800a66c:	465a      	mov	r2, fp
 800a66e:	4631      	mov	r1, r6
 800a670:	4628      	mov	r0, r5
 800a672:	47b8      	blx	r7
 800a674:	3001      	adds	r0, #1
 800a676:	f43f aeae 	beq.w	800a3d6 <_printf_float+0xb6>
 800a67a:	f108 0801 	add.w	r8, r8, #1
 800a67e:	e7ec      	b.n	800a65a <_printf_float+0x33a>
 800a680:	4642      	mov	r2, r8
 800a682:	4631      	mov	r1, r6
 800a684:	4628      	mov	r0, r5
 800a686:	47b8      	blx	r7
 800a688:	3001      	adds	r0, #1
 800a68a:	d1c2      	bne.n	800a612 <_printf_float+0x2f2>
 800a68c:	e6a3      	b.n	800a3d6 <_printf_float+0xb6>
 800a68e:	2301      	movs	r3, #1
 800a690:	4631      	mov	r1, r6
 800a692:	4628      	mov	r0, r5
 800a694:	9206      	str	r2, [sp, #24]
 800a696:	47b8      	blx	r7
 800a698:	3001      	adds	r0, #1
 800a69a:	f43f ae9c 	beq.w	800a3d6 <_printf_float+0xb6>
 800a69e:	9a06      	ldr	r2, [sp, #24]
 800a6a0:	f10b 0b01 	add.w	fp, fp, #1
 800a6a4:	e7bb      	b.n	800a61e <_printf_float+0x2fe>
 800a6a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	47b8      	blx	r7
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d1c0      	bne.n	800a636 <_printf_float+0x316>
 800a6b4:	e68f      	b.n	800a3d6 <_printf_float+0xb6>
 800a6b6:	9a06      	ldr	r2, [sp, #24]
 800a6b8:	464b      	mov	r3, r9
 800a6ba:	4442      	add	r2, r8
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4628      	mov	r0, r5
 800a6c0:	47b8      	blx	r7
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	d1c3      	bne.n	800a64e <_printf_float+0x32e>
 800a6c6:	e686      	b.n	800a3d6 <_printf_float+0xb6>
 800a6c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a6cc:	f1ba 0f01 	cmp.w	sl, #1
 800a6d0:	dc01      	bgt.n	800a6d6 <_printf_float+0x3b6>
 800a6d2:	07db      	lsls	r3, r3, #31
 800a6d4:	d536      	bpl.n	800a744 <_printf_float+0x424>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4642      	mov	r2, r8
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4628      	mov	r0, r5
 800a6de:	47b8      	blx	r7
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f43f ae78 	beq.w	800a3d6 <_printf_float+0xb6>
 800a6e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	47b8      	blx	r7
 800a6f0:	3001      	adds	r0, #1
 800a6f2:	f43f ae70 	beq.w	800a3d6 <_printf_float+0xb6>
 800a6f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a702:	f7f6 f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a706:	b9c0      	cbnz	r0, 800a73a <_printf_float+0x41a>
 800a708:	4653      	mov	r3, sl
 800a70a:	f108 0201 	add.w	r2, r8, #1
 800a70e:	4631      	mov	r1, r6
 800a710:	4628      	mov	r0, r5
 800a712:	47b8      	blx	r7
 800a714:	3001      	adds	r0, #1
 800a716:	d10c      	bne.n	800a732 <_printf_float+0x412>
 800a718:	e65d      	b.n	800a3d6 <_printf_float+0xb6>
 800a71a:	2301      	movs	r3, #1
 800a71c:	465a      	mov	r2, fp
 800a71e:	4631      	mov	r1, r6
 800a720:	4628      	mov	r0, r5
 800a722:	47b8      	blx	r7
 800a724:	3001      	adds	r0, #1
 800a726:	f43f ae56 	beq.w	800a3d6 <_printf_float+0xb6>
 800a72a:	f108 0801 	add.w	r8, r8, #1
 800a72e:	45d0      	cmp	r8, sl
 800a730:	dbf3      	blt.n	800a71a <_printf_float+0x3fa>
 800a732:	464b      	mov	r3, r9
 800a734:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a738:	e6df      	b.n	800a4fa <_printf_float+0x1da>
 800a73a:	f04f 0800 	mov.w	r8, #0
 800a73e:	f104 0b1a 	add.w	fp, r4, #26
 800a742:	e7f4      	b.n	800a72e <_printf_float+0x40e>
 800a744:	2301      	movs	r3, #1
 800a746:	4642      	mov	r2, r8
 800a748:	e7e1      	b.n	800a70e <_printf_float+0x3ee>
 800a74a:	2301      	movs	r3, #1
 800a74c:	464a      	mov	r2, r9
 800a74e:	4631      	mov	r1, r6
 800a750:	4628      	mov	r0, r5
 800a752:	47b8      	blx	r7
 800a754:	3001      	adds	r0, #1
 800a756:	f43f ae3e 	beq.w	800a3d6 <_printf_float+0xb6>
 800a75a:	f108 0801 	add.w	r8, r8, #1
 800a75e:	68e3      	ldr	r3, [r4, #12]
 800a760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a762:	1a5b      	subs	r3, r3, r1
 800a764:	4543      	cmp	r3, r8
 800a766:	dcf0      	bgt.n	800a74a <_printf_float+0x42a>
 800a768:	e6fc      	b.n	800a564 <_printf_float+0x244>
 800a76a:	f04f 0800 	mov.w	r8, #0
 800a76e:	f104 0919 	add.w	r9, r4, #25
 800a772:	e7f4      	b.n	800a75e <_printf_float+0x43e>

0800a774 <_printf_common>:
 800a774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a778:	4616      	mov	r6, r2
 800a77a:	4698      	mov	r8, r3
 800a77c:	688a      	ldr	r2, [r1, #8]
 800a77e:	690b      	ldr	r3, [r1, #16]
 800a780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a784:	4293      	cmp	r3, r2
 800a786:	bfb8      	it	lt
 800a788:	4613      	movlt	r3, r2
 800a78a:	6033      	str	r3, [r6, #0]
 800a78c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a790:	4607      	mov	r7, r0
 800a792:	460c      	mov	r4, r1
 800a794:	b10a      	cbz	r2, 800a79a <_printf_common+0x26>
 800a796:	3301      	adds	r3, #1
 800a798:	6033      	str	r3, [r6, #0]
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	0699      	lsls	r1, r3, #26
 800a79e:	bf42      	ittt	mi
 800a7a0:	6833      	ldrmi	r3, [r6, #0]
 800a7a2:	3302      	addmi	r3, #2
 800a7a4:	6033      	strmi	r3, [r6, #0]
 800a7a6:	6825      	ldr	r5, [r4, #0]
 800a7a8:	f015 0506 	ands.w	r5, r5, #6
 800a7ac:	d106      	bne.n	800a7bc <_printf_common+0x48>
 800a7ae:	f104 0a19 	add.w	sl, r4, #25
 800a7b2:	68e3      	ldr	r3, [r4, #12]
 800a7b4:	6832      	ldr	r2, [r6, #0]
 800a7b6:	1a9b      	subs	r3, r3, r2
 800a7b8:	42ab      	cmp	r3, r5
 800a7ba:	dc26      	bgt.n	800a80a <_printf_common+0x96>
 800a7bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a7c0:	6822      	ldr	r2, [r4, #0]
 800a7c2:	3b00      	subs	r3, #0
 800a7c4:	bf18      	it	ne
 800a7c6:	2301      	movne	r3, #1
 800a7c8:	0692      	lsls	r2, r2, #26
 800a7ca:	d42b      	bmi.n	800a824 <_printf_common+0xb0>
 800a7cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a7d0:	4641      	mov	r1, r8
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	47c8      	blx	r9
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	d01e      	beq.n	800a818 <_printf_common+0xa4>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	6922      	ldr	r2, [r4, #16]
 800a7de:	f003 0306 	and.w	r3, r3, #6
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	bf02      	ittt	eq
 800a7e6:	68e5      	ldreq	r5, [r4, #12]
 800a7e8:	6833      	ldreq	r3, [r6, #0]
 800a7ea:	1aed      	subeq	r5, r5, r3
 800a7ec:	68a3      	ldr	r3, [r4, #8]
 800a7ee:	bf0c      	ite	eq
 800a7f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7f4:	2500      	movne	r5, #0
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	bfc4      	itt	gt
 800a7fa:	1a9b      	subgt	r3, r3, r2
 800a7fc:	18ed      	addgt	r5, r5, r3
 800a7fe:	2600      	movs	r6, #0
 800a800:	341a      	adds	r4, #26
 800a802:	42b5      	cmp	r5, r6
 800a804:	d11a      	bne.n	800a83c <_printf_common+0xc8>
 800a806:	2000      	movs	r0, #0
 800a808:	e008      	b.n	800a81c <_printf_common+0xa8>
 800a80a:	2301      	movs	r3, #1
 800a80c:	4652      	mov	r2, sl
 800a80e:	4641      	mov	r1, r8
 800a810:	4638      	mov	r0, r7
 800a812:	47c8      	blx	r9
 800a814:	3001      	adds	r0, #1
 800a816:	d103      	bne.n	800a820 <_printf_common+0xac>
 800a818:	f04f 30ff 	mov.w	r0, #4294967295
 800a81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a820:	3501      	adds	r5, #1
 800a822:	e7c6      	b.n	800a7b2 <_printf_common+0x3e>
 800a824:	18e1      	adds	r1, r4, r3
 800a826:	1c5a      	adds	r2, r3, #1
 800a828:	2030      	movs	r0, #48	@ 0x30
 800a82a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a82e:	4422      	add	r2, r4
 800a830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a838:	3302      	adds	r3, #2
 800a83a:	e7c7      	b.n	800a7cc <_printf_common+0x58>
 800a83c:	2301      	movs	r3, #1
 800a83e:	4622      	mov	r2, r4
 800a840:	4641      	mov	r1, r8
 800a842:	4638      	mov	r0, r7
 800a844:	47c8      	blx	r9
 800a846:	3001      	adds	r0, #1
 800a848:	d0e6      	beq.n	800a818 <_printf_common+0xa4>
 800a84a:	3601      	adds	r6, #1
 800a84c:	e7d9      	b.n	800a802 <_printf_common+0x8e>
	...

0800a850 <_printf_i>:
 800a850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a854:	7e0f      	ldrb	r7, [r1, #24]
 800a856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a858:	2f78      	cmp	r7, #120	@ 0x78
 800a85a:	4691      	mov	r9, r2
 800a85c:	4680      	mov	r8, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	469a      	mov	sl, r3
 800a862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a866:	d807      	bhi.n	800a878 <_printf_i+0x28>
 800a868:	2f62      	cmp	r7, #98	@ 0x62
 800a86a:	d80a      	bhi.n	800a882 <_printf_i+0x32>
 800a86c:	2f00      	cmp	r7, #0
 800a86e:	f000 80d1 	beq.w	800aa14 <_printf_i+0x1c4>
 800a872:	2f58      	cmp	r7, #88	@ 0x58
 800a874:	f000 80b8 	beq.w	800a9e8 <_printf_i+0x198>
 800a878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a87c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a880:	e03a      	b.n	800a8f8 <_printf_i+0xa8>
 800a882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a886:	2b15      	cmp	r3, #21
 800a888:	d8f6      	bhi.n	800a878 <_printf_i+0x28>
 800a88a:	a101      	add	r1, pc, #4	@ (adr r1, 800a890 <_printf_i+0x40>)
 800a88c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a890:	0800a8e9 	.word	0x0800a8e9
 800a894:	0800a8fd 	.word	0x0800a8fd
 800a898:	0800a879 	.word	0x0800a879
 800a89c:	0800a879 	.word	0x0800a879
 800a8a0:	0800a879 	.word	0x0800a879
 800a8a4:	0800a879 	.word	0x0800a879
 800a8a8:	0800a8fd 	.word	0x0800a8fd
 800a8ac:	0800a879 	.word	0x0800a879
 800a8b0:	0800a879 	.word	0x0800a879
 800a8b4:	0800a879 	.word	0x0800a879
 800a8b8:	0800a879 	.word	0x0800a879
 800a8bc:	0800a9fb 	.word	0x0800a9fb
 800a8c0:	0800a927 	.word	0x0800a927
 800a8c4:	0800a9b5 	.word	0x0800a9b5
 800a8c8:	0800a879 	.word	0x0800a879
 800a8cc:	0800a879 	.word	0x0800a879
 800a8d0:	0800aa1d 	.word	0x0800aa1d
 800a8d4:	0800a879 	.word	0x0800a879
 800a8d8:	0800a927 	.word	0x0800a927
 800a8dc:	0800a879 	.word	0x0800a879
 800a8e0:	0800a879 	.word	0x0800a879
 800a8e4:	0800a9bd 	.word	0x0800a9bd
 800a8e8:	6833      	ldr	r3, [r6, #0]
 800a8ea:	1d1a      	adds	r2, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	6032      	str	r2, [r6, #0]
 800a8f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e09c      	b.n	800aa36 <_printf_i+0x1e6>
 800a8fc:	6833      	ldr	r3, [r6, #0]
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	1d19      	adds	r1, r3, #4
 800a902:	6031      	str	r1, [r6, #0]
 800a904:	0606      	lsls	r6, r0, #24
 800a906:	d501      	bpl.n	800a90c <_printf_i+0xbc>
 800a908:	681d      	ldr	r5, [r3, #0]
 800a90a:	e003      	b.n	800a914 <_printf_i+0xc4>
 800a90c:	0645      	lsls	r5, r0, #25
 800a90e:	d5fb      	bpl.n	800a908 <_printf_i+0xb8>
 800a910:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a914:	2d00      	cmp	r5, #0
 800a916:	da03      	bge.n	800a920 <_printf_i+0xd0>
 800a918:	232d      	movs	r3, #45	@ 0x2d
 800a91a:	426d      	negs	r5, r5
 800a91c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a920:	4858      	ldr	r0, [pc, #352]	@ (800aa84 <_printf_i+0x234>)
 800a922:	230a      	movs	r3, #10
 800a924:	e011      	b.n	800a94a <_printf_i+0xfa>
 800a926:	6821      	ldr	r1, [r4, #0]
 800a928:	6833      	ldr	r3, [r6, #0]
 800a92a:	0608      	lsls	r0, r1, #24
 800a92c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a930:	d402      	bmi.n	800a938 <_printf_i+0xe8>
 800a932:	0649      	lsls	r1, r1, #25
 800a934:	bf48      	it	mi
 800a936:	b2ad      	uxthmi	r5, r5
 800a938:	2f6f      	cmp	r7, #111	@ 0x6f
 800a93a:	4852      	ldr	r0, [pc, #328]	@ (800aa84 <_printf_i+0x234>)
 800a93c:	6033      	str	r3, [r6, #0]
 800a93e:	bf14      	ite	ne
 800a940:	230a      	movne	r3, #10
 800a942:	2308      	moveq	r3, #8
 800a944:	2100      	movs	r1, #0
 800a946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a94a:	6866      	ldr	r6, [r4, #4]
 800a94c:	60a6      	str	r6, [r4, #8]
 800a94e:	2e00      	cmp	r6, #0
 800a950:	db05      	blt.n	800a95e <_printf_i+0x10e>
 800a952:	6821      	ldr	r1, [r4, #0]
 800a954:	432e      	orrs	r6, r5
 800a956:	f021 0104 	bic.w	r1, r1, #4
 800a95a:	6021      	str	r1, [r4, #0]
 800a95c:	d04b      	beq.n	800a9f6 <_printf_i+0x1a6>
 800a95e:	4616      	mov	r6, r2
 800a960:	fbb5 f1f3 	udiv	r1, r5, r3
 800a964:	fb03 5711 	mls	r7, r3, r1, r5
 800a968:	5dc7      	ldrb	r7, [r0, r7]
 800a96a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a96e:	462f      	mov	r7, r5
 800a970:	42bb      	cmp	r3, r7
 800a972:	460d      	mov	r5, r1
 800a974:	d9f4      	bls.n	800a960 <_printf_i+0x110>
 800a976:	2b08      	cmp	r3, #8
 800a978:	d10b      	bne.n	800a992 <_printf_i+0x142>
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	07df      	lsls	r7, r3, #31
 800a97e:	d508      	bpl.n	800a992 <_printf_i+0x142>
 800a980:	6923      	ldr	r3, [r4, #16]
 800a982:	6861      	ldr	r1, [r4, #4]
 800a984:	4299      	cmp	r1, r3
 800a986:	bfde      	ittt	le
 800a988:	2330      	movle	r3, #48	@ 0x30
 800a98a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a98e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a992:	1b92      	subs	r2, r2, r6
 800a994:	6122      	str	r2, [r4, #16]
 800a996:	f8cd a000 	str.w	sl, [sp]
 800a99a:	464b      	mov	r3, r9
 800a99c:	aa03      	add	r2, sp, #12
 800a99e:	4621      	mov	r1, r4
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	f7ff fee7 	bl	800a774 <_printf_common>
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	d14a      	bne.n	800aa40 <_printf_i+0x1f0>
 800a9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ae:	b004      	add	sp, #16
 800a9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	f043 0320 	orr.w	r3, r3, #32
 800a9ba:	6023      	str	r3, [r4, #0]
 800a9bc:	4832      	ldr	r0, [pc, #200]	@ (800aa88 <_printf_i+0x238>)
 800a9be:	2778      	movs	r7, #120	@ 0x78
 800a9c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	6831      	ldr	r1, [r6, #0]
 800a9c8:	061f      	lsls	r7, r3, #24
 800a9ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800a9ce:	d402      	bmi.n	800a9d6 <_printf_i+0x186>
 800a9d0:	065f      	lsls	r7, r3, #25
 800a9d2:	bf48      	it	mi
 800a9d4:	b2ad      	uxthmi	r5, r5
 800a9d6:	6031      	str	r1, [r6, #0]
 800a9d8:	07d9      	lsls	r1, r3, #31
 800a9da:	bf44      	itt	mi
 800a9dc:	f043 0320 	orrmi.w	r3, r3, #32
 800a9e0:	6023      	strmi	r3, [r4, #0]
 800a9e2:	b11d      	cbz	r5, 800a9ec <_printf_i+0x19c>
 800a9e4:	2310      	movs	r3, #16
 800a9e6:	e7ad      	b.n	800a944 <_printf_i+0xf4>
 800a9e8:	4826      	ldr	r0, [pc, #152]	@ (800aa84 <_printf_i+0x234>)
 800a9ea:	e7e9      	b.n	800a9c0 <_printf_i+0x170>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	f023 0320 	bic.w	r3, r3, #32
 800a9f2:	6023      	str	r3, [r4, #0]
 800a9f4:	e7f6      	b.n	800a9e4 <_printf_i+0x194>
 800a9f6:	4616      	mov	r6, r2
 800a9f8:	e7bd      	b.n	800a976 <_printf_i+0x126>
 800a9fa:	6833      	ldr	r3, [r6, #0]
 800a9fc:	6825      	ldr	r5, [r4, #0]
 800a9fe:	6961      	ldr	r1, [r4, #20]
 800aa00:	1d18      	adds	r0, r3, #4
 800aa02:	6030      	str	r0, [r6, #0]
 800aa04:	062e      	lsls	r6, r5, #24
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	d501      	bpl.n	800aa0e <_printf_i+0x1be>
 800aa0a:	6019      	str	r1, [r3, #0]
 800aa0c:	e002      	b.n	800aa14 <_printf_i+0x1c4>
 800aa0e:	0668      	lsls	r0, r5, #25
 800aa10:	d5fb      	bpl.n	800aa0a <_printf_i+0x1ba>
 800aa12:	8019      	strh	r1, [r3, #0]
 800aa14:	2300      	movs	r3, #0
 800aa16:	6123      	str	r3, [r4, #16]
 800aa18:	4616      	mov	r6, r2
 800aa1a:	e7bc      	b.n	800a996 <_printf_i+0x146>
 800aa1c:	6833      	ldr	r3, [r6, #0]
 800aa1e:	1d1a      	adds	r2, r3, #4
 800aa20:	6032      	str	r2, [r6, #0]
 800aa22:	681e      	ldr	r6, [r3, #0]
 800aa24:	6862      	ldr	r2, [r4, #4]
 800aa26:	2100      	movs	r1, #0
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f7f5 fbd9 	bl	80001e0 <memchr>
 800aa2e:	b108      	cbz	r0, 800aa34 <_printf_i+0x1e4>
 800aa30:	1b80      	subs	r0, r0, r6
 800aa32:	6060      	str	r0, [r4, #4]
 800aa34:	6863      	ldr	r3, [r4, #4]
 800aa36:	6123      	str	r3, [r4, #16]
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa3e:	e7aa      	b.n	800a996 <_printf_i+0x146>
 800aa40:	6923      	ldr	r3, [r4, #16]
 800aa42:	4632      	mov	r2, r6
 800aa44:	4649      	mov	r1, r9
 800aa46:	4640      	mov	r0, r8
 800aa48:	47d0      	blx	sl
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	d0ad      	beq.n	800a9aa <_printf_i+0x15a>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	079b      	lsls	r3, r3, #30
 800aa52:	d413      	bmi.n	800aa7c <_printf_i+0x22c>
 800aa54:	68e0      	ldr	r0, [r4, #12]
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	4298      	cmp	r0, r3
 800aa5a:	bfb8      	it	lt
 800aa5c:	4618      	movlt	r0, r3
 800aa5e:	e7a6      	b.n	800a9ae <_printf_i+0x15e>
 800aa60:	2301      	movs	r3, #1
 800aa62:	4632      	mov	r2, r6
 800aa64:	4649      	mov	r1, r9
 800aa66:	4640      	mov	r0, r8
 800aa68:	47d0      	blx	sl
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	d09d      	beq.n	800a9aa <_printf_i+0x15a>
 800aa6e:	3501      	adds	r5, #1
 800aa70:	68e3      	ldr	r3, [r4, #12]
 800aa72:	9903      	ldr	r1, [sp, #12]
 800aa74:	1a5b      	subs	r3, r3, r1
 800aa76:	42ab      	cmp	r3, r5
 800aa78:	dcf2      	bgt.n	800aa60 <_printf_i+0x210>
 800aa7a:	e7eb      	b.n	800aa54 <_printf_i+0x204>
 800aa7c:	2500      	movs	r5, #0
 800aa7e:	f104 0619 	add.w	r6, r4, #25
 800aa82:	e7f5      	b.n	800aa70 <_printf_i+0x220>
 800aa84:	0800f002 	.word	0x0800f002
 800aa88:	0800f013 	.word	0x0800f013

0800aa8c <_scanf_float>:
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	b087      	sub	sp, #28
 800aa92:	4691      	mov	r9, r2
 800aa94:	9303      	str	r3, [sp, #12]
 800aa96:	688b      	ldr	r3, [r1, #8]
 800aa98:	1e5a      	subs	r2, r3, #1
 800aa9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aa9e:	bf81      	itttt	hi
 800aaa0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aaa4:	eb03 0b05 	addhi.w	fp, r3, r5
 800aaa8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aaac:	608b      	strhi	r3, [r1, #8]
 800aaae:	680b      	ldr	r3, [r1, #0]
 800aab0:	460a      	mov	r2, r1
 800aab2:	f04f 0500 	mov.w	r5, #0
 800aab6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aaba:	f842 3b1c 	str.w	r3, [r2], #28
 800aabe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aac2:	4680      	mov	r8, r0
 800aac4:	460c      	mov	r4, r1
 800aac6:	bf98      	it	ls
 800aac8:	f04f 0b00 	movls.w	fp, #0
 800aacc:	9201      	str	r2, [sp, #4]
 800aace:	4616      	mov	r6, r2
 800aad0:	46aa      	mov	sl, r5
 800aad2:	462f      	mov	r7, r5
 800aad4:	9502      	str	r5, [sp, #8]
 800aad6:	68a2      	ldr	r2, [r4, #8]
 800aad8:	b15a      	cbz	r2, 800aaf2 <_scanf_float+0x66>
 800aada:	f8d9 3000 	ldr.w	r3, [r9]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b4e      	cmp	r3, #78	@ 0x4e
 800aae2:	d863      	bhi.n	800abac <_scanf_float+0x120>
 800aae4:	2b40      	cmp	r3, #64	@ 0x40
 800aae6:	d83b      	bhi.n	800ab60 <_scanf_float+0xd4>
 800aae8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aaec:	b2c8      	uxtb	r0, r1
 800aaee:	280e      	cmp	r0, #14
 800aaf0:	d939      	bls.n	800ab66 <_scanf_float+0xda>
 800aaf2:	b11f      	cbz	r7, 800aafc <_scanf_float+0x70>
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aafa:	6023      	str	r3, [r4, #0]
 800aafc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab00:	f1ba 0f01 	cmp.w	sl, #1
 800ab04:	f200 8114 	bhi.w	800ad30 <_scanf_float+0x2a4>
 800ab08:	9b01      	ldr	r3, [sp, #4]
 800ab0a:	429e      	cmp	r6, r3
 800ab0c:	f200 8105 	bhi.w	800ad1a <_scanf_float+0x28e>
 800ab10:	2001      	movs	r0, #1
 800ab12:	b007      	add	sp, #28
 800ab14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab18:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ab1c:	2a0d      	cmp	r2, #13
 800ab1e:	d8e8      	bhi.n	800aaf2 <_scanf_float+0x66>
 800ab20:	a101      	add	r1, pc, #4	@ (adr r1, 800ab28 <_scanf_float+0x9c>)
 800ab22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab26:	bf00      	nop
 800ab28:	0800ac71 	.word	0x0800ac71
 800ab2c:	0800aaf3 	.word	0x0800aaf3
 800ab30:	0800aaf3 	.word	0x0800aaf3
 800ab34:	0800aaf3 	.word	0x0800aaf3
 800ab38:	0800accd 	.word	0x0800accd
 800ab3c:	0800aca7 	.word	0x0800aca7
 800ab40:	0800aaf3 	.word	0x0800aaf3
 800ab44:	0800aaf3 	.word	0x0800aaf3
 800ab48:	0800ac7f 	.word	0x0800ac7f
 800ab4c:	0800aaf3 	.word	0x0800aaf3
 800ab50:	0800aaf3 	.word	0x0800aaf3
 800ab54:	0800aaf3 	.word	0x0800aaf3
 800ab58:	0800aaf3 	.word	0x0800aaf3
 800ab5c:	0800ac3b 	.word	0x0800ac3b
 800ab60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ab64:	e7da      	b.n	800ab1c <_scanf_float+0x90>
 800ab66:	290e      	cmp	r1, #14
 800ab68:	d8c3      	bhi.n	800aaf2 <_scanf_float+0x66>
 800ab6a:	a001      	add	r0, pc, #4	@ (adr r0, 800ab70 <_scanf_float+0xe4>)
 800ab6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab70:	0800ac2b 	.word	0x0800ac2b
 800ab74:	0800aaf3 	.word	0x0800aaf3
 800ab78:	0800ac2b 	.word	0x0800ac2b
 800ab7c:	0800acbb 	.word	0x0800acbb
 800ab80:	0800aaf3 	.word	0x0800aaf3
 800ab84:	0800abcd 	.word	0x0800abcd
 800ab88:	0800ac11 	.word	0x0800ac11
 800ab8c:	0800ac11 	.word	0x0800ac11
 800ab90:	0800ac11 	.word	0x0800ac11
 800ab94:	0800ac11 	.word	0x0800ac11
 800ab98:	0800ac11 	.word	0x0800ac11
 800ab9c:	0800ac11 	.word	0x0800ac11
 800aba0:	0800ac11 	.word	0x0800ac11
 800aba4:	0800ac11 	.word	0x0800ac11
 800aba8:	0800ac11 	.word	0x0800ac11
 800abac:	2b6e      	cmp	r3, #110	@ 0x6e
 800abae:	d809      	bhi.n	800abc4 <_scanf_float+0x138>
 800abb0:	2b60      	cmp	r3, #96	@ 0x60
 800abb2:	d8b1      	bhi.n	800ab18 <_scanf_float+0x8c>
 800abb4:	2b54      	cmp	r3, #84	@ 0x54
 800abb6:	d07b      	beq.n	800acb0 <_scanf_float+0x224>
 800abb8:	2b59      	cmp	r3, #89	@ 0x59
 800abba:	d19a      	bne.n	800aaf2 <_scanf_float+0x66>
 800abbc:	2d07      	cmp	r5, #7
 800abbe:	d198      	bne.n	800aaf2 <_scanf_float+0x66>
 800abc0:	2508      	movs	r5, #8
 800abc2:	e02f      	b.n	800ac24 <_scanf_float+0x198>
 800abc4:	2b74      	cmp	r3, #116	@ 0x74
 800abc6:	d073      	beq.n	800acb0 <_scanf_float+0x224>
 800abc8:	2b79      	cmp	r3, #121	@ 0x79
 800abca:	e7f6      	b.n	800abba <_scanf_float+0x12e>
 800abcc:	6821      	ldr	r1, [r4, #0]
 800abce:	05c8      	lsls	r0, r1, #23
 800abd0:	d51e      	bpl.n	800ac10 <_scanf_float+0x184>
 800abd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800abd6:	6021      	str	r1, [r4, #0]
 800abd8:	3701      	adds	r7, #1
 800abda:	f1bb 0f00 	cmp.w	fp, #0
 800abde:	d003      	beq.n	800abe8 <_scanf_float+0x15c>
 800abe0:	3201      	adds	r2, #1
 800abe2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abe6:	60a2      	str	r2, [r4, #8]
 800abe8:	68a3      	ldr	r3, [r4, #8]
 800abea:	3b01      	subs	r3, #1
 800abec:	60a3      	str	r3, [r4, #8]
 800abee:	6923      	ldr	r3, [r4, #16]
 800abf0:	3301      	adds	r3, #1
 800abf2:	6123      	str	r3, [r4, #16]
 800abf4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f8c9 3004 	str.w	r3, [r9, #4]
 800ac00:	f340 8082 	ble.w	800ad08 <_scanf_float+0x27c>
 800ac04:	f8d9 3000 	ldr.w	r3, [r9]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	f8c9 3000 	str.w	r3, [r9]
 800ac0e:	e762      	b.n	800aad6 <_scanf_float+0x4a>
 800ac10:	eb1a 0105 	adds.w	r1, sl, r5
 800ac14:	f47f af6d 	bne.w	800aaf2 <_scanf_float+0x66>
 800ac18:	6822      	ldr	r2, [r4, #0]
 800ac1a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ac1e:	6022      	str	r2, [r4, #0]
 800ac20:	460d      	mov	r5, r1
 800ac22:	468a      	mov	sl, r1
 800ac24:	f806 3b01 	strb.w	r3, [r6], #1
 800ac28:	e7de      	b.n	800abe8 <_scanf_float+0x15c>
 800ac2a:	6822      	ldr	r2, [r4, #0]
 800ac2c:	0610      	lsls	r0, r2, #24
 800ac2e:	f57f af60 	bpl.w	800aaf2 <_scanf_float+0x66>
 800ac32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac36:	6022      	str	r2, [r4, #0]
 800ac38:	e7f4      	b.n	800ac24 <_scanf_float+0x198>
 800ac3a:	f1ba 0f00 	cmp.w	sl, #0
 800ac3e:	d10c      	bne.n	800ac5a <_scanf_float+0x1ce>
 800ac40:	b977      	cbnz	r7, 800ac60 <_scanf_float+0x1d4>
 800ac42:	6822      	ldr	r2, [r4, #0]
 800ac44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac4c:	d108      	bne.n	800ac60 <_scanf_float+0x1d4>
 800ac4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac52:	6022      	str	r2, [r4, #0]
 800ac54:	f04f 0a01 	mov.w	sl, #1
 800ac58:	e7e4      	b.n	800ac24 <_scanf_float+0x198>
 800ac5a:	f1ba 0f02 	cmp.w	sl, #2
 800ac5e:	d050      	beq.n	800ad02 <_scanf_float+0x276>
 800ac60:	2d01      	cmp	r5, #1
 800ac62:	d002      	beq.n	800ac6a <_scanf_float+0x1de>
 800ac64:	2d04      	cmp	r5, #4
 800ac66:	f47f af44 	bne.w	800aaf2 <_scanf_float+0x66>
 800ac6a:	3501      	adds	r5, #1
 800ac6c:	b2ed      	uxtb	r5, r5
 800ac6e:	e7d9      	b.n	800ac24 <_scanf_float+0x198>
 800ac70:	f1ba 0f01 	cmp.w	sl, #1
 800ac74:	f47f af3d 	bne.w	800aaf2 <_scanf_float+0x66>
 800ac78:	f04f 0a02 	mov.w	sl, #2
 800ac7c:	e7d2      	b.n	800ac24 <_scanf_float+0x198>
 800ac7e:	b975      	cbnz	r5, 800ac9e <_scanf_float+0x212>
 800ac80:	2f00      	cmp	r7, #0
 800ac82:	f47f af37 	bne.w	800aaf4 <_scanf_float+0x68>
 800ac86:	6822      	ldr	r2, [r4, #0]
 800ac88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac90:	f040 8103 	bne.w	800ae9a <_scanf_float+0x40e>
 800ac94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac98:	6022      	str	r2, [r4, #0]
 800ac9a:	2501      	movs	r5, #1
 800ac9c:	e7c2      	b.n	800ac24 <_scanf_float+0x198>
 800ac9e:	2d03      	cmp	r5, #3
 800aca0:	d0e3      	beq.n	800ac6a <_scanf_float+0x1de>
 800aca2:	2d05      	cmp	r5, #5
 800aca4:	e7df      	b.n	800ac66 <_scanf_float+0x1da>
 800aca6:	2d02      	cmp	r5, #2
 800aca8:	f47f af23 	bne.w	800aaf2 <_scanf_float+0x66>
 800acac:	2503      	movs	r5, #3
 800acae:	e7b9      	b.n	800ac24 <_scanf_float+0x198>
 800acb0:	2d06      	cmp	r5, #6
 800acb2:	f47f af1e 	bne.w	800aaf2 <_scanf_float+0x66>
 800acb6:	2507      	movs	r5, #7
 800acb8:	e7b4      	b.n	800ac24 <_scanf_float+0x198>
 800acba:	6822      	ldr	r2, [r4, #0]
 800acbc:	0591      	lsls	r1, r2, #22
 800acbe:	f57f af18 	bpl.w	800aaf2 <_scanf_float+0x66>
 800acc2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800acc6:	6022      	str	r2, [r4, #0]
 800acc8:	9702      	str	r7, [sp, #8]
 800acca:	e7ab      	b.n	800ac24 <_scanf_float+0x198>
 800accc:	6822      	ldr	r2, [r4, #0]
 800acce:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800acd2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800acd6:	d005      	beq.n	800ace4 <_scanf_float+0x258>
 800acd8:	0550      	lsls	r0, r2, #21
 800acda:	f57f af0a 	bpl.w	800aaf2 <_scanf_float+0x66>
 800acde:	2f00      	cmp	r7, #0
 800ace0:	f000 80db 	beq.w	800ae9a <_scanf_float+0x40e>
 800ace4:	0591      	lsls	r1, r2, #22
 800ace6:	bf58      	it	pl
 800ace8:	9902      	ldrpl	r1, [sp, #8]
 800acea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800acee:	bf58      	it	pl
 800acf0:	1a79      	subpl	r1, r7, r1
 800acf2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800acf6:	bf58      	it	pl
 800acf8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800acfc:	6022      	str	r2, [r4, #0]
 800acfe:	2700      	movs	r7, #0
 800ad00:	e790      	b.n	800ac24 <_scanf_float+0x198>
 800ad02:	f04f 0a03 	mov.w	sl, #3
 800ad06:	e78d      	b.n	800ac24 <_scanf_float+0x198>
 800ad08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4798      	blx	r3
 800ad12:	2800      	cmp	r0, #0
 800ad14:	f43f aedf 	beq.w	800aad6 <_scanf_float+0x4a>
 800ad18:	e6eb      	b.n	800aaf2 <_scanf_float+0x66>
 800ad1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad22:	464a      	mov	r2, r9
 800ad24:	4640      	mov	r0, r8
 800ad26:	4798      	blx	r3
 800ad28:	6923      	ldr	r3, [r4, #16]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	6123      	str	r3, [r4, #16]
 800ad2e:	e6eb      	b.n	800ab08 <_scanf_float+0x7c>
 800ad30:	1e6b      	subs	r3, r5, #1
 800ad32:	2b06      	cmp	r3, #6
 800ad34:	d824      	bhi.n	800ad80 <_scanf_float+0x2f4>
 800ad36:	2d02      	cmp	r5, #2
 800ad38:	d836      	bhi.n	800ada8 <_scanf_float+0x31c>
 800ad3a:	9b01      	ldr	r3, [sp, #4]
 800ad3c:	429e      	cmp	r6, r3
 800ad3e:	f67f aee7 	bls.w	800ab10 <_scanf_float+0x84>
 800ad42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad4a:	464a      	mov	r2, r9
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	4798      	blx	r3
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	3b01      	subs	r3, #1
 800ad54:	6123      	str	r3, [r4, #16]
 800ad56:	e7f0      	b.n	800ad3a <_scanf_float+0x2ae>
 800ad58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ad60:	464a      	mov	r2, r9
 800ad62:	4640      	mov	r0, r8
 800ad64:	4798      	blx	r3
 800ad66:	6923      	ldr	r3, [r4, #16]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	6123      	str	r3, [r4, #16]
 800ad6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad70:	fa5f fa8a 	uxtb.w	sl, sl
 800ad74:	f1ba 0f02 	cmp.w	sl, #2
 800ad78:	d1ee      	bne.n	800ad58 <_scanf_float+0x2cc>
 800ad7a:	3d03      	subs	r5, #3
 800ad7c:	b2ed      	uxtb	r5, r5
 800ad7e:	1b76      	subs	r6, r6, r5
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	05da      	lsls	r2, r3, #23
 800ad84:	d530      	bpl.n	800ade8 <_scanf_float+0x35c>
 800ad86:	055b      	lsls	r3, r3, #21
 800ad88:	d511      	bpl.n	800adae <_scanf_float+0x322>
 800ad8a:	9b01      	ldr	r3, [sp, #4]
 800ad8c:	429e      	cmp	r6, r3
 800ad8e:	f67f aebf 	bls.w	800ab10 <_scanf_float+0x84>
 800ad92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad9a:	464a      	mov	r2, r9
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	4798      	blx	r3
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	6123      	str	r3, [r4, #16]
 800ada6:	e7f0      	b.n	800ad8a <_scanf_float+0x2fe>
 800ada8:	46aa      	mov	sl, r5
 800adaa:	46b3      	mov	fp, r6
 800adac:	e7de      	b.n	800ad6c <_scanf_float+0x2e0>
 800adae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	2965      	cmp	r1, #101	@ 0x65
 800adb6:	f103 33ff 	add.w	r3, r3, #4294967295
 800adba:	f106 35ff 	add.w	r5, r6, #4294967295
 800adbe:	6123      	str	r3, [r4, #16]
 800adc0:	d00c      	beq.n	800addc <_scanf_float+0x350>
 800adc2:	2945      	cmp	r1, #69	@ 0x45
 800adc4:	d00a      	beq.n	800addc <_scanf_float+0x350>
 800adc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800adca:	464a      	mov	r2, r9
 800adcc:	4640      	mov	r0, r8
 800adce:	4798      	blx	r3
 800add0:	6923      	ldr	r3, [r4, #16]
 800add2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800add6:	3b01      	subs	r3, #1
 800add8:	1eb5      	subs	r5, r6, #2
 800adda:	6123      	str	r3, [r4, #16]
 800addc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ade0:	464a      	mov	r2, r9
 800ade2:	4640      	mov	r0, r8
 800ade4:	4798      	blx	r3
 800ade6:	462e      	mov	r6, r5
 800ade8:	6822      	ldr	r2, [r4, #0]
 800adea:	f012 0210 	ands.w	r2, r2, #16
 800adee:	d001      	beq.n	800adf4 <_scanf_float+0x368>
 800adf0:	2000      	movs	r0, #0
 800adf2:	e68e      	b.n	800ab12 <_scanf_float+0x86>
 800adf4:	7032      	strb	r2, [r6, #0]
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800adfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae00:	d125      	bne.n	800ae4e <_scanf_float+0x3c2>
 800ae02:	9b02      	ldr	r3, [sp, #8]
 800ae04:	429f      	cmp	r7, r3
 800ae06:	d00a      	beq.n	800ae1e <_scanf_float+0x392>
 800ae08:	1bda      	subs	r2, r3, r7
 800ae0a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ae0e:	429e      	cmp	r6, r3
 800ae10:	bf28      	it	cs
 800ae12:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ae16:	4922      	ldr	r1, [pc, #136]	@ (800aea0 <_scanf_float+0x414>)
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f000 f907 	bl	800b02c <siprintf>
 800ae1e:	9901      	ldr	r1, [sp, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	4640      	mov	r0, r8
 800ae24:	f002 fbf4 	bl	800d610 <_strtod_r>
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	6821      	ldr	r1, [r4, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f011 0f02 	tst.w	r1, #2
 800ae32:	ec57 6b10 	vmov	r6, r7, d0
 800ae36:	f103 0204 	add.w	r2, r3, #4
 800ae3a:	d015      	beq.n	800ae68 <_scanf_float+0x3dc>
 800ae3c:	9903      	ldr	r1, [sp, #12]
 800ae3e:	600a      	str	r2, [r1, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	e9c3 6700 	strd	r6, r7, [r3]
 800ae46:	68e3      	ldr	r3, [r4, #12]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	60e3      	str	r3, [r4, #12]
 800ae4c:	e7d0      	b.n	800adf0 <_scanf_float+0x364>
 800ae4e:	9b04      	ldr	r3, [sp, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d0e4      	beq.n	800ae1e <_scanf_float+0x392>
 800ae54:	9905      	ldr	r1, [sp, #20]
 800ae56:	230a      	movs	r3, #10
 800ae58:	3101      	adds	r1, #1
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	f002 fc58 	bl	800d710 <_strtol_r>
 800ae60:	9b04      	ldr	r3, [sp, #16]
 800ae62:	9e05      	ldr	r6, [sp, #20]
 800ae64:	1ac2      	subs	r2, r0, r3
 800ae66:	e7d0      	b.n	800ae0a <_scanf_float+0x37e>
 800ae68:	f011 0f04 	tst.w	r1, #4
 800ae6c:	9903      	ldr	r1, [sp, #12]
 800ae6e:	600a      	str	r2, [r1, #0]
 800ae70:	d1e6      	bne.n	800ae40 <_scanf_float+0x3b4>
 800ae72:	681d      	ldr	r5, [r3, #0]
 800ae74:	4632      	mov	r2, r6
 800ae76:	463b      	mov	r3, r7
 800ae78:	4630      	mov	r0, r6
 800ae7a:	4639      	mov	r1, r7
 800ae7c:	f7f5 fe5e 	bl	8000b3c <__aeabi_dcmpun>
 800ae80:	b128      	cbz	r0, 800ae8e <_scanf_float+0x402>
 800ae82:	4808      	ldr	r0, [pc, #32]	@ (800aea4 <_scanf_float+0x418>)
 800ae84:	f000 f9b8 	bl	800b1f8 <nanf>
 800ae88:	ed85 0a00 	vstr	s0, [r5]
 800ae8c:	e7db      	b.n	800ae46 <_scanf_float+0x3ba>
 800ae8e:	4630      	mov	r0, r6
 800ae90:	4639      	mov	r1, r7
 800ae92:	f7f5 feb1 	bl	8000bf8 <__aeabi_d2f>
 800ae96:	6028      	str	r0, [r5, #0]
 800ae98:	e7d5      	b.n	800ae46 <_scanf_float+0x3ba>
 800ae9a:	2700      	movs	r7, #0
 800ae9c:	e62e      	b.n	800aafc <_scanf_float+0x70>
 800ae9e:	bf00      	nop
 800aea0:	0800f024 	.word	0x0800f024
 800aea4:	0800f165 	.word	0x0800f165

0800aea8 <std>:
 800aea8:	2300      	movs	r3, #0
 800aeaa:	b510      	push	{r4, lr}
 800aeac:	4604      	mov	r4, r0
 800aeae:	e9c0 3300 	strd	r3, r3, [r0]
 800aeb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeb6:	6083      	str	r3, [r0, #8]
 800aeb8:	8181      	strh	r1, [r0, #12]
 800aeba:	6643      	str	r3, [r0, #100]	@ 0x64
 800aebc:	81c2      	strh	r2, [r0, #14]
 800aebe:	6183      	str	r3, [r0, #24]
 800aec0:	4619      	mov	r1, r3
 800aec2:	2208      	movs	r2, #8
 800aec4:	305c      	adds	r0, #92	@ 0x5c
 800aec6:	f000 f916 	bl	800b0f6 <memset>
 800aeca:	4b0d      	ldr	r3, [pc, #52]	@ (800af00 <std+0x58>)
 800aecc:	6263      	str	r3, [r4, #36]	@ 0x24
 800aece:	4b0d      	ldr	r3, [pc, #52]	@ (800af04 <std+0x5c>)
 800aed0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aed2:	4b0d      	ldr	r3, [pc, #52]	@ (800af08 <std+0x60>)
 800aed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aed6:	4b0d      	ldr	r3, [pc, #52]	@ (800af0c <std+0x64>)
 800aed8:	6323      	str	r3, [r4, #48]	@ 0x30
 800aeda:	4b0d      	ldr	r3, [pc, #52]	@ (800af10 <std+0x68>)
 800aedc:	6224      	str	r4, [r4, #32]
 800aede:	429c      	cmp	r4, r3
 800aee0:	d006      	beq.n	800aef0 <std+0x48>
 800aee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aee6:	4294      	cmp	r4, r2
 800aee8:	d002      	beq.n	800aef0 <std+0x48>
 800aeea:	33d0      	adds	r3, #208	@ 0xd0
 800aeec:	429c      	cmp	r4, r3
 800aeee:	d105      	bne.n	800aefc <std+0x54>
 800aef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef8:	f000 b97a 	b.w	800b1f0 <__retarget_lock_init_recursive>
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	bf00      	nop
 800af00:	0800b071 	.word	0x0800b071
 800af04:	0800b093 	.word	0x0800b093
 800af08:	0800b0cb 	.word	0x0800b0cb
 800af0c:	0800b0ef 	.word	0x0800b0ef
 800af10:	20002198 	.word	0x20002198

0800af14 <stdio_exit_handler>:
 800af14:	4a02      	ldr	r2, [pc, #8]	@ (800af20 <stdio_exit_handler+0xc>)
 800af16:	4903      	ldr	r1, [pc, #12]	@ (800af24 <stdio_exit_handler+0x10>)
 800af18:	4803      	ldr	r0, [pc, #12]	@ (800af28 <stdio_exit_handler+0x14>)
 800af1a:	f000 b869 	b.w	800aff0 <_fwalk_sglue>
 800af1e:	bf00      	nop
 800af20:	2000018c 	.word	0x2000018c
 800af24:	0800dacd 	.word	0x0800dacd
 800af28:	2000019c 	.word	0x2000019c

0800af2c <cleanup_stdio>:
 800af2c:	6841      	ldr	r1, [r0, #4]
 800af2e:	4b0c      	ldr	r3, [pc, #48]	@ (800af60 <cleanup_stdio+0x34>)
 800af30:	4299      	cmp	r1, r3
 800af32:	b510      	push	{r4, lr}
 800af34:	4604      	mov	r4, r0
 800af36:	d001      	beq.n	800af3c <cleanup_stdio+0x10>
 800af38:	f002 fdc8 	bl	800dacc <_fflush_r>
 800af3c:	68a1      	ldr	r1, [r4, #8]
 800af3e:	4b09      	ldr	r3, [pc, #36]	@ (800af64 <cleanup_stdio+0x38>)
 800af40:	4299      	cmp	r1, r3
 800af42:	d002      	beq.n	800af4a <cleanup_stdio+0x1e>
 800af44:	4620      	mov	r0, r4
 800af46:	f002 fdc1 	bl	800dacc <_fflush_r>
 800af4a:	68e1      	ldr	r1, [r4, #12]
 800af4c:	4b06      	ldr	r3, [pc, #24]	@ (800af68 <cleanup_stdio+0x3c>)
 800af4e:	4299      	cmp	r1, r3
 800af50:	d004      	beq.n	800af5c <cleanup_stdio+0x30>
 800af52:	4620      	mov	r0, r4
 800af54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af58:	f002 bdb8 	b.w	800dacc <_fflush_r>
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	bf00      	nop
 800af60:	20002198 	.word	0x20002198
 800af64:	20002200 	.word	0x20002200
 800af68:	20002268 	.word	0x20002268

0800af6c <global_stdio_init.part.0>:
 800af6c:	b510      	push	{r4, lr}
 800af6e:	4b0b      	ldr	r3, [pc, #44]	@ (800af9c <global_stdio_init.part.0+0x30>)
 800af70:	4c0b      	ldr	r4, [pc, #44]	@ (800afa0 <global_stdio_init.part.0+0x34>)
 800af72:	4a0c      	ldr	r2, [pc, #48]	@ (800afa4 <global_stdio_init.part.0+0x38>)
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	4620      	mov	r0, r4
 800af78:	2200      	movs	r2, #0
 800af7a:	2104      	movs	r1, #4
 800af7c:	f7ff ff94 	bl	800aea8 <std>
 800af80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af84:	2201      	movs	r2, #1
 800af86:	2109      	movs	r1, #9
 800af88:	f7ff ff8e 	bl	800aea8 <std>
 800af8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af90:	2202      	movs	r2, #2
 800af92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af96:	2112      	movs	r1, #18
 800af98:	f7ff bf86 	b.w	800aea8 <std>
 800af9c:	200022d0 	.word	0x200022d0
 800afa0:	20002198 	.word	0x20002198
 800afa4:	0800af15 	.word	0x0800af15

0800afa8 <__sfp_lock_acquire>:
 800afa8:	4801      	ldr	r0, [pc, #4]	@ (800afb0 <__sfp_lock_acquire+0x8>)
 800afaa:	f000 b922 	b.w	800b1f2 <__retarget_lock_acquire_recursive>
 800afae:	bf00      	nop
 800afb0:	200022d9 	.word	0x200022d9

0800afb4 <__sfp_lock_release>:
 800afb4:	4801      	ldr	r0, [pc, #4]	@ (800afbc <__sfp_lock_release+0x8>)
 800afb6:	f000 b91d 	b.w	800b1f4 <__retarget_lock_release_recursive>
 800afba:	bf00      	nop
 800afbc:	200022d9 	.word	0x200022d9

0800afc0 <__sinit>:
 800afc0:	b510      	push	{r4, lr}
 800afc2:	4604      	mov	r4, r0
 800afc4:	f7ff fff0 	bl	800afa8 <__sfp_lock_acquire>
 800afc8:	6a23      	ldr	r3, [r4, #32]
 800afca:	b11b      	cbz	r3, 800afd4 <__sinit+0x14>
 800afcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd0:	f7ff bff0 	b.w	800afb4 <__sfp_lock_release>
 800afd4:	4b04      	ldr	r3, [pc, #16]	@ (800afe8 <__sinit+0x28>)
 800afd6:	6223      	str	r3, [r4, #32]
 800afd8:	4b04      	ldr	r3, [pc, #16]	@ (800afec <__sinit+0x2c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1f5      	bne.n	800afcc <__sinit+0xc>
 800afe0:	f7ff ffc4 	bl	800af6c <global_stdio_init.part.0>
 800afe4:	e7f2      	b.n	800afcc <__sinit+0xc>
 800afe6:	bf00      	nop
 800afe8:	0800af2d 	.word	0x0800af2d
 800afec:	200022d0 	.word	0x200022d0

0800aff0 <_fwalk_sglue>:
 800aff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff4:	4607      	mov	r7, r0
 800aff6:	4688      	mov	r8, r1
 800aff8:	4614      	mov	r4, r2
 800affa:	2600      	movs	r6, #0
 800affc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b000:	f1b9 0901 	subs.w	r9, r9, #1
 800b004:	d505      	bpl.n	800b012 <_fwalk_sglue+0x22>
 800b006:	6824      	ldr	r4, [r4, #0]
 800b008:	2c00      	cmp	r4, #0
 800b00a:	d1f7      	bne.n	800affc <_fwalk_sglue+0xc>
 800b00c:	4630      	mov	r0, r6
 800b00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b012:	89ab      	ldrh	r3, [r5, #12]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d907      	bls.n	800b028 <_fwalk_sglue+0x38>
 800b018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b01c:	3301      	adds	r3, #1
 800b01e:	d003      	beq.n	800b028 <_fwalk_sglue+0x38>
 800b020:	4629      	mov	r1, r5
 800b022:	4638      	mov	r0, r7
 800b024:	47c0      	blx	r8
 800b026:	4306      	orrs	r6, r0
 800b028:	3568      	adds	r5, #104	@ 0x68
 800b02a:	e7e9      	b.n	800b000 <_fwalk_sglue+0x10>

0800b02c <siprintf>:
 800b02c:	b40e      	push	{r1, r2, r3}
 800b02e:	b510      	push	{r4, lr}
 800b030:	b09d      	sub	sp, #116	@ 0x74
 800b032:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b034:	9002      	str	r0, [sp, #8]
 800b036:	9006      	str	r0, [sp, #24]
 800b038:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b03c:	480a      	ldr	r0, [pc, #40]	@ (800b068 <siprintf+0x3c>)
 800b03e:	9107      	str	r1, [sp, #28]
 800b040:	9104      	str	r1, [sp, #16]
 800b042:	490a      	ldr	r1, [pc, #40]	@ (800b06c <siprintf+0x40>)
 800b044:	f853 2b04 	ldr.w	r2, [r3], #4
 800b048:	9105      	str	r1, [sp, #20]
 800b04a:	2400      	movs	r4, #0
 800b04c:	a902      	add	r1, sp, #8
 800b04e:	6800      	ldr	r0, [r0, #0]
 800b050:	9301      	str	r3, [sp, #4]
 800b052:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b054:	f002 fbba 	bl	800d7cc <_svfiprintf_r>
 800b058:	9b02      	ldr	r3, [sp, #8]
 800b05a:	701c      	strb	r4, [r3, #0]
 800b05c:	b01d      	add	sp, #116	@ 0x74
 800b05e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b062:	b003      	add	sp, #12
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	20000198 	.word	0x20000198
 800b06c:	ffff0208 	.word	0xffff0208

0800b070 <__sread>:
 800b070:	b510      	push	{r4, lr}
 800b072:	460c      	mov	r4, r1
 800b074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b078:	f000 f86c 	bl	800b154 <_read_r>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	bfab      	itete	ge
 800b080:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b082:	89a3      	ldrhlt	r3, [r4, #12]
 800b084:	181b      	addge	r3, r3, r0
 800b086:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b08a:	bfac      	ite	ge
 800b08c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b08e:	81a3      	strhlt	r3, [r4, #12]
 800b090:	bd10      	pop	{r4, pc}

0800b092 <__swrite>:
 800b092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b096:	461f      	mov	r7, r3
 800b098:	898b      	ldrh	r3, [r1, #12]
 800b09a:	05db      	lsls	r3, r3, #23
 800b09c:	4605      	mov	r5, r0
 800b09e:	460c      	mov	r4, r1
 800b0a0:	4616      	mov	r6, r2
 800b0a2:	d505      	bpl.n	800b0b0 <__swrite+0x1e>
 800b0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f000 f840 	bl	800b130 <_lseek_r>
 800b0b0:	89a3      	ldrh	r3, [r4, #12]
 800b0b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0ba:	81a3      	strh	r3, [r4, #12]
 800b0bc:	4632      	mov	r2, r6
 800b0be:	463b      	mov	r3, r7
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c6:	f000 b857 	b.w	800b178 <_write_r>

0800b0ca <__sseek>:
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d2:	f000 f82d 	bl	800b130 <_lseek_r>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	bf15      	itete	ne
 800b0dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b0de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b0e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b0e6:	81a3      	strheq	r3, [r4, #12]
 800b0e8:	bf18      	it	ne
 800b0ea:	81a3      	strhne	r3, [r4, #12]
 800b0ec:	bd10      	pop	{r4, pc}

0800b0ee <__sclose>:
 800b0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f2:	f000 b80d 	b.w	800b110 <_close_r>

0800b0f6 <memset>:
 800b0f6:	4402      	add	r2, r0
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d100      	bne.n	800b100 <memset+0xa>
 800b0fe:	4770      	bx	lr
 800b100:	f803 1b01 	strb.w	r1, [r3], #1
 800b104:	e7f9      	b.n	800b0fa <memset+0x4>
	...

0800b108 <_localeconv_r>:
 800b108:	4800      	ldr	r0, [pc, #0]	@ (800b10c <_localeconv_r+0x4>)
 800b10a:	4770      	bx	lr
 800b10c:	200002d8 	.word	0x200002d8

0800b110 <_close_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4d06      	ldr	r5, [pc, #24]	@ (800b12c <_close_r+0x1c>)
 800b114:	2300      	movs	r3, #0
 800b116:	4604      	mov	r4, r0
 800b118:	4608      	mov	r0, r1
 800b11a:	602b      	str	r3, [r5, #0]
 800b11c:	f7f7 f9d6 	bl	80024cc <_close>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	d102      	bne.n	800b12a <_close_r+0x1a>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b103      	cbz	r3, 800b12a <_close_r+0x1a>
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	200022d4 	.word	0x200022d4

0800b130 <_lseek_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4d07      	ldr	r5, [pc, #28]	@ (800b150 <_lseek_r+0x20>)
 800b134:	4604      	mov	r4, r0
 800b136:	4608      	mov	r0, r1
 800b138:	4611      	mov	r1, r2
 800b13a:	2200      	movs	r2, #0
 800b13c:	602a      	str	r2, [r5, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	f7f7 f9eb 	bl	800251a <_lseek>
 800b144:	1c43      	adds	r3, r0, #1
 800b146:	d102      	bne.n	800b14e <_lseek_r+0x1e>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	b103      	cbz	r3, 800b14e <_lseek_r+0x1e>
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	200022d4 	.word	0x200022d4

0800b154 <_read_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4d07      	ldr	r5, [pc, #28]	@ (800b174 <_read_r+0x20>)
 800b158:	4604      	mov	r4, r0
 800b15a:	4608      	mov	r0, r1
 800b15c:	4611      	mov	r1, r2
 800b15e:	2200      	movs	r2, #0
 800b160:	602a      	str	r2, [r5, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	f7f7 f979 	bl	800245a <_read>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d102      	bne.n	800b172 <_read_r+0x1e>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	b103      	cbz	r3, 800b172 <_read_r+0x1e>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	200022d4 	.word	0x200022d4

0800b178 <_write_r>:
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	4d07      	ldr	r5, [pc, #28]	@ (800b198 <_write_r+0x20>)
 800b17c:	4604      	mov	r4, r0
 800b17e:	4608      	mov	r0, r1
 800b180:	4611      	mov	r1, r2
 800b182:	2200      	movs	r2, #0
 800b184:	602a      	str	r2, [r5, #0]
 800b186:	461a      	mov	r2, r3
 800b188:	f7f7 f984 	bl	8002494 <_write>
 800b18c:	1c43      	adds	r3, r0, #1
 800b18e:	d102      	bne.n	800b196 <_write_r+0x1e>
 800b190:	682b      	ldr	r3, [r5, #0]
 800b192:	b103      	cbz	r3, 800b196 <_write_r+0x1e>
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	200022d4 	.word	0x200022d4

0800b19c <__errno>:
 800b19c:	4b01      	ldr	r3, [pc, #4]	@ (800b1a4 <__errno+0x8>)
 800b19e:	6818      	ldr	r0, [r3, #0]
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	20000198 	.word	0x20000198

0800b1a8 <__libc_init_array>:
 800b1a8:	b570      	push	{r4, r5, r6, lr}
 800b1aa:	4d0d      	ldr	r5, [pc, #52]	@ (800b1e0 <__libc_init_array+0x38>)
 800b1ac:	4c0d      	ldr	r4, [pc, #52]	@ (800b1e4 <__libc_init_array+0x3c>)
 800b1ae:	1b64      	subs	r4, r4, r5
 800b1b0:	10a4      	asrs	r4, r4, #2
 800b1b2:	2600      	movs	r6, #0
 800b1b4:	42a6      	cmp	r6, r4
 800b1b6:	d109      	bne.n	800b1cc <__libc_init_array+0x24>
 800b1b8:	4d0b      	ldr	r5, [pc, #44]	@ (800b1e8 <__libc_init_array+0x40>)
 800b1ba:	4c0c      	ldr	r4, [pc, #48]	@ (800b1ec <__libc_init_array+0x44>)
 800b1bc:	f003 fee4 	bl	800ef88 <_init>
 800b1c0:	1b64      	subs	r4, r4, r5
 800b1c2:	10a4      	asrs	r4, r4, #2
 800b1c4:	2600      	movs	r6, #0
 800b1c6:	42a6      	cmp	r6, r4
 800b1c8:	d105      	bne.n	800b1d6 <__libc_init_array+0x2e>
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1d0:	4798      	blx	r3
 800b1d2:	3601      	adds	r6, #1
 800b1d4:	e7ee      	b.n	800b1b4 <__libc_init_array+0xc>
 800b1d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1da:	4798      	blx	r3
 800b1dc:	3601      	adds	r6, #1
 800b1de:	e7f2      	b.n	800b1c6 <__libc_init_array+0x1e>
 800b1e0:	0800f4a8 	.word	0x0800f4a8
 800b1e4:	0800f4a8 	.word	0x0800f4a8
 800b1e8:	0800f4a8 	.word	0x0800f4a8
 800b1ec:	0800f4ac 	.word	0x0800f4ac

0800b1f0 <__retarget_lock_init_recursive>:
 800b1f0:	4770      	bx	lr

0800b1f2 <__retarget_lock_acquire_recursive>:
 800b1f2:	4770      	bx	lr

0800b1f4 <__retarget_lock_release_recursive>:
 800b1f4:	4770      	bx	lr
	...

0800b1f8 <nanf>:
 800b1f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b200 <nanf+0x8>
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	7fc00000 	.word	0x7fc00000

0800b204 <quorem>:
 800b204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	6903      	ldr	r3, [r0, #16]
 800b20a:	690c      	ldr	r4, [r1, #16]
 800b20c:	42a3      	cmp	r3, r4
 800b20e:	4607      	mov	r7, r0
 800b210:	db7e      	blt.n	800b310 <quorem+0x10c>
 800b212:	3c01      	subs	r4, #1
 800b214:	f101 0814 	add.w	r8, r1, #20
 800b218:	00a3      	lsls	r3, r4, #2
 800b21a:	f100 0514 	add.w	r5, r0, #20
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b224:	9301      	str	r3, [sp, #4]
 800b226:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b22a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b22e:	3301      	adds	r3, #1
 800b230:	429a      	cmp	r2, r3
 800b232:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b236:	fbb2 f6f3 	udiv	r6, r2, r3
 800b23a:	d32e      	bcc.n	800b29a <quorem+0x96>
 800b23c:	f04f 0a00 	mov.w	sl, #0
 800b240:	46c4      	mov	ip, r8
 800b242:	46ae      	mov	lr, r5
 800b244:	46d3      	mov	fp, sl
 800b246:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b24a:	b298      	uxth	r0, r3
 800b24c:	fb06 a000 	mla	r0, r6, r0, sl
 800b250:	0c02      	lsrs	r2, r0, #16
 800b252:	0c1b      	lsrs	r3, r3, #16
 800b254:	fb06 2303 	mla	r3, r6, r3, r2
 800b258:	f8de 2000 	ldr.w	r2, [lr]
 800b25c:	b280      	uxth	r0, r0
 800b25e:	b292      	uxth	r2, r2
 800b260:	1a12      	subs	r2, r2, r0
 800b262:	445a      	add	r2, fp
 800b264:	f8de 0000 	ldr.w	r0, [lr]
 800b268:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b272:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b276:	b292      	uxth	r2, r2
 800b278:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b27c:	45e1      	cmp	r9, ip
 800b27e:	f84e 2b04 	str.w	r2, [lr], #4
 800b282:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b286:	d2de      	bcs.n	800b246 <quorem+0x42>
 800b288:	9b00      	ldr	r3, [sp, #0]
 800b28a:	58eb      	ldr	r3, [r5, r3]
 800b28c:	b92b      	cbnz	r3, 800b29a <quorem+0x96>
 800b28e:	9b01      	ldr	r3, [sp, #4]
 800b290:	3b04      	subs	r3, #4
 800b292:	429d      	cmp	r5, r3
 800b294:	461a      	mov	r2, r3
 800b296:	d32f      	bcc.n	800b2f8 <quorem+0xf4>
 800b298:	613c      	str	r4, [r7, #16]
 800b29a:	4638      	mov	r0, r7
 800b29c:	f001 f9c8 	bl	800c630 <__mcmp>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	db25      	blt.n	800b2f0 <quorem+0xec>
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2ac:	f8d1 c000 	ldr.w	ip, [r1]
 800b2b0:	fa1f fe82 	uxth.w	lr, r2
 800b2b4:	fa1f f38c 	uxth.w	r3, ip
 800b2b8:	eba3 030e 	sub.w	r3, r3, lr
 800b2bc:	4403      	add	r3, r0
 800b2be:	0c12      	lsrs	r2, r2, #16
 800b2c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b2c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2ce:	45c1      	cmp	r9, r8
 800b2d0:	f841 3b04 	str.w	r3, [r1], #4
 800b2d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b2d8:	d2e6      	bcs.n	800b2a8 <quorem+0xa4>
 800b2da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2e2:	b922      	cbnz	r2, 800b2ee <quorem+0xea>
 800b2e4:	3b04      	subs	r3, #4
 800b2e6:	429d      	cmp	r5, r3
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	d30b      	bcc.n	800b304 <quorem+0x100>
 800b2ec:	613c      	str	r4, [r7, #16]
 800b2ee:	3601      	adds	r6, #1
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	b003      	add	sp, #12
 800b2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f8:	6812      	ldr	r2, [r2, #0]
 800b2fa:	3b04      	subs	r3, #4
 800b2fc:	2a00      	cmp	r2, #0
 800b2fe:	d1cb      	bne.n	800b298 <quorem+0x94>
 800b300:	3c01      	subs	r4, #1
 800b302:	e7c6      	b.n	800b292 <quorem+0x8e>
 800b304:	6812      	ldr	r2, [r2, #0]
 800b306:	3b04      	subs	r3, #4
 800b308:	2a00      	cmp	r2, #0
 800b30a:	d1ef      	bne.n	800b2ec <quorem+0xe8>
 800b30c:	3c01      	subs	r4, #1
 800b30e:	e7ea      	b.n	800b2e6 <quorem+0xe2>
 800b310:	2000      	movs	r0, #0
 800b312:	e7ee      	b.n	800b2f2 <quorem+0xee>
 800b314:	0000      	movs	r0, r0
	...

0800b318 <_dtoa_r>:
 800b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b31c:	69c7      	ldr	r7, [r0, #28]
 800b31e:	b097      	sub	sp, #92	@ 0x5c
 800b320:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b324:	ec55 4b10 	vmov	r4, r5, d0
 800b328:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b32a:	9107      	str	r1, [sp, #28]
 800b32c:	4681      	mov	r9, r0
 800b32e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b330:	9311      	str	r3, [sp, #68]	@ 0x44
 800b332:	b97f      	cbnz	r7, 800b354 <_dtoa_r+0x3c>
 800b334:	2010      	movs	r0, #16
 800b336:	f000 fe09 	bl	800bf4c <malloc>
 800b33a:	4602      	mov	r2, r0
 800b33c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b340:	b920      	cbnz	r0, 800b34c <_dtoa_r+0x34>
 800b342:	4ba9      	ldr	r3, [pc, #676]	@ (800b5e8 <_dtoa_r+0x2d0>)
 800b344:	21ef      	movs	r1, #239	@ 0xef
 800b346:	48a9      	ldr	r0, [pc, #676]	@ (800b5ec <_dtoa_r+0x2d4>)
 800b348:	f002 fc3a 	bl	800dbc0 <__assert_func>
 800b34c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b350:	6007      	str	r7, [r0, #0]
 800b352:	60c7      	str	r7, [r0, #12]
 800b354:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b358:	6819      	ldr	r1, [r3, #0]
 800b35a:	b159      	cbz	r1, 800b374 <_dtoa_r+0x5c>
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	604a      	str	r2, [r1, #4]
 800b360:	2301      	movs	r3, #1
 800b362:	4093      	lsls	r3, r2
 800b364:	608b      	str	r3, [r1, #8]
 800b366:	4648      	mov	r0, r9
 800b368:	f000 fee6 	bl	800c138 <_Bfree>
 800b36c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	1e2b      	subs	r3, r5, #0
 800b376:	bfb9      	ittee	lt
 800b378:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b37c:	9305      	strlt	r3, [sp, #20]
 800b37e:	2300      	movge	r3, #0
 800b380:	6033      	strge	r3, [r6, #0]
 800b382:	9f05      	ldr	r7, [sp, #20]
 800b384:	4b9a      	ldr	r3, [pc, #616]	@ (800b5f0 <_dtoa_r+0x2d8>)
 800b386:	bfbc      	itt	lt
 800b388:	2201      	movlt	r2, #1
 800b38a:	6032      	strlt	r2, [r6, #0]
 800b38c:	43bb      	bics	r3, r7
 800b38e:	d112      	bne.n	800b3b6 <_dtoa_r+0x9e>
 800b390:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b392:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b39c:	4323      	orrs	r3, r4
 800b39e:	f000 855a 	beq.w	800be56 <_dtoa_r+0xb3e>
 800b3a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b3a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b604 <_dtoa_r+0x2ec>
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f000 855c 	beq.w	800be66 <_dtoa_r+0xb4e>
 800b3ae:	f10a 0303 	add.w	r3, sl, #3
 800b3b2:	f000 bd56 	b.w	800be62 <_dtoa_r+0xb4a>
 800b3b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	ec51 0b17 	vmov	r0, r1, d7
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b3c6:	f7f5 fb87 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3ca:	4680      	mov	r8, r0
 800b3cc:	b158      	cbz	r0, 800b3e6 <_dtoa_r+0xce>
 800b3ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b3d6:	b113      	cbz	r3, 800b3de <_dtoa_r+0xc6>
 800b3d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b3da:	4b86      	ldr	r3, [pc, #536]	@ (800b5f4 <_dtoa_r+0x2dc>)
 800b3dc:	6013      	str	r3, [r2, #0]
 800b3de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b608 <_dtoa_r+0x2f0>
 800b3e2:	f000 bd40 	b.w	800be66 <_dtoa_r+0xb4e>
 800b3e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b3ea:	aa14      	add	r2, sp, #80	@ 0x50
 800b3ec:	a915      	add	r1, sp, #84	@ 0x54
 800b3ee:	4648      	mov	r0, r9
 800b3f0:	f001 fa3e 	bl	800c870 <__d2b>
 800b3f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b3f8:	9002      	str	r0, [sp, #8]
 800b3fa:	2e00      	cmp	r6, #0
 800b3fc:	d078      	beq.n	800b4f0 <_dtoa_r+0x1d8>
 800b3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b400:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b408:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b40c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b410:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b414:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b418:	4619      	mov	r1, r3
 800b41a:	2200      	movs	r2, #0
 800b41c:	4b76      	ldr	r3, [pc, #472]	@ (800b5f8 <_dtoa_r+0x2e0>)
 800b41e:	f7f4 ff3b 	bl	8000298 <__aeabi_dsub>
 800b422:	a36b      	add	r3, pc, #428	@ (adr r3, 800b5d0 <_dtoa_r+0x2b8>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	f7f5 f8ee 	bl	8000608 <__aeabi_dmul>
 800b42c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b5d8 <_dtoa_r+0x2c0>)
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f7f4 ff33 	bl	800029c <__adddf3>
 800b436:	4604      	mov	r4, r0
 800b438:	4630      	mov	r0, r6
 800b43a:	460d      	mov	r5, r1
 800b43c:	f7f5 f87a 	bl	8000534 <__aeabi_i2d>
 800b440:	a367      	add	r3, pc, #412	@ (adr r3, 800b5e0 <_dtoa_r+0x2c8>)
 800b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b446:	f7f5 f8df 	bl	8000608 <__aeabi_dmul>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	4620      	mov	r0, r4
 800b450:	4629      	mov	r1, r5
 800b452:	f7f4 ff23 	bl	800029c <__adddf3>
 800b456:	4604      	mov	r4, r0
 800b458:	460d      	mov	r5, r1
 800b45a:	f7f5 fb85 	bl	8000b68 <__aeabi_d2iz>
 800b45e:	2200      	movs	r2, #0
 800b460:	4607      	mov	r7, r0
 800b462:	2300      	movs	r3, #0
 800b464:	4620      	mov	r0, r4
 800b466:	4629      	mov	r1, r5
 800b468:	f7f5 fb40 	bl	8000aec <__aeabi_dcmplt>
 800b46c:	b140      	cbz	r0, 800b480 <_dtoa_r+0x168>
 800b46e:	4638      	mov	r0, r7
 800b470:	f7f5 f860 	bl	8000534 <__aeabi_i2d>
 800b474:	4622      	mov	r2, r4
 800b476:	462b      	mov	r3, r5
 800b478:	f7f5 fb2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b47c:	b900      	cbnz	r0, 800b480 <_dtoa_r+0x168>
 800b47e:	3f01      	subs	r7, #1
 800b480:	2f16      	cmp	r7, #22
 800b482:	d852      	bhi.n	800b52a <_dtoa_r+0x212>
 800b484:	4b5d      	ldr	r3, [pc, #372]	@ (800b5fc <_dtoa_r+0x2e4>)
 800b486:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b492:	f7f5 fb2b 	bl	8000aec <__aeabi_dcmplt>
 800b496:	2800      	cmp	r0, #0
 800b498:	d049      	beq.n	800b52e <_dtoa_r+0x216>
 800b49a:	3f01      	subs	r7, #1
 800b49c:	2300      	movs	r3, #0
 800b49e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b4a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b4a2:	1b9b      	subs	r3, r3, r6
 800b4a4:	1e5a      	subs	r2, r3, #1
 800b4a6:	bf45      	ittet	mi
 800b4a8:	f1c3 0301 	rsbmi	r3, r3, #1
 800b4ac:	9300      	strmi	r3, [sp, #0]
 800b4ae:	2300      	movpl	r3, #0
 800b4b0:	2300      	movmi	r3, #0
 800b4b2:	9206      	str	r2, [sp, #24]
 800b4b4:	bf54      	ite	pl
 800b4b6:	9300      	strpl	r3, [sp, #0]
 800b4b8:	9306      	strmi	r3, [sp, #24]
 800b4ba:	2f00      	cmp	r7, #0
 800b4bc:	db39      	blt.n	800b532 <_dtoa_r+0x21a>
 800b4be:	9b06      	ldr	r3, [sp, #24]
 800b4c0:	970d      	str	r7, [sp, #52]	@ 0x34
 800b4c2:	443b      	add	r3, r7
 800b4c4:	9306      	str	r3, [sp, #24]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	9308      	str	r3, [sp, #32]
 800b4ca:	9b07      	ldr	r3, [sp, #28]
 800b4cc:	2b09      	cmp	r3, #9
 800b4ce:	d863      	bhi.n	800b598 <_dtoa_r+0x280>
 800b4d0:	2b05      	cmp	r3, #5
 800b4d2:	bfc4      	itt	gt
 800b4d4:	3b04      	subgt	r3, #4
 800b4d6:	9307      	strgt	r3, [sp, #28]
 800b4d8:	9b07      	ldr	r3, [sp, #28]
 800b4da:	f1a3 0302 	sub.w	r3, r3, #2
 800b4de:	bfcc      	ite	gt
 800b4e0:	2400      	movgt	r4, #0
 800b4e2:	2401      	movle	r4, #1
 800b4e4:	2b03      	cmp	r3, #3
 800b4e6:	d863      	bhi.n	800b5b0 <_dtoa_r+0x298>
 800b4e8:	e8df f003 	tbb	[pc, r3]
 800b4ec:	2b375452 	.word	0x2b375452
 800b4f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b4f4:	441e      	add	r6, r3
 800b4f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b4fa:	2b20      	cmp	r3, #32
 800b4fc:	bfc1      	itttt	gt
 800b4fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b502:	409f      	lslgt	r7, r3
 800b504:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b508:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b50c:	bfd6      	itet	le
 800b50e:	f1c3 0320 	rsble	r3, r3, #32
 800b512:	ea47 0003 	orrgt.w	r0, r7, r3
 800b516:	fa04 f003 	lslle.w	r0, r4, r3
 800b51a:	f7f4 fffb 	bl	8000514 <__aeabi_ui2d>
 800b51e:	2201      	movs	r2, #1
 800b520:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b524:	3e01      	subs	r6, #1
 800b526:	9212      	str	r2, [sp, #72]	@ 0x48
 800b528:	e776      	b.n	800b418 <_dtoa_r+0x100>
 800b52a:	2301      	movs	r3, #1
 800b52c:	e7b7      	b.n	800b49e <_dtoa_r+0x186>
 800b52e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b530:	e7b6      	b.n	800b4a0 <_dtoa_r+0x188>
 800b532:	9b00      	ldr	r3, [sp, #0]
 800b534:	1bdb      	subs	r3, r3, r7
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	427b      	negs	r3, r7
 800b53a:	9308      	str	r3, [sp, #32]
 800b53c:	2300      	movs	r3, #0
 800b53e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b540:	e7c3      	b.n	800b4ca <_dtoa_r+0x1b2>
 800b542:	2301      	movs	r3, #1
 800b544:	9309      	str	r3, [sp, #36]	@ 0x24
 800b546:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b548:	eb07 0b03 	add.w	fp, r7, r3
 800b54c:	f10b 0301 	add.w	r3, fp, #1
 800b550:	2b01      	cmp	r3, #1
 800b552:	9303      	str	r3, [sp, #12]
 800b554:	bfb8      	it	lt
 800b556:	2301      	movlt	r3, #1
 800b558:	e006      	b.n	800b568 <_dtoa_r+0x250>
 800b55a:	2301      	movs	r3, #1
 800b55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b55e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b560:	2b00      	cmp	r3, #0
 800b562:	dd28      	ble.n	800b5b6 <_dtoa_r+0x29e>
 800b564:	469b      	mov	fp, r3
 800b566:	9303      	str	r3, [sp, #12]
 800b568:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b56c:	2100      	movs	r1, #0
 800b56e:	2204      	movs	r2, #4
 800b570:	f102 0514 	add.w	r5, r2, #20
 800b574:	429d      	cmp	r5, r3
 800b576:	d926      	bls.n	800b5c6 <_dtoa_r+0x2ae>
 800b578:	6041      	str	r1, [r0, #4]
 800b57a:	4648      	mov	r0, r9
 800b57c:	f000 fd9c 	bl	800c0b8 <_Balloc>
 800b580:	4682      	mov	sl, r0
 800b582:	2800      	cmp	r0, #0
 800b584:	d142      	bne.n	800b60c <_dtoa_r+0x2f4>
 800b586:	4b1e      	ldr	r3, [pc, #120]	@ (800b600 <_dtoa_r+0x2e8>)
 800b588:	4602      	mov	r2, r0
 800b58a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b58e:	e6da      	b.n	800b346 <_dtoa_r+0x2e>
 800b590:	2300      	movs	r3, #0
 800b592:	e7e3      	b.n	800b55c <_dtoa_r+0x244>
 800b594:	2300      	movs	r3, #0
 800b596:	e7d5      	b.n	800b544 <_dtoa_r+0x22c>
 800b598:	2401      	movs	r4, #1
 800b59a:	2300      	movs	r3, #0
 800b59c:	9307      	str	r3, [sp, #28]
 800b59e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b5a0:	f04f 3bff 	mov.w	fp, #4294967295
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800b5aa:	2312      	movs	r3, #18
 800b5ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800b5ae:	e7db      	b.n	800b568 <_dtoa_r+0x250>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5b4:	e7f4      	b.n	800b5a0 <_dtoa_r+0x288>
 800b5b6:	f04f 0b01 	mov.w	fp, #1
 800b5ba:	f8cd b00c 	str.w	fp, [sp, #12]
 800b5be:	465b      	mov	r3, fp
 800b5c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b5c4:	e7d0      	b.n	800b568 <_dtoa_r+0x250>
 800b5c6:	3101      	adds	r1, #1
 800b5c8:	0052      	lsls	r2, r2, #1
 800b5ca:	e7d1      	b.n	800b570 <_dtoa_r+0x258>
 800b5cc:	f3af 8000 	nop.w
 800b5d0:	636f4361 	.word	0x636f4361
 800b5d4:	3fd287a7 	.word	0x3fd287a7
 800b5d8:	8b60c8b3 	.word	0x8b60c8b3
 800b5dc:	3fc68a28 	.word	0x3fc68a28
 800b5e0:	509f79fb 	.word	0x509f79fb
 800b5e4:	3fd34413 	.word	0x3fd34413
 800b5e8:	0800f036 	.word	0x0800f036
 800b5ec:	0800f04d 	.word	0x0800f04d
 800b5f0:	7ff00000 	.word	0x7ff00000
 800b5f4:	0800f001 	.word	0x0800f001
 800b5f8:	3ff80000 	.word	0x3ff80000
 800b5fc:	0800f200 	.word	0x0800f200
 800b600:	0800f0a5 	.word	0x0800f0a5
 800b604:	0800f032 	.word	0x0800f032
 800b608:	0800f000 	.word	0x0800f000
 800b60c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b610:	6018      	str	r0, [r3, #0]
 800b612:	9b03      	ldr	r3, [sp, #12]
 800b614:	2b0e      	cmp	r3, #14
 800b616:	f200 80a1 	bhi.w	800b75c <_dtoa_r+0x444>
 800b61a:	2c00      	cmp	r4, #0
 800b61c:	f000 809e 	beq.w	800b75c <_dtoa_r+0x444>
 800b620:	2f00      	cmp	r7, #0
 800b622:	dd33      	ble.n	800b68c <_dtoa_r+0x374>
 800b624:	4b9c      	ldr	r3, [pc, #624]	@ (800b898 <_dtoa_r+0x580>)
 800b626:	f007 020f 	and.w	r2, r7, #15
 800b62a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b62e:	ed93 7b00 	vldr	d7, [r3]
 800b632:	05f8      	lsls	r0, r7, #23
 800b634:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b638:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b63c:	d516      	bpl.n	800b66c <_dtoa_r+0x354>
 800b63e:	4b97      	ldr	r3, [pc, #604]	@ (800b89c <_dtoa_r+0x584>)
 800b640:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b648:	f7f5 f908 	bl	800085c <__aeabi_ddiv>
 800b64c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b650:	f004 040f 	and.w	r4, r4, #15
 800b654:	2603      	movs	r6, #3
 800b656:	4d91      	ldr	r5, [pc, #580]	@ (800b89c <_dtoa_r+0x584>)
 800b658:	b954      	cbnz	r4, 800b670 <_dtoa_r+0x358>
 800b65a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b65e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b662:	f7f5 f8fb 	bl	800085c <__aeabi_ddiv>
 800b666:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b66a:	e028      	b.n	800b6be <_dtoa_r+0x3a6>
 800b66c:	2602      	movs	r6, #2
 800b66e:	e7f2      	b.n	800b656 <_dtoa_r+0x33e>
 800b670:	07e1      	lsls	r1, r4, #31
 800b672:	d508      	bpl.n	800b686 <_dtoa_r+0x36e>
 800b674:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b678:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b67c:	f7f4 ffc4 	bl	8000608 <__aeabi_dmul>
 800b680:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b684:	3601      	adds	r6, #1
 800b686:	1064      	asrs	r4, r4, #1
 800b688:	3508      	adds	r5, #8
 800b68a:	e7e5      	b.n	800b658 <_dtoa_r+0x340>
 800b68c:	f000 80af 	beq.w	800b7ee <_dtoa_r+0x4d6>
 800b690:	427c      	negs	r4, r7
 800b692:	4b81      	ldr	r3, [pc, #516]	@ (800b898 <_dtoa_r+0x580>)
 800b694:	4d81      	ldr	r5, [pc, #516]	@ (800b89c <_dtoa_r+0x584>)
 800b696:	f004 020f 	and.w	r2, r4, #15
 800b69a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b6a6:	f7f4 ffaf 	bl	8000608 <__aeabi_dmul>
 800b6aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6ae:	1124      	asrs	r4, r4, #4
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	2602      	movs	r6, #2
 800b6b4:	2c00      	cmp	r4, #0
 800b6b6:	f040 808f 	bne.w	800b7d8 <_dtoa_r+0x4c0>
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1d3      	bne.n	800b666 <_dtoa_r+0x34e>
 800b6be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b6c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 8094 	beq.w	800b7f2 <_dtoa_r+0x4da>
 800b6ca:	4b75      	ldr	r3, [pc, #468]	@ (800b8a0 <_dtoa_r+0x588>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	f7f5 fa0b 	bl	8000aec <__aeabi_dcmplt>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	f000 808b 	beq.w	800b7f2 <_dtoa_r+0x4da>
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f000 8087 	beq.w	800b7f2 <_dtoa_r+0x4da>
 800b6e4:	f1bb 0f00 	cmp.w	fp, #0
 800b6e8:	dd34      	ble.n	800b754 <_dtoa_r+0x43c>
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4b6d      	ldr	r3, [pc, #436]	@ (800b8a4 <_dtoa_r+0x58c>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	f7f4 ff89 	bl	8000608 <__aeabi_dmul>
 800b6f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6fa:	f107 38ff 	add.w	r8, r7, #4294967295
 800b6fe:	3601      	adds	r6, #1
 800b700:	465c      	mov	r4, fp
 800b702:	4630      	mov	r0, r6
 800b704:	f7f4 ff16 	bl	8000534 <__aeabi_i2d>
 800b708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b70c:	f7f4 ff7c 	bl	8000608 <__aeabi_dmul>
 800b710:	4b65      	ldr	r3, [pc, #404]	@ (800b8a8 <_dtoa_r+0x590>)
 800b712:	2200      	movs	r2, #0
 800b714:	f7f4 fdc2 	bl	800029c <__adddf3>
 800b718:	4605      	mov	r5, r0
 800b71a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b71e:	2c00      	cmp	r4, #0
 800b720:	d16a      	bne.n	800b7f8 <_dtoa_r+0x4e0>
 800b722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b726:	4b61      	ldr	r3, [pc, #388]	@ (800b8ac <_dtoa_r+0x594>)
 800b728:	2200      	movs	r2, #0
 800b72a:	f7f4 fdb5 	bl	8000298 <__aeabi_dsub>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b736:	462a      	mov	r2, r5
 800b738:	4633      	mov	r3, r6
 800b73a:	f7f5 f9f5 	bl	8000b28 <__aeabi_dcmpgt>
 800b73e:	2800      	cmp	r0, #0
 800b740:	f040 8298 	bne.w	800bc74 <_dtoa_r+0x95c>
 800b744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b748:	462a      	mov	r2, r5
 800b74a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b74e:	f7f5 f9cd 	bl	8000aec <__aeabi_dcmplt>
 800b752:	bb38      	cbnz	r0, 800b7a4 <_dtoa_r+0x48c>
 800b754:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b758:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b75c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f2c0 8157 	blt.w	800ba12 <_dtoa_r+0x6fa>
 800b764:	2f0e      	cmp	r7, #14
 800b766:	f300 8154 	bgt.w	800ba12 <_dtoa_r+0x6fa>
 800b76a:	4b4b      	ldr	r3, [pc, #300]	@ (800b898 <_dtoa_r+0x580>)
 800b76c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b770:	ed93 7b00 	vldr	d7, [r3]
 800b774:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b776:	2b00      	cmp	r3, #0
 800b778:	ed8d 7b00 	vstr	d7, [sp]
 800b77c:	f280 80e5 	bge.w	800b94a <_dtoa_r+0x632>
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	f300 80e1 	bgt.w	800b94a <_dtoa_r+0x632>
 800b788:	d10c      	bne.n	800b7a4 <_dtoa_r+0x48c>
 800b78a:	4b48      	ldr	r3, [pc, #288]	@ (800b8ac <_dtoa_r+0x594>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	ec51 0b17 	vmov	r0, r1, d7
 800b792:	f7f4 ff39 	bl	8000608 <__aeabi_dmul>
 800b796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b79a:	f7f5 f9bb 	bl	8000b14 <__aeabi_dcmpge>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	f000 8266 	beq.w	800bc70 <_dtoa_r+0x958>
 800b7a4:	2400      	movs	r4, #0
 800b7a6:	4625      	mov	r5, r4
 800b7a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7aa:	4656      	mov	r6, sl
 800b7ac:	ea6f 0803 	mvn.w	r8, r3
 800b7b0:	2700      	movs	r7, #0
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4648      	mov	r0, r9
 800b7b6:	f000 fcbf 	bl	800c138 <_Bfree>
 800b7ba:	2d00      	cmp	r5, #0
 800b7bc:	f000 80bd 	beq.w	800b93a <_dtoa_r+0x622>
 800b7c0:	b12f      	cbz	r7, 800b7ce <_dtoa_r+0x4b6>
 800b7c2:	42af      	cmp	r7, r5
 800b7c4:	d003      	beq.n	800b7ce <_dtoa_r+0x4b6>
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	4648      	mov	r0, r9
 800b7ca:	f000 fcb5 	bl	800c138 <_Bfree>
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4648      	mov	r0, r9
 800b7d2:	f000 fcb1 	bl	800c138 <_Bfree>
 800b7d6:	e0b0      	b.n	800b93a <_dtoa_r+0x622>
 800b7d8:	07e2      	lsls	r2, r4, #31
 800b7da:	d505      	bpl.n	800b7e8 <_dtoa_r+0x4d0>
 800b7dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7e0:	f7f4 ff12 	bl	8000608 <__aeabi_dmul>
 800b7e4:	3601      	adds	r6, #1
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	1064      	asrs	r4, r4, #1
 800b7ea:	3508      	adds	r5, #8
 800b7ec:	e762      	b.n	800b6b4 <_dtoa_r+0x39c>
 800b7ee:	2602      	movs	r6, #2
 800b7f0:	e765      	b.n	800b6be <_dtoa_r+0x3a6>
 800b7f2:	9c03      	ldr	r4, [sp, #12]
 800b7f4:	46b8      	mov	r8, r7
 800b7f6:	e784      	b.n	800b702 <_dtoa_r+0x3ea>
 800b7f8:	4b27      	ldr	r3, [pc, #156]	@ (800b898 <_dtoa_r+0x580>)
 800b7fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b800:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b804:	4454      	add	r4, sl
 800b806:	2900      	cmp	r1, #0
 800b808:	d054      	beq.n	800b8b4 <_dtoa_r+0x59c>
 800b80a:	4929      	ldr	r1, [pc, #164]	@ (800b8b0 <_dtoa_r+0x598>)
 800b80c:	2000      	movs	r0, #0
 800b80e:	f7f5 f825 	bl	800085c <__aeabi_ddiv>
 800b812:	4633      	mov	r3, r6
 800b814:	462a      	mov	r2, r5
 800b816:	f7f4 fd3f 	bl	8000298 <__aeabi_dsub>
 800b81a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b81e:	4656      	mov	r6, sl
 800b820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b824:	f7f5 f9a0 	bl	8000b68 <__aeabi_d2iz>
 800b828:	4605      	mov	r5, r0
 800b82a:	f7f4 fe83 	bl	8000534 <__aeabi_i2d>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b836:	f7f4 fd2f 	bl	8000298 <__aeabi_dsub>
 800b83a:	3530      	adds	r5, #48	@ 0x30
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b844:	f806 5b01 	strb.w	r5, [r6], #1
 800b848:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b84c:	f7f5 f94e 	bl	8000aec <__aeabi_dcmplt>
 800b850:	2800      	cmp	r0, #0
 800b852:	d172      	bne.n	800b93a <_dtoa_r+0x622>
 800b854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b858:	4911      	ldr	r1, [pc, #68]	@ (800b8a0 <_dtoa_r+0x588>)
 800b85a:	2000      	movs	r0, #0
 800b85c:	f7f4 fd1c 	bl	8000298 <__aeabi_dsub>
 800b860:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b864:	f7f5 f942 	bl	8000aec <__aeabi_dcmplt>
 800b868:	2800      	cmp	r0, #0
 800b86a:	f040 80b4 	bne.w	800b9d6 <_dtoa_r+0x6be>
 800b86e:	42a6      	cmp	r6, r4
 800b870:	f43f af70 	beq.w	800b754 <_dtoa_r+0x43c>
 800b874:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b878:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a4 <_dtoa_r+0x58c>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	f7f4 fec4 	bl	8000608 <__aeabi_dmul>
 800b880:	4b08      	ldr	r3, [pc, #32]	@ (800b8a4 <_dtoa_r+0x58c>)
 800b882:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b886:	2200      	movs	r2, #0
 800b888:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b88c:	f7f4 febc 	bl	8000608 <__aeabi_dmul>
 800b890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b894:	e7c4      	b.n	800b820 <_dtoa_r+0x508>
 800b896:	bf00      	nop
 800b898:	0800f200 	.word	0x0800f200
 800b89c:	0800f1d8 	.word	0x0800f1d8
 800b8a0:	3ff00000 	.word	0x3ff00000
 800b8a4:	40240000 	.word	0x40240000
 800b8a8:	401c0000 	.word	0x401c0000
 800b8ac:	40140000 	.word	0x40140000
 800b8b0:	3fe00000 	.word	0x3fe00000
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f7f4 fea6 	bl	8000608 <__aeabi_dmul>
 800b8bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b8c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b8c2:	4656      	mov	r6, sl
 800b8c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8c8:	f7f5 f94e 	bl	8000b68 <__aeabi_d2iz>
 800b8cc:	4605      	mov	r5, r0
 800b8ce:	f7f4 fe31 	bl	8000534 <__aeabi_i2d>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8da:	f7f4 fcdd 	bl	8000298 <__aeabi_dsub>
 800b8de:	3530      	adds	r5, #48	@ 0x30
 800b8e0:	f806 5b01 	strb.w	r5, [r6], #1
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	42a6      	cmp	r6, r4
 800b8ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b8ee:	f04f 0200 	mov.w	r2, #0
 800b8f2:	d124      	bne.n	800b93e <_dtoa_r+0x626>
 800b8f4:	4baf      	ldr	r3, [pc, #700]	@ (800bbb4 <_dtoa_r+0x89c>)
 800b8f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b8fa:	f7f4 fccf 	bl	800029c <__adddf3>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b906:	f7f5 f90f 	bl	8000b28 <__aeabi_dcmpgt>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d163      	bne.n	800b9d6 <_dtoa_r+0x6be>
 800b90e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b912:	49a8      	ldr	r1, [pc, #672]	@ (800bbb4 <_dtoa_r+0x89c>)
 800b914:	2000      	movs	r0, #0
 800b916:	f7f4 fcbf 	bl	8000298 <__aeabi_dsub>
 800b91a:	4602      	mov	r2, r0
 800b91c:	460b      	mov	r3, r1
 800b91e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b922:	f7f5 f8e3 	bl	8000aec <__aeabi_dcmplt>
 800b926:	2800      	cmp	r0, #0
 800b928:	f43f af14 	beq.w	800b754 <_dtoa_r+0x43c>
 800b92c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b92e:	1e73      	subs	r3, r6, #1
 800b930:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b932:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b936:	2b30      	cmp	r3, #48	@ 0x30
 800b938:	d0f8      	beq.n	800b92c <_dtoa_r+0x614>
 800b93a:	4647      	mov	r7, r8
 800b93c:	e03b      	b.n	800b9b6 <_dtoa_r+0x69e>
 800b93e:	4b9e      	ldr	r3, [pc, #632]	@ (800bbb8 <_dtoa_r+0x8a0>)
 800b940:	f7f4 fe62 	bl	8000608 <__aeabi_dmul>
 800b944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b948:	e7bc      	b.n	800b8c4 <_dtoa_r+0x5ac>
 800b94a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b94e:	4656      	mov	r6, sl
 800b950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b954:	4620      	mov	r0, r4
 800b956:	4629      	mov	r1, r5
 800b958:	f7f4 ff80 	bl	800085c <__aeabi_ddiv>
 800b95c:	f7f5 f904 	bl	8000b68 <__aeabi_d2iz>
 800b960:	4680      	mov	r8, r0
 800b962:	f7f4 fde7 	bl	8000534 <__aeabi_i2d>
 800b966:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b96a:	f7f4 fe4d 	bl	8000608 <__aeabi_dmul>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4620      	mov	r0, r4
 800b974:	4629      	mov	r1, r5
 800b976:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b97a:	f7f4 fc8d 	bl	8000298 <__aeabi_dsub>
 800b97e:	f806 4b01 	strb.w	r4, [r6], #1
 800b982:	9d03      	ldr	r5, [sp, #12]
 800b984:	eba6 040a 	sub.w	r4, r6, sl
 800b988:	42a5      	cmp	r5, r4
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	d133      	bne.n	800b9f8 <_dtoa_r+0x6e0>
 800b990:	f7f4 fc84 	bl	800029c <__adddf3>
 800b994:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b998:	4604      	mov	r4, r0
 800b99a:	460d      	mov	r5, r1
 800b99c:	f7f5 f8c4 	bl	8000b28 <__aeabi_dcmpgt>
 800b9a0:	b9c0      	cbnz	r0, 800b9d4 <_dtoa_r+0x6bc>
 800b9a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	f7f5 f895 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9ae:	b110      	cbz	r0, 800b9b6 <_dtoa_r+0x69e>
 800b9b0:	f018 0f01 	tst.w	r8, #1
 800b9b4:	d10e      	bne.n	800b9d4 <_dtoa_r+0x6bc>
 800b9b6:	9902      	ldr	r1, [sp, #8]
 800b9b8:	4648      	mov	r0, r9
 800b9ba:	f000 fbbd 	bl	800c138 <_Bfree>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	7033      	strb	r3, [r6, #0]
 800b9c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b9c4:	3701      	adds	r7, #1
 800b9c6:	601f      	str	r7, [r3, #0]
 800b9c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f000 824b 	beq.w	800be66 <_dtoa_r+0xb4e>
 800b9d0:	601e      	str	r6, [r3, #0]
 800b9d2:	e248      	b.n	800be66 <_dtoa_r+0xb4e>
 800b9d4:	46b8      	mov	r8, r7
 800b9d6:	4633      	mov	r3, r6
 800b9d8:	461e      	mov	r6, r3
 800b9da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9de:	2a39      	cmp	r2, #57	@ 0x39
 800b9e0:	d106      	bne.n	800b9f0 <_dtoa_r+0x6d8>
 800b9e2:	459a      	cmp	sl, r3
 800b9e4:	d1f8      	bne.n	800b9d8 <_dtoa_r+0x6c0>
 800b9e6:	2230      	movs	r2, #48	@ 0x30
 800b9e8:	f108 0801 	add.w	r8, r8, #1
 800b9ec:	f88a 2000 	strb.w	r2, [sl]
 800b9f0:	781a      	ldrb	r2, [r3, #0]
 800b9f2:	3201      	adds	r2, #1
 800b9f4:	701a      	strb	r2, [r3, #0]
 800b9f6:	e7a0      	b.n	800b93a <_dtoa_r+0x622>
 800b9f8:	4b6f      	ldr	r3, [pc, #444]	@ (800bbb8 <_dtoa_r+0x8a0>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f7f4 fe04 	bl	8000608 <__aeabi_dmul>
 800ba00:	2200      	movs	r2, #0
 800ba02:	2300      	movs	r3, #0
 800ba04:	4604      	mov	r4, r0
 800ba06:	460d      	mov	r5, r1
 800ba08:	f7f5 f866 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d09f      	beq.n	800b950 <_dtoa_r+0x638>
 800ba10:	e7d1      	b.n	800b9b6 <_dtoa_r+0x69e>
 800ba12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba14:	2a00      	cmp	r2, #0
 800ba16:	f000 80ea 	beq.w	800bbee <_dtoa_r+0x8d6>
 800ba1a:	9a07      	ldr	r2, [sp, #28]
 800ba1c:	2a01      	cmp	r2, #1
 800ba1e:	f300 80cd 	bgt.w	800bbbc <_dtoa_r+0x8a4>
 800ba22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ba24:	2a00      	cmp	r2, #0
 800ba26:	f000 80c1 	beq.w	800bbac <_dtoa_r+0x894>
 800ba2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ba2e:	9c08      	ldr	r4, [sp, #32]
 800ba30:	9e00      	ldr	r6, [sp, #0]
 800ba32:	9a00      	ldr	r2, [sp, #0]
 800ba34:	441a      	add	r2, r3
 800ba36:	9200      	str	r2, [sp, #0]
 800ba38:	9a06      	ldr	r2, [sp, #24]
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	441a      	add	r2, r3
 800ba3e:	4648      	mov	r0, r9
 800ba40:	9206      	str	r2, [sp, #24]
 800ba42:	f000 fc77 	bl	800c334 <__i2b>
 800ba46:	4605      	mov	r5, r0
 800ba48:	b166      	cbz	r6, 800ba64 <_dtoa_r+0x74c>
 800ba4a:	9b06      	ldr	r3, [sp, #24]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dd09      	ble.n	800ba64 <_dtoa_r+0x74c>
 800ba50:	42b3      	cmp	r3, r6
 800ba52:	9a00      	ldr	r2, [sp, #0]
 800ba54:	bfa8      	it	ge
 800ba56:	4633      	movge	r3, r6
 800ba58:	1ad2      	subs	r2, r2, r3
 800ba5a:	9200      	str	r2, [sp, #0]
 800ba5c:	9a06      	ldr	r2, [sp, #24]
 800ba5e:	1af6      	subs	r6, r6, r3
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	9306      	str	r3, [sp, #24]
 800ba64:	9b08      	ldr	r3, [sp, #32]
 800ba66:	b30b      	cbz	r3, 800baac <_dtoa_r+0x794>
 800ba68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f000 80c6 	beq.w	800bbfc <_dtoa_r+0x8e4>
 800ba70:	2c00      	cmp	r4, #0
 800ba72:	f000 80c0 	beq.w	800bbf6 <_dtoa_r+0x8de>
 800ba76:	4629      	mov	r1, r5
 800ba78:	4622      	mov	r2, r4
 800ba7a:	4648      	mov	r0, r9
 800ba7c:	f000 fd12 	bl	800c4a4 <__pow5mult>
 800ba80:	9a02      	ldr	r2, [sp, #8]
 800ba82:	4601      	mov	r1, r0
 800ba84:	4605      	mov	r5, r0
 800ba86:	4648      	mov	r0, r9
 800ba88:	f000 fc6a 	bl	800c360 <__multiply>
 800ba8c:	9902      	ldr	r1, [sp, #8]
 800ba8e:	4680      	mov	r8, r0
 800ba90:	4648      	mov	r0, r9
 800ba92:	f000 fb51 	bl	800c138 <_Bfree>
 800ba96:	9b08      	ldr	r3, [sp, #32]
 800ba98:	1b1b      	subs	r3, r3, r4
 800ba9a:	9308      	str	r3, [sp, #32]
 800ba9c:	f000 80b1 	beq.w	800bc02 <_dtoa_r+0x8ea>
 800baa0:	9a08      	ldr	r2, [sp, #32]
 800baa2:	4641      	mov	r1, r8
 800baa4:	4648      	mov	r0, r9
 800baa6:	f000 fcfd 	bl	800c4a4 <__pow5mult>
 800baaa:	9002      	str	r0, [sp, #8]
 800baac:	2101      	movs	r1, #1
 800baae:	4648      	mov	r0, r9
 800bab0:	f000 fc40 	bl	800c334 <__i2b>
 800bab4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bab6:	4604      	mov	r4, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f000 81d8 	beq.w	800be6e <_dtoa_r+0xb56>
 800babe:	461a      	mov	r2, r3
 800bac0:	4601      	mov	r1, r0
 800bac2:	4648      	mov	r0, r9
 800bac4:	f000 fcee 	bl	800c4a4 <__pow5mult>
 800bac8:	9b07      	ldr	r3, [sp, #28]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	4604      	mov	r4, r0
 800bace:	f300 809f 	bgt.w	800bc10 <_dtoa_r+0x8f8>
 800bad2:	9b04      	ldr	r3, [sp, #16]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f040 8097 	bne.w	800bc08 <_dtoa_r+0x8f0>
 800bada:	9b05      	ldr	r3, [sp, #20]
 800badc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f040 8093 	bne.w	800bc0c <_dtoa_r+0x8f4>
 800bae6:	9b05      	ldr	r3, [sp, #20]
 800bae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800baec:	0d1b      	lsrs	r3, r3, #20
 800baee:	051b      	lsls	r3, r3, #20
 800baf0:	b133      	cbz	r3, 800bb00 <_dtoa_r+0x7e8>
 800baf2:	9b00      	ldr	r3, [sp, #0]
 800baf4:	3301      	adds	r3, #1
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	9b06      	ldr	r3, [sp, #24]
 800bafa:	3301      	adds	r3, #1
 800bafc:	9306      	str	r3, [sp, #24]
 800bafe:	2301      	movs	r3, #1
 800bb00:	9308      	str	r3, [sp, #32]
 800bb02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 81b8 	beq.w	800be7a <_dtoa_r+0xb62>
 800bb0a:	6923      	ldr	r3, [r4, #16]
 800bb0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb10:	6918      	ldr	r0, [r3, #16]
 800bb12:	f000 fbc3 	bl	800c29c <__hi0bits>
 800bb16:	f1c0 0020 	rsb	r0, r0, #32
 800bb1a:	9b06      	ldr	r3, [sp, #24]
 800bb1c:	4418      	add	r0, r3
 800bb1e:	f010 001f 	ands.w	r0, r0, #31
 800bb22:	f000 8082 	beq.w	800bc2a <_dtoa_r+0x912>
 800bb26:	f1c0 0320 	rsb	r3, r0, #32
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	dd73      	ble.n	800bc16 <_dtoa_r+0x8fe>
 800bb2e:	9b00      	ldr	r3, [sp, #0]
 800bb30:	f1c0 001c 	rsb	r0, r0, #28
 800bb34:	4403      	add	r3, r0
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	9b06      	ldr	r3, [sp, #24]
 800bb3a:	4403      	add	r3, r0
 800bb3c:	4406      	add	r6, r0
 800bb3e:	9306      	str	r3, [sp, #24]
 800bb40:	9b00      	ldr	r3, [sp, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	dd05      	ble.n	800bb52 <_dtoa_r+0x83a>
 800bb46:	9902      	ldr	r1, [sp, #8]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	4648      	mov	r0, r9
 800bb4c:	f000 fd04 	bl	800c558 <__lshift>
 800bb50:	9002      	str	r0, [sp, #8]
 800bb52:	9b06      	ldr	r3, [sp, #24]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	dd05      	ble.n	800bb64 <_dtoa_r+0x84c>
 800bb58:	4621      	mov	r1, r4
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	4648      	mov	r0, r9
 800bb5e:	f000 fcfb 	bl	800c558 <__lshift>
 800bb62:	4604      	mov	r4, r0
 800bb64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d061      	beq.n	800bc2e <_dtoa_r+0x916>
 800bb6a:	9802      	ldr	r0, [sp, #8]
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	f000 fd5f 	bl	800c630 <__mcmp>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	da5b      	bge.n	800bc2e <_dtoa_r+0x916>
 800bb76:	2300      	movs	r3, #0
 800bb78:	9902      	ldr	r1, [sp, #8]
 800bb7a:	220a      	movs	r2, #10
 800bb7c:	4648      	mov	r0, r9
 800bb7e:	f000 fafd 	bl	800c17c <__multadd>
 800bb82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb84:	9002      	str	r0, [sp, #8]
 800bb86:	f107 38ff 	add.w	r8, r7, #4294967295
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 8177 	beq.w	800be7e <_dtoa_r+0xb66>
 800bb90:	4629      	mov	r1, r5
 800bb92:	2300      	movs	r3, #0
 800bb94:	220a      	movs	r2, #10
 800bb96:	4648      	mov	r0, r9
 800bb98:	f000 faf0 	bl	800c17c <__multadd>
 800bb9c:	f1bb 0f00 	cmp.w	fp, #0
 800bba0:	4605      	mov	r5, r0
 800bba2:	dc6f      	bgt.n	800bc84 <_dtoa_r+0x96c>
 800bba4:	9b07      	ldr	r3, [sp, #28]
 800bba6:	2b02      	cmp	r3, #2
 800bba8:	dc49      	bgt.n	800bc3e <_dtoa_r+0x926>
 800bbaa:	e06b      	b.n	800bc84 <_dtoa_r+0x96c>
 800bbac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bbae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bbb2:	e73c      	b.n	800ba2e <_dtoa_r+0x716>
 800bbb4:	3fe00000 	.word	0x3fe00000
 800bbb8:	40240000 	.word	0x40240000
 800bbbc:	9b03      	ldr	r3, [sp, #12]
 800bbbe:	1e5c      	subs	r4, r3, #1
 800bbc0:	9b08      	ldr	r3, [sp, #32]
 800bbc2:	42a3      	cmp	r3, r4
 800bbc4:	db09      	blt.n	800bbda <_dtoa_r+0x8c2>
 800bbc6:	1b1c      	subs	r4, r3, r4
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f6bf af30 	bge.w	800ba30 <_dtoa_r+0x718>
 800bbd0:	9b00      	ldr	r3, [sp, #0]
 800bbd2:	9a03      	ldr	r2, [sp, #12]
 800bbd4:	1a9e      	subs	r6, r3, r2
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e72b      	b.n	800ba32 <_dtoa_r+0x71a>
 800bbda:	9b08      	ldr	r3, [sp, #32]
 800bbdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bbde:	9408      	str	r4, [sp, #32]
 800bbe0:	1ae3      	subs	r3, r4, r3
 800bbe2:	441a      	add	r2, r3
 800bbe4:	9e00      	ldr	r6, [sp, #0]
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	920d      	str	r2, [sp, #52]	@ 0x34
 800bbea:	2400      	movs	r4, #0
 800bbec:	e721      	b.n	800ba32 <_dtoa_r+0x71a>
 800bbee:	9c08      	ldr	r4, [sp, #32]
 800bbf0:	9e00      	ldr	r6, [sp, #0]
 800bbf2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bbf4:	e728      	b.n	800ba48 <_dtoa_r+0x730>
 800bbf6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bbfa:	e751      	b.n	800baa0 <_dtoa_r+0x788>
 800bbfc:	9a08      	ldr	r2, [sp, #32]
 800bbfe:	9902      	ldr	r1, [sp, #8]
 800bc00:	e750      	b.n	800baa4 <_dtoa_r+0x78c>
 800bc02:	f8cd 8008 	str.w	r8, [sp, #8]
 800bc06:	e751      	b.n	800baac <_dtoa_r+0x794>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e779      	b.n	800bb00 <_dtoa_r+0x7e8>
 800bc0c:	9b04      	ldr	r3, [sp, #16]
 800bc0e:	e777      	b.n	800bb00 <_dtoa_r+0x7e8>
 800bc10:	2300      	movs	r3, #0
 800bc12:	9308      	str	r3, [sp, #32]
 800bc14:	e779      	b.n	800bb0a <_dtoa_r+0x7f2>
 800bc16:	d093      	beq.n	800bb40 <_dtoa_r+0x828>
 800bc18:	9a00      	ldr	r2, [sp, #0]
 800bc1a:	331c      	adds	r3, #28
 800bc1c:	441a      	add	r2, r3
 800bc1e:	9200      	str	r2, [sp, #0]
 800bc20:	9a06      	ldr	r2, [sp, #24]
 800bc22:	441a      	add	r2, r3
 800bc24:	441e      	add	r6, r3
 800bc26:	9206      	str	r2, [sp, #24]
 800bc28:	e78a      	b.n	800bb40 <_dtoa_r+0x828>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	e7f4      	b.n	800bc18 <_dtoa_r+0x900>
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	46b8      	mov	r8, r7
 800bc34:	dc20      	bgt.n	800bc78 <_dtoa_r+0x960>
 800bc36:	469b      	mov	fp, r3
 800bc38:	9b07      	ldr	r3, [sp, #28]
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	dd1e      	ble.n	800bc7c <_dtoa_r+0x964>
 800bc3e:	f1bb 0f00 	cmp.w	fp, #0
 800bc42:	f47f adb1 	bne.w	800b7a8 <_dtoa_r+0x490>
 800bc46:	4621      	mov	r1, r4
 800bc48:	465b      	mov	r3, fp
 800bc4a:	2205      	movs	r2, #5
 800bc4c:	4648      	mov	r0, r9
 800bc4e:	f000 fa95 	bl	800c17c <__multadd>
 800bc52:	4601      	mov	r1, r0
 800bc54:	4604      	mov	r4, r0
 800bc56:	9802      	ldr	r0, [sp, #8]
 800bc58:	f000 fcea 	bl	800c630 <__mcmp>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	f77f ada3 	ble.w	800b7a8 <_dtoa_r+0x490>
 800bc62:	4656      	mov	r6, sl
 800bc64:	2331      	movs	r3, #49	@ 0x31
 800bc66:	f806 3b01 	strb.w	r3, [r6], #1
 800bc6a:	f108 0801 	add.w	r8, r8, #1
 800bc6e:	e59f      	b.n	800b7b0 <_dtoa_r+0x498>
 800bc70:	9c03      	ldr	r4, [sp, #12]
 800bc72:	46b8      	mov	r8, r7
 800bc74:	4625      	mov	r5, r4
 800bc76:	e7f4      	b.n	800bc62 <_dtoa_r+0x94a>
 800bc78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bc7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 8101 	beq.w	800be86 <_dtoa_r+0xb6e>
 800bc84:	2e00      	cmp	r6, #0
 800bc86:	dd05      	ble.n	800bc94 <_dtoa_r+0x97c>
 800bc88:	4629      	mov	r1, r5
 800bc8a:	4632      	mov	r2, r6
 800bc8c:	4648      	mov	r0, r9
 800bc8e:	f000 fc63 	bl	800c558 <__lshift>
 800bc92:	4605      	mov	r5, r0
 800bc94:	9b08      	ldr	r3, [sp, #32]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d05c      	beq.n	800bd54 <_dtoa_r+0xa3c>
 800bc9a:	6869      	ldr	r1, [r5, #4]
 800bc9c:	4648      	mov	r0, r9
 800bc9e:	f000 fa0b 	bl	800c0b8 <_Balloc>
 800bca2:	4606      	mov	r6, r0
 800bca4:	b928      	cbnz	r0, 800bcb2 <_dtoa_r+0x99a>
 800bca6:	4b82      	ldr	r3, [pc, #520]	@ (800beb0 <_dtoa_r+0xb98>)
 800bca8:	4602      	mov	r2, r0
 800bcaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bcae:	f7ff bb4a 	b.w	800b346 <_dtoa_r+0x2e>
 800bcb2:	692a      	ldr	r2, [r5, #16]
 800bcb4:	3202      	adds	r2, #2
 800bcb6:	0092      	lsls	r2, r2, #2
 800bcb8:	f105 010c 	add.w	r1, r5, #12
 800bcbc:	300c      	adds	r0, #12
 800bcbe:	f001 ff69 	bl	800db94 <memcpy>
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	4631      	mov	r1, r6
 800bcc6:	4648      	mov	r0, r9
 800bcc8:	f000 fc46 	bl	800c558 <__lshift>
 800bccc:	f10a 0301 	add.w	r3, sl, #1
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	eb0a 030b 	add.w	r3, sl, fp
 800bcd6:	9308      	str	r3, [sp, #32]
 800bcd8:	9b04      	ldr	r3, [sp, #16]
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	462f      	mov	r7, r5
 800bce0:	9306      	str	r3, [sp, #24]
 800bce2:	4605      	mov	r5, r0
 800bce4:	9b00      	ldr	r3, [sp, #0]
 800bce6:	9802      	ldr	r0, [sp, #8]
 800bce8:	4621      	mov	r1, r4
 800bcea:	f103 3bff 	add.w	fp, r3, #4294967295
 800bcee:	f7ff fa89 	bl	800b204 <quorem>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	3330      	adds	r3, #48	@ 0x30
 800bcf6:	9003      	str	r0, [sp, #12]
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	9802      	ldr	r0, [sp, #8]
 800bcfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcfe:	f000 fc97 	bl	800c630 <__mcmp>
 800bd02:	462a      	mov	r2, r5
 800bd04:	9004      	str	r0, [sp, #16]
 800bd06:	4621      	mov	r1, r4
 800bd08:	4648      	mov	r0, r9
 800bd0a:	f000 fcad 	bl	800c668 <__mdiff>
 800bd0e:	68c2      	ldr	r2, [r0, #12]
 800bd10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd12:	4606      	mov	r6, r0
 800bd14:	bb02      	cbnz	r2, 800bd58 <_dtoa_r+0xa40>
 800bd16:	4601      	mov	r1, r0
 800bd18:	9802      	ldr	r0, [sp, #8]
 800bd1a:	f000 fc89 	bl	800c630 <__mcmp>
 800bd1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd20:	4602      	mov	r2, r0
 800bd22:	4631      	mov	r1, r6
 800bd24:	4648      	mov	r0, r9
 800bd26:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd28:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd2a:	f000 fa05 	bl	800c138 <_Bfree>
 800bd2e:	9b07      	ldr	r3, [sp, #28]
 800bd30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bd32:	9e00      	ldr	r6, [sp, #0]
 800bd34:	ea42 0103 	orr.w	r1, r2, r3
 800bd38:	9b06      	ldr	r3, [sp, #24]
 800bd3a:	4319      	orrs	r1, r3
 800bd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3e:	d10d      	bne.n	800bd5c <_dtoa_r+0xa44>
 800bd40:	2b39      	cmp	r3, #57	@ 0x39
 800bd42:	d027      	beq.n	800bd94 <_dtoa_r+0xa7c>
 800bd44:	9a04      	ldr	r2, [sp, #16]
 800bd46:	2a00      	cmp	r2, #0
 800bd48:	dd01      	ble.n	800bd4e <_dtoa_r+0xa36>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	3331      	adds	r3, #49	@ 0x31
 800bd4e:	f88b 3000 	strb.w	r3, [fp]
 800bd52:	e52e      	b.n	800b7b2 <_dtoa_r+0x49a>
 800bd54:	4628      	mov	r0, r5
 800bd56:	e7b9      	b.n	800bccc <_dtoa_r+0x9b4>
 800bd58:	2201      	movs	r2, #1
 800bd5a:	e7e2      	b.n	800bd22 <_dtoa_r+0xa0a>
 800bd5c:	9904      	ldr	r1, [sp, #16]
 800bd5e:	2900      	cmp	r1, #0
 800bd60:	db04      	blt.n	800bd6c <_dtoa_r+0xa54>
 800bd62:	9807      	ldr	r0, [sp, #28]
 800bd64:	4301      	orrs	r1, r0
 800bd66:	9806      	ldr	r0, [sp, #24]
 800bd68:	4301      	orrs	r1, r0
 800bd6a:	d120      	bne.n	800bdae <_dtoa_r+0xa96>
 800bd6c:	2a00      	cmp	r2, #0
 800bd6e:	ddee      	ble.n	800bd4e <_dtoa_r+0xa36>
 800bd70:	9902      	ldr	r1, [sp, #8]
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	2201      	movs	r2, #1
 800bd76:	4648      	mov	r0, r9
 800bd78:	f000 fbee 	bl	800c558 <__lshift>
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	9002      	str	r0, [sp, #8]
 800bd80:	f000 fc56 	bl	800c630 <__mcmp>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	9b00      	ldr	r3, [sp, #0]
 800bd88:	dc02      	bgt.n	800bd90 <_dtoa_r+0xa78>
 800bd8a:	d1e0      	bne.n	800bd4e <_dtoa_r+0xa36>
 800bd8c:	07da      	lsls	r2, r3, #31
 800bd8e:	d5de      	bpl.n	800bd4e <_dtoa_r+0xa36>
 800bd90:	2b39      	cmp	r3, #57	@ 0x39
 800bd92:	d1da      	bne.n	800bd4a <_dtoa_r+0xa32>
 800bd94:	2339      	movs	r3, #57	@ 0x39
 800bd96:	f88b 3000 	strb.w	r3, [fp]
 800bd9a:	4633      	mov	r3, r6
 800bd9c:	461e      	mov	r6, r3
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bda4:	2a39      	cmp	r2, #57	@ 0x39
 800bda6:	d04e      	beq.n	800be46 <_dtoa_r+0xb2e>
 800bda8:	3201      	adds	r2, #1
 800bdaa:	701a      	strb	r2, [r3, #0]
 800bdac:	e501      	b.n	800b7b2 <_dtoa_r+0x49a>
 800bdae:	2a00      	cmp	r2, #0
 800bdb0:	dd03      	ble.n	800bdba <_dtoa_r+0xaa2>
 800bdb2:	2b39      	cmp	r3, #57	@ 0x39
 800bdb4:	d0ee      	beq.n	800bd94 <_dtoa_r+0xa7c>
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	e7c9      	b.n	800bd4e <_dtoa_r+0xa36>
 800bdba:	9a00      	ldr	r2, [sp, #0]
 800bdbc:	9908      	ldr	r1, [sp, #32]
 800bdbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bdc2:	428a      	cmp	r2, r1
 800bdc4:	d028      	beq.n	800be18 <_dtoa_r+0xb00>
 800bdc6:	9902      	ldr	r1, [sp, #8]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	220a      	movs	r2, #10
 800bdcc:	4648      	mov	r0, r9
 800bdce:	f000 f9d5 	bl	800c17c <__multadd>
 800bdd2:	42af      	cmp	r7, r5
 800bdd4:	9002      	str	r0, [sp, #8]
 800bdd6:	f04f 0300 	mov.w	r3, #0
 800bdda:	f04f 020a 	mov.w	r2, #10
 800bdde:	4639      	mov	r1, r7
 800bde0:	4648      	mov	r0, r9
 800bde2:	d107      	bne.n	800bdf4 <_dtoa_r+0xadc>
 800bde4:	f000 f9ca 	bl	800c17c <__multadd>
 800bde8:	4607      	mov	r7, r0
 800bdea:	4605      	mov	r5, r0
 800bdec:	9b00      	ldr	r3, [sp, #0]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	e777      	b.n	800bce4 <_dtoa_r+0x9cc>
 800bdf4:	f000 f9c2 	bl	800c17c <__multadd>
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	220a      	movs	r2, #10
 800be00:	4648      	mov	r0, r9
 800be02:	f000 f9bb 	bl	800c17c <__multadd>
 800be06:	4605      	mov	r5, r0
 800be08:	e7f0      	b.n	800bdec <_dtoa_r+0xad4>
 800be0a:	f1bb 0f00 	cmp.w	fp, #0
 800be0e:	bfcc      	ite	gt
 800be10:	465e      	movgt	r6, fp
 800be12:	2601      	movle	r6, #1
 800be14:	4456      	add	r6, sl
 800be16:	2700      	movs	r7, #0
 800be18:	9902      	ldr	r1, [sp, #8]
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	2201      	movs	r2, #1
 800be1e:	4648      	mov	r0, r9
 800be20:	f000 fb9a 	bl	800c558 <__lshift>
 800be24:	4621      	mov	r1, r4
 800be26:	9002      	str	r0, [sp, #8]
 800be28:	f000 fc02 	bl	800c630 <__mcmp>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	dcb4      	bgt.n	800bd9a <_dtoa_r+0xa82>
 800be30:	d102      	bne.n	800be38 <_dtoa_r+0xb20>
 800be32:	9b00      	ldr	r3, [sp, #0]
 800be34:	07db      	lsls	r3, r3, #31
 800be36:	d4b0      	bmi.n	800bd9a <_dtoa_r+0xa82>
 800be38:	4633      	mov	r3, r6
 800be3a:	461e      	mov	r6, r3
 800be3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be40:	2a30      	cmp	r2, #48	@ 0x30
 800be42:	d0fa      	beq.n	800be3a <_dtoa_r+0xb22>
 800be44:	e4b5      	b.n	800b7b2 <_dtoa_r+0x49a>
 800be46:	459a      	cmp	sl, r3
 800be48:	d1a8      	bne.n	800bd9c <_dtoa_r+0xa84>
 800be4a:	2331      	movs	r3, #49	@ 0x31
 800be4c:	f108 0801 	add.w	r8, r8, #1
 800be50:	f88a 3000 	strb.w	r3, [sl]
 800be54:	e4ad      	b.n	800b7b2 <_dtoa_r+0x49a>
 800be56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be58:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800beb4 <_dtoa_r+0xb9c>
 800be5c:	b11b      	cbz	r3, 800be66 <_dtoa_r+0xb4e>
 800be5e:	f10a 0308 	add.w	r3, sl, #8
 800be62:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800be64:	6013      	str	r3, [r2, #0]
 800be66:	4650      	mov	r0, sl
 800be68:	b017      	add	sp, #92	@ 0x5c
 800be6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6e:	9b07      	ldr	r3, [sp, #28]
 800be70:	2b01      	cmp	r3, #1
 800be72:	f77f ae2e 	ble.w	800bad2 <_dtoa_r+0x7ba>
 800be76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be78:	9308      	str	r3, [sp, #32]
 800be7a:	2001      	movs	r0, #1
 800be7c:	e64d      	b.n	800bb1a <_dtoa_r+0x802>
 800be7e:	f1bb 0f00 	cmp.w	fp, #0
 800be82:	f77f aed9 	ble.w	800bc38 <_dtoa_r+0x920>
 800be86:	4656      	mov	r6, sl
 800be88:	9802      	ldr	r0, [sp, #8]
 800be8a:	4621      	mov	r1, r4
 800be8c:	f7ff f9ba 	bl	800b204 <quorem>
 800be90:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800be94:	f806 3b01 	strb.w	r3, [r6], #1
 800be98:	eba6 020a 	sub.w	r2, r6, sl
 800be9c:	4593      	cmp	fp, r2
 800be9e:	ddb4      	ble.n	800be0a <_dtoa_r+0xaf2>
 800bea0:	9902      	ldr	r1, [sp, #8]
 800bea2:	2300      	movs	r3, #0
 800bea4:	220a      	movs	r2, #10
 800bea6:	4648      	mov	r0, r9
 800bea8:	f000 f968 	bl	800c17c <__multadd>
 800beac:	9002      	str	r0, [sp, #8]
 800beae:	e7eb      	b.n	800be88 <_dtoa_r+0xb70>
 800beb0:	0800f0a5 	.word	0x0800f0a5
 800beb4:	0800f029 	.word	0x0800f029

0800beb8 <_free_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4605      	mov	r5, r0
 800bebc:	2900      	cmp	r1, #0
 800bebe:	d041      	beq.n	800bf44 <_free_r+0x8c>
 800bec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bec4:	1f0c      	subs	r4, r1, #4
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bfb8      	it	lt
 800beca:	18e4      	addlt	r4, r4, r3
 800becc:	f000 f8e8 	bl	800c0a0 <__malloc_lock>
 800bed0:	4a1d      	ldr	r2, [pc, #116]	@ (800bf48 <_free_r+0x90>)
 800bed2:	6813      	ldr	r3, [r2, #0]
 800bed4:	b933      	cbnz	r3, 800bee4 <_free_r+0x2c>
 800bed6:	6063      	str	r3, [r4, #4]
 800bed8:	6014      	str	r4, [r2, #0]
 800beda:	4628      	mov	r0, r5
 800bedc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bee0:	f000 b8e4 	b.w	800c0ac <__malloc_unlock>
 800bee4:	42a3      	cmp	r3, r4
 800bee6:	d908      	bls.n	800befa <_free_r+0x42>
 800bee8:	6820      	ldr	r0, [r4, #0]
 800beea:	1821      	adds	r1, r4, r0
 800beec:	428b      	cmp	r3, r1
 800beee:	bf01      	itttt	eq
 800bef0:	6819      	ldreq	r1, [r3, #0]
 800bef2:	685b      	ldreq	r3, [r3, #4]
 800bef4:	1809      	addeq	r1, r1, r0
 800bef6:	6021      	streq	r1, [r4, #0]
 800bef8:	e7ed      	b.n	800bed6 <_free_r+0x1e>
 800befa:	461a      	mov	r2, r3
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	b10b      	cbz	r3, 800bf04 <_free_r+0x4c>
 800bf00:	42a3      	cmp	r3, r4
 800bf02:	d9fa      	bls.n	800befa <_free_r+0x42>
 800bf04:	6811      	ldr	r1, [r2, #0]
 800bf06:	1850      	adds	r0, r2, r1
 800bf08:	42a0      	cmp	r0, r4
 800bf0a:	d10b      	bne.n	800bf24 <_free_r+0x6c>
 800bf0c:	6820      	ldr	r0, [r4, #0]
 800bf0e:	4401      	add	r1, r0
 800bf10:	1850      	adds	r0, r2, r1
 800bf12:	4283      	cmp	r3, r0
 800bf14:	6011      	str	r1, [r2, #0]
 800bf16:	d1e0      	bne.n	800beda <_free_r+0x22>
 800bf18:	6818      	ldr	r0, [r3, #0]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	6053      	str	r3, [r2, #4]
 800bf1e:	4408      	add	r0, r1
 800bf20:	6010      	str	r0, [r2, #0]
 800bf22:	e7da      	b.n	800beda <_free_r+0x22>
 800bf24:	d902      	bls.n	800bf2c <_free_r+0x74>
 800bf26:	230c      	movs	r3, #12
 800bf28:	602b      	str	r3, [r5, #0]
 800bf2a:	e7d6      	b.n	800beda <_free_r+0x22>
 800bf2c:	6820      	ldr	r0, [r4, #0]
 800bf2e:	1821      	adds	r1, r4, r0
 800bf30:	428b      	cmp	r3, r1
 800bf32:	bf04      	itt	eq
 800bf34:	6819      	ldreq	r1, [r3, #0]
 800bf36:	685b      	ldreq	r3, [r3, #4]
 800bf38:	6063      	str	r3, [r4, #4]
 800bf3a:	bf04      	itt	eq
 800bf3c:	1809      	addeq	r1, r1, r0
 800bf3e:	6021      	streq	r1, [r4, #0]
 800bf40:	6054      	str	r4, [r2, #4]
 800bf42:	e7ca      	b.n	800beda <_free_r+0x22>
 800bf44:	bd38      	pop	{r3, r4, r5, pc}
 800bf46:	bf00      	nop
 800bf48:	200022e0 	.word	0x200022e0

0800bf4c <malloc>:
 800bf4c:	4b02      	ldr	r3, [pc, #8]	@ (800bf58 <malloc+0xc>)
 800bf4e:	4601      	mov	r1, r0
 800bf50:	6818      	ldr	r0, [r3, #0]
 800bf52:	f000 b825 	b.w	800bfa0 <_malloc_r>
 800bf56:	bf00      	nop
 800bf58:	20000198 	.word	0x20000198

0800bf5c <sbrk_aligned>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	4e0f      	ldr	r6, [pc, #60]	@ (800bf9c <sbrk_aligned+0x40>)
 800bf60:	460c      	mov	r4, r1
 800bf62:	6831      	ldr	r1, [r6, #0]
 800bf64:	4605      	mov	r5, r0
 800bf66:	b911      	cbnz	r1, 800bf6e <sbrk_aligned+0x12>
 800bf68:	f001 fe04 	bl	800db74 <_sbrk_r>
 800bf6c:	6030      	str	r0, [r6, #0]
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4628      	mov	r0, r5
 800bf72:	f001 fdff 	bl	800db74 <_sbrk_r>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d103      	bne.n	800bf82 <sbrk_aligned+0x26>
 800bf7a:	f04f 34ff 	mov.w	r4, #4294967295
 800bf7e:	4620      	mov	r0, r4
 800bf80:	bd70      	pop	{r4, r5, r6, pc}
 800bf82:	1cc4      	adds	r4, r0, #3
 800bf84:	f024 0403 	bic.w	r4, r4, #3
 800bf88:	42a0      	cmp	r0, r4
 800bf8a:	d0f8      	beq.n	800bf7e <sbrk_aligned+0x22>
 800bf8c:	1a21      	subs	r1, r4, r0
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f001 fdf0 	bl	800db74 <_sbrk_r>
 800bf94:	3001      	adds	r0, #1
 800bf96:	d1f2      	bne.n	800bf7e <sbrk_aligned+0x22>
 800bf98:	e7ef      	b.n	800bf7a <sbrk_aligned+0x1e>
 800bf9a:	bf00      	nop
 800bf9c:	200022dc 	.word	0x200022dc

0800bfa0 <_malloc_r>:
 800bfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa4:	1ccd      	adds	r5, r1, #3
 800bfa6:	f025 0503 	bic.w	r5, r5, #3
 800bfaa:	3508      	adds	r5, #8
 800bfac:	2d0c      	cmp	r5, #12
 800bfae:	bf38      	it	cc
 800bfb0:	250c      	movcc	r5, #12
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	db01      	blt.n	800bfbc <_malloc_r+0x1c>
 800bfb8:	42a9      	cmp	r1, r5
 800bfba:	d904      	bls.n	800bfc6 <_malloc_r+0x26>
 800bfbc:	230c      	movs	r3, #12
 800bfbe:	6033      	str	r3, [r6, #0]
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c09c <_malloc_r+0xfc>
 800bfca:	f000 f869 	bl	800c0a0 <__malloc_lock>
 800bfce:	f8d8 3000 	ldr.w	r3, [r8]
 800bfd2:	461c      	mov	r4, r3
 800bfd4:	bb44      	cbnz	r4, 800c028 <_malloc_r+0x88>
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f7ff ffbf 	bl	800bf5c <sbrk_aligned>
 800bfde:	1c43      	adds	r3, r0, #1
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	d158      	bne.n	800c096 <_malloc_r+0xf6>
 800bfe4:	f8d8 4000 	ldr.w	r4, [r8]
 800bfe8:	4627      	mov	r7, r4
 800bfea:	2f00      	cmp	r7, #0
 800bfec:	d143      	bne.n	800c076 <_malloc_r+0xd6>
 800bfee:	2c00      	cmp	r4, #0
 800bff0:	d04b      	beq.n	800c08a <_malloc_r+0xea>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	4639      	mov	r1, r7
 800bff6:	4630      	mov	r0, r6
 800bff8:	eb04 0903 	add.w	r9, r4, r3
 800bffc:	f001 fdba 	bl	800db74 <_sbrk_r>
 800c000:	4581      	cmp	r9, r0
 800c002:	d142      	bne.n	800c08a <_malloc_r+0xea>
 800c004:	6821      	ldr	r1, [r4, #0]
 800c006:	1a6d      	subs	r5, r5, r1
 800c008:	4629      	mov	r1, r5
 800c00a:	4630      	mov	r0, r6
 800c00c:	f7ff ffa6 	bl	800bf5c <sbrk_aligned>
 800c010:	3001      	adds	r0, #1
 800c012:	d03a      	beq.n	800c08a <_malloc_r+0xea>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	442b      	add	r3, r5
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	f8d8 3000 	ldr.w	r3, [r8]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	bb62      	cbnz	r2, 800c07c <_malloc_r+0xdc>
 800c022:	f8c8 7000 	str.w	r7, [r8]
 800c026:	e00f      	b.n	800c048 <_malloc_r+0xa8>
 800c028:	6822      	ldr	r2, [r4, #0]
 800c02a:	1b52      	subs	r2, r2, r5
 800c02c:	d420      	bmi.n	800c070 <_malloc_r+0xd0>
 800c02e:	2a0b      	cmp	r2, #11
 800c030:	d917      	bls.n	800c062 <_malloc_r+0xc2>
 800c032:	1961      	adds	r1, r4, r5
 800c034:	42a3      	cmp	r3, r4
 800c036:	6025      	str	r5, [r4, #0]
 800c038:	bf18      	it	ne
 800c03a:	6059      	strne	r1, [r3, #4]
 800c03c:	6863      	ldr	r3, [r4, #4]
 800c03e:	bf08      	it	eq
 800c040:	f8c8 1000 	streq.w	r1, [r8]
 800c044:	5162      	str	r2, [r4, r5]
 800c046:	604b      	str	r3, [r1, #4]
 800c048:	4630      	mov	r0, r6
 800c04a:	f000 f82f 	bl	800c0ac <__malloc_unlock>
 800c04e:	f104 000b 	add.w	r0, r4, #11
 800c052:	1d23      	adds	r3, r4, #4
 800c054:	f020 0007 	bic.w	r0, r0, #7
 800c058:	1ac2      	subs	r2, r0, r3
 800c05a:	bf1c      	itt	ne
 800c05c:	1a1b      	subne	r3, r3, r0
 800c05e:	50a3      	strne	r3, [r4, r2]
 800c060:	e7af      	b.n	800bfc2 <_malloc_r+0x22>
 800c062:	6862      	ldr	r2, [r4, #4]
 800c064:	42a3      	cmp	r3, r4
 800c066:	bf0c      	ite	eq
 800c068:	f8c8 2000 	streq.w	r2, [r8]
 800c06c:	605a      	strne	r2, [r3, #4]
 800c06e:	e7eb      	b.n	800c048 <_malloc_r+0xa8>
 800c070:	4623      	mov	r3, r4
 800c072:	6864      	ldr	r4, [r4, #4]
 800c074:	e7ae      	b.n	800bfd4 <_malloc_r+0x34>
 800c076:	463c      	mov	r4, r7
 800c078:	687f      	ldr	r7, [r7, #4]
 800c07a:	e7b6      	b.n	800bfea <_malloc_r+0x4a>
 800c07c:	461a      	mov	r2, r3
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	42a3      	cmp	r3, r4
 800c082:	d1fb      	bne.n	800c07c <_malloc_r+0xdc>
 800c084:	2300      	movs	r3, #0
 800c086:	6053      	str	r3, [r2, #4]
 800c088:	e7de      	b.n	800c048 <_malloc_r+0xa8>
 800c08a:	230c      	movs	r3, #12
 800c08c:	6033      	str	r3, [r6, #0]
 800c08e:	4630      	mov	r0, r6
 800c090:	f000 f80c 	bl	800c0ac <__malloc_unlock>
 800c094:	e794      	b.n	800bfc0 <_malloc_r+0x20>
 800c096:	6005      	str	r5, [r0, #0]
 800c098:	e7d6      	b.n	800c048 <_malloc_r+0xa8>
 800c09a:	bf00      	nop
 800c09c:	200022e0 	.word	0x200022e0

0800c0a0 <__malloc_lock>:
 800c0a0:	4801      	ldr	r0, [pc, #4]	@ (800c0a8 <__malloc_lock+0x8>)
 800c0a2:	f7ff b8a6 	b.w	800b1f2 <__retarget_lock_acquire_recursive>
 800c0a6:	bf00      	nop
 800c0a8:	200022d8 	.word	0x200022d8

0800c0ac <__malloc_unlock>:
 800c0ac:	4801      	ldr	r0, [pc, #4]	@ (800c0b4 <__malloc_unlock+0x8>)
 800c0ae:	f7ff b8a1 	b.w	800b1f4 <__retarget_lock_release_recursive>
 800c0b2:	bf00      	nop
 800c0b4:	200022d8 	.word	0x200022d8

0800c0b8 <_Balloc>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	69c6      	ldr	r6, [r0, #28]
 800c0bc:	4604      	mov	r4, r0
 800c0be:	460d      	mov	r5, r1
 800c0c0:	b976      	cbnz	r6, 800c0e0 <_Balloc+0x28>
 800c0c2:	2010      	movs	r0, #16
 800c0c4:	f7ff ff42 	bl	800bf4c <malloc>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	61e0      	str	r0, [r4, #28]
 800c0cc:	b920      	cbnz	r0, 800c0d8 <_Balloc+0x20>
 800c0ce:	4b18      	ldr	r3, [pc, #96]	@ (800c130 <_Balloc+0x78>)
 800c0d0:	4818      	ldr	r0, [pc, #96]	@ (800c134 <_Balloc+0x7c>)
 800c0d2:	216b      	movs	r1, #107	@ 0x6b
 800c0d4:	f001 fd74 	bl	800dbc0 <__assert_func>
 800c0d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0dc:	6006      	str	r6, [r0, #0]
 800c0de:	60c6      	str	r6, [r0, #12]
 800c0e0:	69e6      	ldr	r6, [r4, #28]
 800c0e2:	68f3      	ldr	r3, [r6, #12]
 800c0e4:	b183      	cbz	r3, 800c108 <_Balloc+0x50>
 800c0e6:	69e3      	ldr	r3, [r4, #28]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0ee:	b9b8      	cbnz	r0, 800c120 <_Balloc+0x68>
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c0f6:	1d72      	adds	r2, r6, #5
 800c0f8:	0092      	lsls	r2, r2, #2
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f001 fd7e 	bl	800dbfc <_calloc_r>
 800c100:	b160      	cbz	r0, 800c11c <_Balloc+0x64>
 800c102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c106:	e00e      	b.n	800c126 <_Balloc+0x6e>
 800c108:	2221      	movs	r2, #33	@ 0x21
 800c10a:	2104      	movs	r1, #4
 800c10c:	4620      	mov	r0, r4
 800c10e:	f001 fd75 	bl	800dbfc <_calloc_r>
 800c112:	69e3      	ldr	r3, [r4, #28]
 800c114:	60f0      	str	r0, [r6, #12]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1e4      	bne.n	800c0e6 <_Balloc+0x2e>
 800c11c:	2000      	movs	r0, #0
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	6802      	ldr	r2, [r0, #0]
 800c122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c126:	2300      	movs	r3, #0
 800c128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c12c:	e7f7      	b.n	800c11e <_Balloc+0x66>
 800c12e:	bf00      	nop
 800c130:	0800f036 	.word	0x0800f036
 800c134:	0800f0b6 	.word	0x0800f0b6

0800c138 <_Bfree>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	69c6      	ldr	r6, [r0, #28]
 800c13c:	4605      	mov	r5, r0
 800c13e:	460c      	mov	r4, r1
 800c140:	b976      	cbnz	r6, 800c160 <_Bfree+0x28>
 800c142:	2010      	movs	r0, #16
 800c144:	f7ff ff02 	bl	800bf4c <malloc>
 800c148:	4602      	mov	r2, r0
 800c14a:	61e8      	str	r0, [r5, #28]
 800c14c:	b920      	cbnz	r0, 800c158 <_Bfree+0x20>
 800c14e:	4b09      	ldr	r3, [pc, #36]	@ (800c174 <_Bfree+0x3c>)
 800c150:	4809      	ldr	r0, [pc, #36]	@ (800c178 <_Bfree+0x40>)
 800c152:	218f      	movs	r1, #143	@ 0x8f
 800c154:	f001 fd34 	bl	800dbc0 <__assert_func>
 800c158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c15c:	6006      	str	r6, [r0, #0]
 800c15e:	60c6      	str	r6, [r0, #12]
 800c160:	b13c      	cbz	r4, 800c172 <_Bfree+0x3a>
 800c162:	69eb      	ldr	r3, [r5, #28]
 800c164:	6862      	ldr	r2, [r4, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c16c:	6021      	str	r1, [r4, #0]
 800c16e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c172:	bd70      	pop	{r4, r5, r6, pc}
 800c174:	0800f036 	.word	0x0800f036
 800c178:	0800f0b6 	.word	0x0800f0b6

0800c17c <__multadd>:
 800c17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	690d      	ldr	r5, [r1, #16]
 800c182:	4607      	mov	r7, r0
 800c184:	460c      	mov	r4, r1
 800c186:	461e      	mov	r6, r3
 800c188:	f101 0c14 	add.w	ip, r1, #20
 800c18c:	2000      	movs	r0, #0
 800c18e:	f8dc 3000 	ldr.w	r3, [ip]
 800c192:	b299      	uxth	r1, r3
 800c194:	fb02 6101 	mla	r1, r2, r1, r6
 800c198:	0c1e      	lsrs	r6, r3, #16
 800c19a:	0c0b      	lsrs	r3, r1, #16
 800c19c:	fb02 3306 	mla	r3, r2, r6, r3
 800c1a0:	b289      	uxth	r1, r1
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1a8:	4285      	cmp	r5, r0
 800c1aa:	f84c 1b04 	str.w	r1, [ip], #4
 800c1ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1b2:	dcec      	bgt.n	800c18e <__multadd+0x12>
 800c1b4:	b30e      	cbz	r6, 800c1fa <__multadd+0x7e>
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	42ab      	cmp	r3, r5
 800c1ba:	dc19      	bgt.n	800c1f0 <__multadd+0x74>
 800c1bc:	6861      	ldr	r1, [r4, #4]
 800c1be:	4638      	mov	r0, r7
 800c1c0:	3101      	adds	r1, #1
 800c1c2:	f7ff ff79 	bl	800c0b8 <_Balloc>
 800c1c6:	4680      	mov	r8, r0
 800c1c8:	b928      	cbnz	r0, 800c1d6 <__multadd+0x5a>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c200 <__multadd+0x84>)
 800c1ce:	480d      	ldr	r0, [pc, #52]	@ (800c204 <__multadd+0x88>)
 800c1d0:	21ba      	movs	r1, #186	@ 0xba
 800c1d2:	f001 fcf5 	bl	800dbc0 <__assert_func>
 800c1d6:	6922      	ldr	r2, [r4, #16]
 800c1d8:	3202      	adds	r2, #2
 800c1da:	f104 010c 	add.w	r1, r4, #12
 800c1de:	0092      	lsls	r2, r2, #2
 800c1e0:	300c      	adds	r0, #12
 800c1e2:	f001 fcd7 	bl	800db94 <memcpy>
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	f7ff ffa5 	bl	800c138 <_Bfree>
 800c1ee:	4644      	mov	r4, r8
 800c1f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1f4:	3501      	adds	r5, #1
 800c1f6:	615e      	str	r6, [r3, #20]
 800c1f8:	6125      	str	r5, [r4, #16]
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c200:	0800f0a5 	.word	0x0800f0a5
 800c204:	0800f0b6 	.word	0x0800f0b6

0800c208 <__s2b>:
 800c208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c20c:	460c      	mov	r4, r1
 800c20e:	4615      	mov	r5, r2
 800c210:	461f      	mov	r7, r3
 800c212:	2209      	movs	r2, #9
 800c214:	3308      	adds	r3, #8
 800c216:	4606      	mov	r6, r0
 800c218:	fb93 f3f2 	sdiv	r3, r3, r2
 800c21c:	2100      	movs	r1, #0
 800c21e:	2201      	movs	r2, #1
 800c220:	429a      	cmp	r2, r3
 800c222:	db09      	blt.n	800c238 <__s2b+0x30>
 800c224:	4630      	mov	r0, r6
 800c226:	f7ff ff47 	bl	800c0b8 <_Balloc>
 800c22a:	b940      	cbnz	r0, 800c23e <__s2b+0x36>
 800c22c:	4602      	mov	r2, r0
 800c22e:	4b19      	ldr	r3, [pc, #100]	@ (800c294 <__s2b+0x8c>)
 800c230:	4819      	ldr	r0, [pc, #100]	@ (800c298 <__s2b+0x90>)
 800c232:	21d3      	movs	r1, #211	@ 0xd3
 800c234:	f001 fcc4 	bl	800dbc0 <__assert_func>
 800c238:	0052      	lsls	r2, r2, #1
 800c23a:	3101      	adds	r1, #1
 800c23c:	e7f0      	b.n	800c220 <__s2b+0x18>
 800c23e:	9b08      	ldr	r3, [sp, #32]
 800c240:	6143      	str	r3, [r0, #20]
 800c242:	2d09      	cmp	r5, #9
 800c244:	f04f 0301 	mov.w	r3, #1
 800c248:	6103      	str	r3, [r0, #16]
 800c24a:	dd16      	ble.n	800c27a <__s2b+0x72>
 800c24c:	f104 0909 	add.w	r9, r4, #9
 800c250:	46c8      	mov	r8, r9
 800c252:	442c      	add	r4, r5
 800c254:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c258:	4601      	mov	r1, r0
 800c25a:	3b30      	subs	r3, #48	@ 0x30
 800c25c:	220a      	movs	r2, #10
 800c25e:	4630      	mov	r0, r6
 800c260:	f7ff ff8c 	bl	800c17c <__multadd>
 800c264:	45a0      	cmp	r8, r4
 800c266:	d1f5      	bne.n	800c254 <__s2b+0x4c>
 800c268:	f1a5 0408 	sub.w	r4, r5, #8
 800c26c:	444c      	add	r4, r9
 800c26e:	1b2d      	subs	r5, r5, r4
 800c270:	1963      	adds	r3, r4, r5
 800c272:	42bb      	cmp	r3, r7
 800c274:	db04      	blt.n	800c280 <__s2b+0x78>
 800c276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c27a:	340a      	adds	r4, #10
 800c27c:	2509      	movs	r5, #9
 800c27e:	e7f6      	b.n	800c26e <__s2b+0x66>
 800c280:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c284:	4601      	mov	r1, r0
 800c286:	3b30      	subs	r3, #48	@ 0x30
 800c288:	220a      	movs	r2, #10
 800c28a:	4630      	mov	r0, r6
 800c28c:	f7ff ff76 	bl	800c17c <__multadd>
 800c290:	e7ee      	b.n	800c270 <__s2b+0x68>
 800c292:	bf00      	nop
 800c294:	0800f0a5 	.word	0x0800f0a5
 800c298:	0800f0b6 	.word	0x0800f0b6

0800c29c <__hi0bits>:
 800c29c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	bf36      	itet	cc
 800c2a4:	0403      	lslcc	r3, r0, #16
 800c2a6:	2000      	movcs	r0, #0
 800c2a8:	2010      	movcc	r0, #16
 800c2aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2ae:	bf3c      	itt	cc
 800c2b0:	021b      	lslcc	r3, r3, #8
 800c2b2:	3008      	addcc	r0, #8
 800c2b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2b8:	bf3c      	itt	cc
 800c2ba:	011b      	lslcc	r3, r3, #4
 800c2bc:	3004      	addcc	r0, #4
 800c2be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2c2:	bf3c      	itt	cc
 800c2c4:	009b      	lslcc	r3, r3, #2
 800c2c6:	3002      	addcc	r0, #2
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	db05      	blt.n	800c2d8 <__hi0bits+0x3c>
 800c2cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c2d0:	f100 0001 	add.w	r0, r0, #1
 800c2d4:	bf08      	it	eq
 800c2d6:	2020      	moveq	r0, #32
 800c2d8:	4770      	bx	lr

0800c2da <__lo0bits>:
 800c2da:	6803      	ldr	r3, [r0, #0]
 800c2dc:	4602      	mov	r2, r0
 800c2de:	f013 0007 	ands.w	r0, r3, #7
 800c2e2:	d00b      	beq.n	800c2fc <__lo0bits+0x22>
 800c2e4:	07d9      	lsls	r1, r3, #31
 800c2e6:	d421      	bmi.n	800c32c <__lo0bits+0x52>
 800c2e8:	0798      	lsls	r0, r3, #30
 800c2ea:	bf49      	itett	mi
 800c2ec:	085b      	lsrmi	r3, r3, #1
 800c2ee:	089b      	lsrpl	r3, r3, #2
 800c2f0:	2001      	movmi	r0, #1
 800c2f2:	6013      	strmi	r3, [r2, #0]
 800c2f4:	bf5c      	itt	pl
 800c2f6:	6013      	strpl	r3, [r2, #0]
 800c2f8:	2002      	movpl	r0, #2
 800c2fa:	4770      	bx	lr
 800c2fc:	b299      	uxth	r1, r3
 800c2fe:	b909      	cbnz	r1, 800c304 <__lo0bits+0x2a>
 800c300:	0c1b      	lsrs	r3, r3, #16
 800c302:	2010      	movs	r0, #16
 800c304:	b2d9      	uxtb	r1, r3
 800c306:	b909      	cbnz	r1, 800c30c <__lo0bits+0x32>
 800c308:	3008      	adds	r0, #8
 800c30a:	0a1b      	lsrs	r3, r3, #8
 800c30c:	0719      	lsls	r1, r3, #28
 800c30e:	bf04      	itt	eq
 800c310:	091b      	lsreq	r3, r3, #4
 800c312:	3004      	addeq	r0, #4
 800c314:	0799      	lsls	r1, r3, #30
 800c316:	bf04      	itt	eq
 800c318:	089b      	lsreq	r3, r3, #2
 800c31a:	3002      	addeq	r0, #2
 800c31c:	07d9      	lsls	r1, r3, #31
 800c31e:	d403      	bmi.n	800c328 <__lo0bits+0x4e>
 800c320:	085b      	lsrs	r3, r3, #1
 800c322:	f100 0001 	add.w	r0, r0, #1
 800c326:	d003      	beq.n	800c330 <__lo0bits+0x56>
 800c328:	6013      	str	r3, [r2, #0]
 800c32a:	4770      	bx	lr
 800c32c:	2000      	movs	r0, #0
 800c32e:	4770      	bx	lr
 800c330:	2020      	movs	r0, #32
 800c332:	4770      	bx	lr

0800c334 <__i2b>:
 800c334:	b510      	push	{r4, lr}
 800c336:	460c      	mov	r4, r1
 800c338:	2101      	movs	r1, #1
 800c33a:	f7ff febd 	bl	800c0b8 <_Balloc>
 800c33e:	4602      	mov	r2, r0
 800c340:	b928      	cbnz	r0, 800c34e <__i2b+0x1a>
 800c342:	4b05      	ldr	r3, [pc, #20]	@ (800c358 <__i2b+0x24>)
 800c344:	4805      	ldr	r0, [pc, #20]	@ (800c35c <__i2b+0x28>)
 800c346:	f240 1145 	movw	r1, #325	@ 0x145
 800c34a:	f001 fc39 	bl	800dbc0 <__assert_func>
 800c34e:	2301      	movs	r3, #1
 800c350:	6144      	str	r4, [r0, #20]
 800c352:	6103      	str	r3, [r0, #16]
 800c354:	bd10      	pop	{r4, pc}
 800c356:	bf00      	nop
 800c358:	0800f0a5 	.word	0x0800f0a5
 800c35c:	0800f0b6 	.word	0x0800f0b6

0800c360 <__multiply>:
 800c360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c364:	4617      	mov	r7, r2
 800c366:	690a      	ldr	r2, [r1, #16]
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	bfa8      	it	ge
 800c36e:	463b      	movge	r3, r7
 800c370:	4689      	mov	r9, r1
 800c372:	bfa4      	itt	ge
 800c374:	460f      	movge	r7, r1
 800c376:	4699      	movge	r9, r3
 800c378:	693d      	ldr	r5, [r7, #16]
 800c37a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	6879      	ldr	r1, [r7, #4]
 800c382:	eb05 060a 	add.w	r6, r5, sl
 800c386:	42b3      	cmp	r3, r6
 800c388:	b085      	sub	sp, #20
 800c38a:	bfb8      	it	lt
 800c38c:	3101      	addlt	r1, #1
 800c38e:	f7ff fe93 	bl	800c0b8 <_Balloc>
 800c392:	b930      	cbnz	r0, 800c3a2 <__multiply+0x42>
 800c394:	4602      	mov	r2, r0
 800c396:	4b41      	ldr	r3, [pc, #260]	@ (800c49c <__multiply+0x13c>)
 800c398:	4841      	ldr	r0, [pc, #260]	@ (800c4a0 <__multiply+0x140>)
 800c39a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c39e:	f001 fc0f 	bl	800dbc0 <__assert_func>
 800c3a2:	f100 0414 	add.w	r4, r0, #20
 800c3a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c3aa:	4623      	mov	r3, r4
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4573      	cmp	r3, lr
 800c3b0:	d320      	bcc.n	800c3f4 <__multiply+0x94>
 800c3b2:	f107 0814 	add.w	r8, r7, #20
 800c3b6:	f109 0114 	add.w	r1, r9, #20
 800c3ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c3be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c3c2:	9302      	str	r3, [sp, #8]
 800c3c4:	1beb      	subs	r3, r5, r7
 800c3c6:	3b15      	subs	r3, #21
 800c3c8:	f023 0303 	bic.w	r3, r3, #3
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	3715      	adds	r7, #21
 800c3d0:	42bd      	cmp	r5, r7
 800c3d2:	bf38      	it	cc
 800c3d4:	2304      	movcc	r3, #4
 800c3d6:	9301      	str	r3, [sp, #4]
 800c3d8:	9b02      	ldr	r3, [sp, #8]
 800c3da:	9103      	str	r1, [sp, #12]
 800c3dc:	428b      	cmp	r3, r1
 800c3de:	d80c      	bhi.n	800c3fa <__multiply+0x9a>
 800c3e0:	2e00      	cmp	r6, #0
 800c3e2:	dd03      	ble.n	800c3ec <__multiply+0x8c>
 800c3e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d055      	beq.n	800c498 <__multiply+0x138>
 800c3ec:	6106      	str	r6, [r0, #16]
 800c3ee:	b005      	add	sp, #20
 800c3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f4:	f843 2b04 	str.w	r2, [r3], #4
 800c3f8:	e7d9      	b.n	800c3ae <__multiply+0x4e>
 800c3fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800c3fe:	f1ba 0f00 	cmp.w	sl, #0
 800c402:	d01f      	beq.n	800c444 <__multiply+0xe4>
 800c404:	46c4      	mov	ip, r8
 800c406:	46a1      	mov	r9, r4
 800c408:	2700      	movs	r7, #0
 800c40a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c40e:	f8d9 3000 	ldr.w	r3, [r9]
 800c412:	fa1f fb82 	uxth.w	fp, r2
 800c416:	b29b      	uxth	r3, r3
 800c418:	fb0a 330b 	mla	r3, sl, fp, r3
 800c41c:	443b      	add	r3, r7
 800c41e:	f8d9 7000 	ldr.w	r7, [r9]
 800c422:	0c12      	lsrs	r2, r2, #16
 800c424:	0c3f      	lsrs	r7, r7, #16
 800c426:	fb0a 7202 	mla	r2, sl, r2, r7
 800c42a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c42e:	b29b      	uxth	r3, r3
 800c430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c434:	4565      	cmp	r5, ip
 800c436:	f849 3b04 	str.w	r3, [r9], #4
 800c43a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c43e:	d8e4      	bhi.n	800c40a <__multiply+0xaa>
 800c440:	9b01      	ldr	r3, [sp, #4]
 800c442:	50e7      	str	r7, [r4, r3]
 800c444:	9b03      	ldr	r3, [sp, #12]
 800c446:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c44a:	3104      	adds	r1, #4
 800c44c:	f1b9 0f00 	cmp.w	r9, #0
 800c450:	d020      	beq.n	800c494 <__multiply+0x134>
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	4647      	mov	r7, r8
 800c456:	46a4      	mov	ip, r4
 800c458:	f04f 0a00 	mov.w	sl, #0
 800c45c:	f8b7 b000 	ldrh.w	fp, [r7]
 800c460:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c464:	fb09 220b 	mla	r2, r9, fp, r2
 800c468:	4452      	add	r2, sl
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c470:	f84c 3b04 	str.w	r3, [ip], #4
 800c474:	f857 3b04 	ldr.w	r3, [r7], #4
 800c478:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c47c:	f8bc 3000 	ldrh.w	r3, [ip]
 800c480:	fb09 330a 	mla	r3, r9, sl, r3
 800c484:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c488:	42bd      	cmp	r5, r7
 800c48a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c48e:	d8e5      	bhi.n	800c45c <__multiply+0xfc>
 800c490:	9a01      	ldr	r2, [sp, #4]
 800c492:	50a3      	str	r3, [r4, r2]
 800c494:	3404      	adds	r4, #4
 800c496:	e79f      	b.n	800c3d8 <__multiply+0x78>
 800c498:	3e01      	subs	r6, #1
 800c49a:	e7a1      	b.n	800c3e0 <__multiply+0x80>
 800c49c:	0800f0a5 	.word	0x0800f0a5
 800c4a0:	0800f0b6 	.word	0x0800f0b6

0800c4a4 <__pow5mult>:
 800c4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4a8:	4615      	mov	r5, r2
 800c4aa:	f012 0203 	ands.w	r2, r2, #3
 800c4ae:	4607      	mov	r7, r0
 800c4b0:	460e      	mov	r6, r1
 800c4b2:	d007      	beq.n	800c4c4 <__pow5mult+0x20>
 800c4b4:	4c25      	ldr	r4, [pc, #148]	@ (800c54c <__pow5mult+0xa8>)
 800c4b6:	3a01      	subs	r2, #1
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4be:	f7ff fe5d 	bl	800c17c <__multadd>
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	10ad      	asrs	r5, r5, #2
 800c4c6:	d03d      	beq.n	800c544 <__pow5mult+0xa0>
 800c4c8:	69fc      	ldr	r4, [r7, #28]
 800c4ca:	b97c      	cbnz	r4, 800c4ec <__pow5mult+0x48>
 800c4cc:	2010      	movs	r0, #16
 800c4ce:	f7ff fd3d 	bl	800bf4c <malloc>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	61f8      	str	r0, [r7, #28]
 800c4d6:	b928      	cbnz	r0, 800c4e4 <__pow5mult+0x40>
 800c4d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c550 <__pow5mult+0xac>)
 800c4da:	481e      	ldr	r0, [pc, #120]	@ (800c554 <__pow5mult+0xb0>)
 800c4dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c4e0:	f001 fb6e 	bl	800dbc0 <__assert_func>
 800c4e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4e8:	6004      	str	r4, [r0, #0]
 800c4ea:	60c4      	str	r4, [r0, #12]
 800c4ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c4f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4f4:	b94c      	cbnz	r4, 800c50a <__pow5mult+0x66>
 800c4f6:	f240 2171 	movw	r1, #625	@ 0x271
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	f7ff ff1a 	bl	800c334 <__i2b>
 800c500:	2300      	movs	r3, #0
 800c502:	f8c8 0008 	str.w	r0, [r8, #8]
 800c506:	4604      	mov	r4, r0
 800c508:	6003      	str	r3, [r0, #0]
 800c50a:	f04f 0900 	mov.w	r9, #0
 800c50e:	07eb      	lsls	r3, r5, #31
 800c510:	d50a      	bpl.n	800c528 <__pow5mult+0x84>
 800c512:	4631      	mov	r1, r6
 800c514:	4622      	mov	r2, r4
 800c516:	4638      	mov	r0, r7
 800c518:	f7ff ff22 	bl	800c360 <__multiply>
 800c51c:	4631      	mov	r1, r6
 800c51e:	4680      	mov	r8, r0
 800c520:	4638      	mov	r0, r7
 800c522:	f7ff fe09 	bl	800c138 <_Bfree>
 800c526:	4646      	mov	r6, r8
 800c528:	106d      	asrs	r5, r5, #1
 800c52a:	d00b      	beq.n	800c544 <__pow5mult+0xa0>
 800c52c:	6820      	ldr	r0, [r4, #0]
 800c52e:	b938      	cbnz	r0, 800c540 <__pow5mult+0x9c>
 800c530:	4622      	mov	r2, r4
 800c532:	4621      	mov	r1, r4
 800c534:	4638      	mov	r0, r7
 800c536:	f7ff ff13 	bl	800c360 <__multiply>
 800c53a:	6020      	str	r0, [r4, #0]
 800c53c:	f8c0 9000 	str.w	r9, [r0]
 800c540:	4604      	mov	r4, r0
 800c542:	e7e4      	b.n	800c50e <__pow5mult+0x6a>
 800c544:	4630      	mov	r0, r6
 800c546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c54a:	bf00      	nop
 800c54c:	0800f1c8 	.word	0x0800f1c8
 800c550:	0800f036 	.word	0x0800f036
 800c554:	0800f0b6 	.word	0x0800f0b6

0800c558 <__lshift>:
 800c558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c55c:	460c      	mov	r4, r1
 800c55e:	6849      	ldr	r1, [r1, #4]
 800c560:	6923      	ldr	r3, [r4, #16]
 800c562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c566:	68a3      	ldr	r3, [r4, #8]
 800c568:	4607      	mov	r7, r0
 800c56a:	4691      	mov	r9, r2
 800c56c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c570:	f108 0601 	add.w	r6, r8, #1
 800c574:	42b3      	cmp	r3, r6
 800c576:	db0b      	blt.n	800c590 <__lshift+0x38>
 800c578:	4638      	mov	r0, r7
 800c57a:	f7ff fd9d 	bl	800c0b8 <_Balloc>
 800c57e:	4605      	mov	r5, r0
 800c580:	b948      	cbnz	r0, 800c596 <__lshift+0x3e>
 800c582:	4602      	mov	r2, r0
 800c584:	4b28      	ldr	r3, [pc, #160]	@ (800c628 <__lshift+0xd0>)
 800c586:	4829      	ldr	r0, [pc, #164]	@ (800c62c <__lshift+0xd4>)
 800c588:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c58c:	f001 fb18 	bl	800dbc0 <__assert_func>
 800c590:	3101      	adds	r1, #1
 800c592:	005b      	lsls	r3, r3, #1
 800c594:	e7ee      	b.n	800c574 <__lshift+0x1c>
 800c596:	2300      	movs	r3, #0
 800c598:	f100 0114 	add.w	r1, r0, #20
 800c59c:	f100 0210 	add.w	r2, r0, #16
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	4553      	cmp	r3, sl
 800c5a4:	db33      	blt.n	800c60e <__lshift+0xb6>
 800c5a6:	6920      	ldr	r0, [r4, #16]
 800c5a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5ac:	f104 0314 	add.w	r3, r4, #20
 800c5b0:	f019 091f 	ands.w	r9, r9, #31
 800c5b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5bc:	d02b      	beq.n	800c616 <__lshift+0xbe>
 800c5be:	f1c9 0e20 	rsb	lr, r9, #32
 800c5c2:	468a      	mov	sl, r1
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	6818      	ldr	r0, [r3, #0]
 800c5c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c5cc:	4310      	orrs	r0, r2
 800c5ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5d6:	459c      	cmp	ip, r3
 800c5d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5dc:	d8f3      	bhi.n	800c5c6 <__lshift+0x6e>
 800c5de:	ebac 0304 	sub.w	r3, ip, r4
 800c5e2:	3b15      	subs	r3, #21
 800c5e4:	f023 0303 	bic.w	r3, r3, #3
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	f104 0015 	add.w	r0, r4, #21
 800c5ee:	4560      	cmp	r0, ip
 800c5f0:	bf88      	it	hi
 800c5f2:	2304      	movhi	r3, #4
 800c5f4:	50ca      	str	r2, [r1, r3]
 800c5f6:	b10a      	cbz	r2, 800c5fc <__lshift+0xa4>
 800c5f8:	f108 0602 	add.w	r6, r8, #2
 800c5fc:	3e01      	subs	r6, #1
 800c5fe:	4638      	mov	r0, r7
 800c600:	612e      	str	r6, [r5, #16]
 800c602:	4621      	mov	r1, r4
 800c604:	f7ff fd98 	bl	800c138 <_Bfree>
 800c608:	4628      	mov	r0, r5
 800c60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c60e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c612:	3301      	adds	r3, #1
 800c614:	e7c5      	b.n	800c5a2 <__lshift+0x4a>
 800c616:	3904      	subs	r1, #4
 800c618:	f853 2b04 	ldr.w	r2, [r3], #4
 800c61c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c620:	459c      	cmp	ip, r3
 800c622:	d8f9      	bhi.n	800c618 <__lshift+0xc0>
 800c624:	e7ea      	b.n	800c5fc <__lshift+0xa4>
 800c626:	bf00      	nop
 800c628:	0800f0a5 	.word	0x0800f0a5
 800c62c:	0800f0b6 	.word	0x0800f0b6

0800c630 <__mcmp>:
 800c630:	690a      	ldr	r2, [r1, #16]
 800c632:	4603      	mov	r3, r0
 800c634:	6900      	ldr	r0, [r0, #16]
 800c636:	1a80      	subs	r0, r0, r2
 800c638:	b530      	push	{r4, r5, lr}
 800c63a:	d10e      	bne.n	800c65a <__mcmp+0x2a>
 800c63c:	3314      	adds	r3, #20
 800c63e:	3114      	adds	r1, #20
 800c640:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c644:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c648:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c64c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c650:	4295      	cmp	r5, r2
 800c652:	d003      	beq.n	800c65c <__mcmp+0x2c>
 800c654:	d205      	bcs.n	800c662 <__mcmp+0x32>
 800c656:	f04f 30ff 	mov.w	r0, #4294967295
 800c65a:	bd30      	pop	{r4, r5, pc}
 800c65c:	42a3      	cmp	r3, r4
 800c65e:	d3f3      	bcc.n	800c648 <__mcmp+0x18>
 800c660:	e7fb      	b.n	800c65a <__mcmp+0x2a>
 800c662:	2001      	movs	r0, #1
 800c664:	e7f9      	b.n	800c65a <__mcmp+0x2a>
	...

0800c668 <__mdiff>:
 800c668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	4689      	mov	r9, r1
 800c66e:	4606      	mov	r6, r0
 800c670:	4611      	mov	r1, r2
 800c672:	4648      	mov	r0, r9
 800c674:	4614      	mov	r4, r2
 800c676:	f7ff ffdb 	bl	800c630 <__mcmp>
 800c67a:	1e05      	subs	r5, r0, #0
 800c67c:	d112      	bne.n	800c6a4 <__mdiff+0x3c>
 800c67e:	4629      	mov	r1, r5
 800c680:	4630      	mov	r0, r6
 800c682:	f7ff fd19 	bl	800c0b8 <_Balloc>
 800c686:	4602      	mov	r2, r0
 800c688:	b928      	cbnz	r0, 800c696 <__mdiff+0x2e>
 800c68a:	4b3f      	ldr	r3, [pc, #252]	@ (800c788 <__mdiff+0x120>)
 800c68c:	f240 2137 	movw	r1, #567	@ 0x237
 800c690:	483e      	ldr	r0, [pc, #248]	@ (800c78c <__mdiff+0x124>)
 800c692:	f001 fa95 	bl	800dbc0 <__assert_func>
 800c696:	2301      	movs	r3, #1
 800c698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c69c:	4610      	mov	r0, r2
 800c69e:	b003      	add	sp, #12
 800c6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a4:	bfbc      	itt	lt
 800c6a6:	464b      	movlt	r3, r9
 800c6a8:	46a1      	movlt	r9, r4
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c6b0:	bfba      	itte	lt
 800c6b2:	461c      	movlt	r4, r3
 800c6b4:	2501      	movlt	r5, #1
 800c6b6:	2500      	movge	r5, #0
 800c6b8:	f7ff fcfe 	bl	800c0b8 <_Balloc>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	b918      	cbnz	r0, 800c6c8 <__mdiff+0x60>
 800c6c0:	4b31      	ldr	r3, [pc, #196]	@ (800c788 <__mdiff+0x120>)
 800c6c2:	f240 2145 	movw	r1, #581	@ 0x245
 800c6c6:	e7e3      	b.n	800c690 <__mdiff+0x28>
 800c6c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c6cc:	6926      	ldr	r6, [r4, #16]
 800c6ce:	60c5      	str	r5, [r0, #12]
 800c6d0:	f109 0310 	add.w	r3, r9, #16
 800c6d4:	f109 0514 	add.w	r5, r9, #20
 800c6d8:	f104 0e14 	add.w	lr, r4, #20
 800c6dc:	f100 0b14 	add.w	fp, r0, #20
 800c6e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c6e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c6e8:	9301      	str	r3, [sp, #4]
 800c6ea:	46d9      	mov	r9, fp
 800c6ec:	f04f 0c00 	mov.w	ip, #0
 800c6f0:	9b01      	ldr	r3, [sp, #4]
 800c6f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c6f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c6fa:	9301      	str	r3, [sp, #4]
 800c6fc:	fa1f f38a 	uxth.w	r3, sl
 800c700:	4619      	mov	r1, r3
 800c702:	b283      	uxth	r3, r0
 800c704:	1acb      	subs	r3, r1, r3
 800c706:	0c00      	lsrs	r0, r0, #16
 800c708:	4463      	add	r3, ip
 800c70a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c70e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c712:	b29b      	uxth	r3, r3
 800c714:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c718:	4576      	cmp	r6, lr
 800c71a:	f849 3b04 	str.w	r3, [r9], #4
 800c71e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c722:	d8e5      	bhi.n	800c6f0 <__mdiff+0x88>
 800c724:	1b33      	subs	r3, r6, r4
 800c726:	3b15      	subs	r3, #21
 800c728:	f023 0303 	bic.w	r3, r3, #3
 800c72c:	3415      	adds	r4, #21
 800c72e:	3304      	adds	r3, #4
 800c730:	42a6      	cmp	r6, r4
 800c732:	bf38      	it	cc
 800c734:	2304      	movcc	r3, #4
 800c736:	441d      	add	r5, r3
 800c738:	445b      	add	r3, fp
 800c73a:	461e      	mov	r6, r3
 800c73c:	462c      	mov	r4, r5
 800c73e:	4544      	cmp	r4, r8
 800c740:	d30e      	bcc.n	800c760 <__mdiff+0xf8>
 800c742:	f108 0103 	add.w	r1, r8, #3
 800c746:	1b49      	subs	r1, r1, r5
 800c748:	f021 0103 	bic.w	r1, r1, #3
 800c74c:	3d03      	subs	r5, #3
 800c74e:	45a8      	cmp	r8, r5
 800c750:	bf38      	it	cc
 800c752:	2100      	movcc	r1, #0
 800c754:	440b      	add	r3, r1
 800c756:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c75a:	b191      	cbz	r1, 800c782 <__mdiff+0x11a>
 800c75c:	6117      	str	r7, [r2, #16]
 800c75e:	e79d      	b.n	800c69c <__mdiff+0x34>
 800c760:	f854 1b04 	ldr.w	r1, [r4], #4
 800c764:	46e6      	mov	lr, ip
 800c766:	0c08      	lsrs	r0, r1, #16
 800c768:	fa1c fc81 	uxtah	ip, ip, r1
 800c76c:	4471      	add	r1, lr
 800c76e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c772:	b289      	uxth	r1, r1
 800c774:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c778:	f846 1b04 	str.w	r1, [r6], #4
 800c77c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c780:	e7dd      	b.n	800c73e <__mdiff+0xd6>
 800c782:	3f01      	subs	r7, #1
 800c784:	e7e7      	b.n	800c756 <__mdiff+0xee>
 800c786:	bf00      	nop
 800c788:	0800f0a5 	.word	0x0800f0a5
 800c78c:	0800f0b6 	.word	0x0800f0b6

0800c790 <__ulp>:
 800c790:	b082      	sub	sp, #8
 800c792:	ed8d 0b00 	vstr	d0, [sp]
 800c796:	9a01      	ldr	r2, [sp, #4]
 800c798:	4b0f      	ldr	r3, [pc, #60]	@ (800c7d8 <__ulp+0x48>)
 800c79a:	4013      	ands	r3, r2
 800c79c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	dc08      	bgt.n	800c7b6 <__ulp+0x26>
 800c7a4:	425b      	negs	r3, r3
 800c7a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c7aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7ae:	da04      	bge.n	800c7ba <__ulp+0x2a>
 800c7b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c7b4:	4113      	asrs	r3, r2
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	e008      	b.n	800c7cc <__ulp+0x3c>
 800c7ba:	f1a2 0314 	sub.w	r3, r2, #20
 800c7be:	2b1e      	cmp	r3, #30
 800c7c0:	bfda      	itte	le
 800c7c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c7c6:	40da      	lsrle	r2, r3
 800c7c8:	2201      	movgt	r2, #1
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	4610      	mov	r0, r2
 800c7d0:	ec41 0b10 	vmov	d0, r0, r1
 800c7d4:	b002      	add	sp, #8
 800c7d6:	4770      	bx	lr
 800c7d8:	7ff00000 	.word	0x7ff00000

0800c7dc <__b2d>:
 800c7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e0:	6906      	ldr	r6, [r0, #16]
 800c7e2:	f100 0814 	add.w	r8, r0, #20
 800c7e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7ea:	1f37      	subs	r7, r6, #4
 800c7ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	f7ff fd53 	bl	800c29c <__hi0bits>
 800c7f6:	f1c0 0320 	rsb	r3, r0, #32
 800c7fa:	280a      	cmp	r0, #10
 800c7fc:	600b      	str	r3, [r1, #0]
 800c7fe:	491b      	ldr	r1, [pc, #108]	@ (800c86c <__b2d+0x90>)
 800c800:	dc15      	bgt.n	800c82e <__b2d+0x52>
 800c802:	f1c0 0c0b 	rsb	ip, r0, #11
 800c806:	fa22 f30c 	lsr.w	r3, r2, ip
 800c80a:	45b8      	cmp	r8, r7
 800c80c:	ea43 0501 	orr.w	r5, r3, r1
 800c810:	bf34      	ite	cc
 800c812:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c816:	2300      	movcs	r3, #0
 800c818:	3015      	adds	r0, #21
 800c81a:	fa02 f000 	lsl.w	r0, r2, r0
 800c81e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c822:	4303      	orrs	r3, r0
 800c824:	461c      	mov	r4, r3
 800c826:	ec45 4b10 	vmov	d0, r4, r5
 800c82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c82e:	45b8      	cmp	r8, r7
 800c830:	bf3a      	itte	cc
 800c832:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c836:	f1a6 0708 	subcc.w	r7, r6, #8
 800c83a:	2300      	movcs	r3, #0
 800c83c:	380b      	subs	r0, #11
 800c83e:	d012      	beq.n	800c866 <__b2d+0x8a>
 800c840:	f1c0 0120 	rsb	r1, r0, #32
 800c844:	fa23 f401 	lsr.w	r4, r3, r1
 800c848:	4082      	lsls	r2, r0
 800c84a:	4322      	orrs	r2, r4
 800c84c:	4547      	cmp	r7, r8
 800c84e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c852:	bf8c      	ite	hi
 800c854:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c858:	2200      	movls	r2, #0
 800c85a:	4083      	lsls	r3, r0
 800c85c:	40ca      	lsrs	r2, r1
 800c85e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c862:	4313      	orrs	r3, r2
 800c864:	e7de      	b.n	800c824 <__b2d+0x48>
 800c866:	ea42 0501 	orr.w	r5, r2, r1
 800c86a:	e7db      	b.n	800c824 <__b2d+0x48>
 800c86c:	3ff00000 	.word	0x3ff00000

0800c870 <__d2b>:
 800c870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c874:	460f      	mov	r7, r1
 800c876:	2101      	movs	r1, #1
 800c878:	ec59 8b10 	vmov	r8, r9, d0
 800c87c:	4616      	mov	r6, r2
 800c87e:	f7ff fc1b 	bl	800c0b8 <_Balloc>
 800c882:	4604      	mov	r4, r0
 800c884:	b930      	cbnz	r0, 800c894 <__d2b+0x24>
 800c886:	4602      	mov	r2, r0
 800c888:	4b23      	ldr	r3, [pc, #140]	@ (800c918 <__d2b+0xa8>)
 800c88a:	4824      	ldr	r0, [pc, #144]	@ (800c91c <__d2b+0xac>)
 800c88c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c890:	f001 f996 	bl	800dbc0 <__assert_func>
 800c894:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c89c:	b10d      	cbz	r5, 800c8a2 <__d2b+0x32>
 800c89e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8a2:	9301      	str	r3, [sp, #4]
 800c8a4:	f1b8 0300 	subs.w	r3, r8, #0
 800c8a8:	d023      	beq.n	800c8f2 <__d2b+0x82>
 800c8aa:	4668      	mov	r0, sp
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	f7ff fd14 	bl	800c2da <__lo0bits>
 800c8b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c8b6:	b1d0      	cbz	r0, 800c8ee <__d2b+0x7e>
 800c8b8:	f1c0 0320 	rsb	r3, r0, #32
 800c8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c8c0:	430b      	orrs	r3, r1
 800c8c2:	40c2      	lsrs	r2, r0
 800c8c4:	6163      	str	r3, [r4, #20]
 800c8c6:	9201      	str	r2, [sp, #4]
 800c8c8:	9b01      	ldr	r3, [sp, #4]
 800c8ca:	61a3      	str	r3, [r4, #24]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	bf0c      	ite	eq
 800c8d0:	2201      	moveq	r2, #1
 800c8d2:	2202      	movne	r2, #2
 800c8d4:	6122      	str	r2, [r4, #16]
 800c8d6:	b1a5      	cbz	r5, 800c902 <__d2b+0x92>
 800c8d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8dc:	4405      	add	r5, r0
 800c8de:	603d      	str	r5, [r7, #0]
 800c8e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8e4:	6030      	str	r0, [r6, #0]
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	b003      	add	sp, #12
 800c8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8ee:	6161      	str	r1, [r4, #20]
 800c8f0:	e7ea      	b.n	800c8c8 <__d2b+0x58>
 800c8f2:	a801      	add	r0, sp, #4
 800c8f4:	f7ff fcf1 	bl	800c2da <__lo0bits>
 800c8f8:	9b01      	ldr	r3, [sp, #4]
 800c8fa:	6163      	str	r3, [r4, #20]
 800c8fc:	3020      	adds	r0, #32
 800c8fe:	2201      	movs	r2, #1
 800c900:	e7e8      	b.n	800c8d4 <__d2b+0x64>
 800c902:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c906:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c90a:	6038      	str	r0, [r7, #0]
 800c90c:	6918      	ldr	r0, [r3, #16]
 800c90e:	f7ff fcc5 	bl	800c29c <__hi0bits>
 800c912:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c916:	e7e5      	b.n	800c8e4 <__d2b+0x74>
 800c918:	0800f0a5 	.word	0x0800f0a5
 800c91c:	0800f0b6 	.word	0x0800f0b6

0800c920 <__ratio>:
 800c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c924:	b085      	sub	sp, #20
 800c926:	e9cd 1000 	strd	r1, r0, [sp]
 800c92a:	a902      	add	r1, sp, #8
 800c92c:	f7ff ff56 	bl	800c7dc <__b2d>
 800c930:	9800      	ldr	r0, [sp, #0]
 800c932:	a903      	add	r1, sp, #12
 800c934:	ec55 4b10 	vmov	r4, r5, d0
 800c938:	f7ff ff50 	bl	800c7dc <__b2d>
 800c93c:	9b01      	ldr	r3, [sp, #4]
 800c93e:	6919      	ldr	r1, [r3, #16]
 800c940:	9b00      	ldr	r3, [sp, #0]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	1ac9      	subs	r1, r1, r3
 800c946:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c94a:	1a9b      	subs	r3, r3, r2
 800c94c:	ec5b ab10 	vmov	sl, fp, d0
 800c950:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c954:	2b00      	cmp	r3, #0
 800c956:	bfce      	itee	gt
 800c958:	462a      	movgt	r2, r5
 800c95a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c95e:	465a      	movle	r2, fp
 800c960:	462f      	mov	r7, r5
 800c962:	46d9      	mov	r9, fp
 800c964:	bfcc      	ite	gt
 800c966:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c96a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c96e:	464b      	mov	r3, r9
 800c970:	4652      	mov	r2, sl
 800c972:	4620      	mov	r0, r4
 800c974:	4639      	mov	r1, r7
 800c976:	f7f3 ff71 	bl	800085c <__aeabi_ddiv>
 800c97a:	ec41 0b10 	vmov	d0, r0, r1
 800c97e:	b005      	add	sp, #20
 800c980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c984 <__copybits>:
 800c984:	3901      	subs	r1, #1
 800c986:	b570      	push	{r4, r5, r6, lr}
 800c988:	1149      	asrs	r1, r1, #5
 800c98a:	6914      	ldr	r4, [r2, #16]
 800c98c:	3101      	adds	r1, #1
 800c98e:	f102 0314 	add.w	r3, r2, #20
 800c992:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c996:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c99a:	1f05      	subs	r5, r0, #4
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	d30c      	bcc.n	800c9ba <__copybits+0x36>
 800c9a0:	1aa3      	subs	r3, r4, r2
 800c9a2:	3b11      	subs	r3, #17
 800c9a4:	f023 0303 	bic.w	r3, r3, #3
 800c9a8:	3211      	adds	r2, #17
 800c9aa:	42a2      	cmp	r2, r4
 800c9ac:	bf88      	it	hi
 800c9ae:	2300      	movhi	r3, #0
 800c9b0:	4418      	add	r0, r3
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	4288      	cmp	r0, r1
 800c9b6:	d305      	bcc.n	800c9c4 <__copybits+0x40>
 800c9b8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9be:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9c2:	e7eb      	b.n	800c99c <__copybits+0x18>
 800c9c4:	f840 3b04 	str.w	r3, [r0], #4
 800c9c8:	e7f4      	b.n	800c9b4 <__copybits+0x30>

0800c9ca <__any_on>:
 800c9ca:	f100 0214 	add.w	r2, r0, #20
 800c9ce:	6900      	ldr	r0, [r0, #16]
 800c9d0:	114b      	asrs	r3, r1, #5
 800c9d2:	4298      	cmp	r0, r3
 800c9d4:	b510      	push	{r4, lr}
 800c9d6:	db11      	blt.n	800c9fc <__any_on+0x32>
 800c9d8:	dd0a      	ble.n	800c9f0 <__any_on+0x26>
 800c9da:	f011 011f 	ands.w	r1, r1, #31
 800c9de:	d007      	beq.n	800c9f0 <__any_on+0x26>
 800c9e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9e4:	fa24 f001 	lsr.w	r0, r4, r1
 800c9e8:	fa00 f101 	lsl.w	r1, r0, r1
 800c9ec:	428c      	cmp	r4, r1
 800c9ee:	d10b      	bne.n	800ca08 <__any_on+0x3e>
 800c9f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d803      	bhi.n	800ca00 <__any_on+0x36>
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	bd10      	pop	{r4, pc}
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	e7f7      	b.n	800c9f0 <__any_on+0x26>
 800ca00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca04:	2900      	cmp	r1, #0
 800ca06:	d0f5      	beq.n	800c9f4 <__any_on+0x2a>
 800ca08:	2001      	movs	r0, #1
 800ca0a:	e7f6      	b.n	800c9fa <__any_on+0x30>

0800ca0c <sulp>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	4604      	mov	r4, r0
 800ca10:	460d      	mov	r5, r1
 800ca12:	ec45 4b10 	vmov	d0, r4, r5
 800ca16:	4616      	mov	r6, r2
 800ca18:	f7ff feba 	bl	800c790 <__ulp>
 800ca1c:	ec51 0b10 	vmov	r0, r1, d0
 800ca20:	b17e      	cbz	r6, 800ca42 <sulp+0x36>
 800ca22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	dd09      	ble.n	800ca42 <sulp+0x36>
 800ca2e:	051b      	lsls	r3, r3, #20
 800ca30:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca34:	2400      	movs	r4, #0
 800ca36:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca3a:	4622      	mov	r2, r4
 800ca3c:	462b      	mov	r3, r5
 800ca3e:	f7f3 fde3 	bl	8000608 <__aeabi_dmul>
 800ca42:	ec41 0b10 	vmov	d0, r0, r1
 800ca46:	bd70      	pop	{r4, r5, r6, pc}

0800ca48 <_strtod_l>:
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	b09f      	sub	sp, #124	@ 0x7c
 800ca4e:	460c      	mov	r4, r1
 800ca50:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ca52:	2200      	movs	r2, #0
 800ca54:	921a      	str	r2, [sp, #104]	@ 0x68
 800ca56:	9005      	str	r0, [sp, #20]
 800ca58:	f04f 0a00 	mov.w	sl, #0
 800ca5c:	f04f 0b00 	mov.w	fp, #0
 800ca60:	460a      	mov	r2, r1
 800ca62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca64:	7811      	ldrb	r1, [r2, #0]
 800ca66:	292b      	cmp	r1, #43	@ 0x2b
 800ca68:	d04a      	beq.n	800cb00 <_strtod_l+0xb8>
 800ca6a:	d838      	bhi.n	800cade <_strtod_l+0x96>
 800ca6c:	290d      	cmp	r1, #13
 800ca6e:	d832      	bhi.n	800cad6 <_strtod_l+0x8e>
 800ca70:	2908      	cmp	r1, #8
 800ca72:	d832      	bhi.n	800cada <_strtod_l+0x92>
 800ca74:	2900      	cmp	r1, #0
 800ca76:	d03b      	beq.n	800caf0 <_strtod_l+0xa8>
 800ca78:	2200      	movs	r2, #0
 800ca7a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ca7e:	782a      	ldrb	r2, [r5, #0]
 800ca80:	2a30      	cmp	r2, #48	@ 0x30
 800ca82:	f040 80b2 	bne.w	800cbea <_strtod_l+0x1a2>
 800ca86:	786a      	ldrb	r2, [r5, #1]
 800ca88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca8c:	2a58      	cmp	r2, #88	@ 0x58
 800ca8e:	d16e      	bne.n	800cb6e <_strtod_l+0x126>
 800ca90:	9302      	str	r3, [sp, #8]
 800ca92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	4a8f      	ldr	r2, [pc, #572]	@ (800ccd8 <_strtod_l+0x290>)
 800ca9c:	9805      	ldr	r0, [sp, #20]
 800ca9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800caa0:	a919      	add	r1, sp, #100	@ 0x64
 800caa2:	f001 f927 	bl	800dcf4 <__gethex>
 800caa6:	f010 060f 	ands.w	r6, r0, #15
 800caaa:	4604      	mov	r4, r0
 800caac:	d005      	beq.n	800caba <_strtod_l+0x72>
 800caae:	2e06      	cmp	r6, #6
 800cab0:	d128      	bne.n	800cb04 <_strtod_l+0xbc>
 800cab2:	3501      	adds	r5, #1
 800cab4:	2300      	movs	r3, #0
 800cab6:	9519      	str	r5, [sp, #100]	@ 0x64
 800cab8:	930e      	str	r3, [sp, #56]	@ 0x38
 800caba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f040 858e 	bne.w	800d5de <_strtod_l+0xb96>
 800cac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cac4:	b1cb      	cbz	r3, 800cafa <_strtod_l+0xb2>
 800cac6:	4652      	mov	r2, sl
 800cac8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cacc:	ec43 2b10 	vmov	d0, r2, r3
 800cad0:	b01f      	add	sp, #124	@ 0x7c
 800cad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad6:	2920      	cmp	r1, #32
 800cad8:	d1ce      	bne.n	800ca78 <_strtod_l+0x30>
 800cada:	3201      	adds	r2, #1
 800cadc:	e7c1      	b.n	800ca62 <_strtod_l+0x1a>
 800cade:	292d      	cmp	r1, #45	@ 0x2d
 800cae0:	d1ca      	bne.n	800ca78 <_strtod_l+0x30>
 800cae2:	2101      	movs	r1, #1
 800cae4:	910e      	str	r1, [sp, #56]	@ 0x38
 800cae6:	1c51      	adds	r1, r2, #1
 800cae8:	9119      	str	r1, [sp, #100]	@ 0x64
 800caea:	7852      	ldrb	r2, [r2, #1]
 800caec:	2a00      	cmp	r2, #0
 800caee:	d1c5      	bne.n	800ca7c <_strtod_l+0x34>
 800caf0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800caf2:	9419      	str	r4, [sp, #100]	@ 0x64
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f040 8570 	bne.w	800d5da <_strtod_l+0xb92>
 800cafa:	4652      	mov	r2, sl
 800cafc:	465b      	mov	r3, fp
 800cafe:	e7e5      	b.n	800cacc <_strtod_l+0x84>
 800cb00:	2100      	movs	r1, #0
 800cb02:	e7ef      	b.n	800cae4 <_strtod_l+0x9c>
 800cb04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb06:	b13a      	cbz	r2, 800cb18 <_strtod_l+0xd0>
 800cb08:	2135      	movs	r1, #53	@ 0x35
 800cb0a:	a81c      	add	r0, sp, #112	@ 0x70
 800cb0c:	f7ff ff3a 	bl	800c984 <__copybits>
 800cb10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb12:	9805      	ldr	r0, [sp, #20]
 800cb14:	f7ff fb10 	bl	800c138 <_Bfree>
 800cb18:	3e01      	subs	r6, #1
 800cb1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cb1c:	2e04      	cmp	r6, #4
 800cb1e:	d806      	bhi.n	800cb2e <_strtod_l+0xe6>
 800cb20:	e8df f006 	tbb	[pc, r6]
 800cb24:	201d0314 	.word	0x201d0314
 800cb28:	14          	.byte	0x14
 800cb29:	00          	.byte	0x00
 800cb2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cb2e:	05e1      	lsls	r1, r4, #23
 800cb30:	bf48      	it	mi
 800cb32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb3a:	0d1b      	lsrs	r3, r3, #20
 800cb3c:	051b      	lsls	r3, r3, #20
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1bb      	bne.n	800caba <_strtod_l+0x72>
 800cb42:	f7fe fb2b 	bl	800b19c <__errno>
 800cb46:	2322      	movs	r3, #34	@ 0x22
 800cb48:	6003      	str	r3, [r0, #0]
 800cb4a:	e7b6      	b.n	800caba <_strtod_l+0x72>
 800cb4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cb50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cb54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb5c:	e7e7      	b.n	800cb2e <_strtod_l+0xe6>
 800cb5e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cce0 <_strtod_l+0x298>
 800cb62:	e7e4      	b.n	800cb2e <_strtod_l+0xe6>
 800cb64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cb68:	f04f 3aff 	mov.w	sl, #4294967295
 800cb6c:	e7df      	b.n	800cb2e <_strtod_l+0xe6>
 800cb6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb74:	785b      	ldrb	r3, [r3, #1]
 800cb76:	2b30      	cmp	r3, #48	@ 0x30
 800cb78:	d0f9      	beq.n	800cb6e <_strtod_l+0x126>
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d09d      	beq.n	800caba <_strtod_l+0x72>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	2700      	movs	r7, #0
 800cb82:	9308      	str	r3, [sp, #32]
 800cb84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb86:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb88:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cb8a:	46b9      	mov	r9, r7
 800cb8c:	220a      	movs	r2, #10
 800cb8e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cb90:	7805      	ldrb	r5, [r0, #0]
 800cb92:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cb96:	b2d9      	uxtb	r1, r3
 800cb98:	2909      	cmp	r1, #9
 800cb9a:	d928      	bls.n	800cbee <_strtod_l+0x1a6>
 800cb9c:	494f      	ldr	r1, [pc, #316]	@ (800ccdc <_strtod_l+0x294>)
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f000 ffd6 	bl	800db50 <strncmp>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d032      	beq.n	800cc0e <_strtod_l+0x1c6>
 800cba8:	2000      	movs	r0, #0
 800cbaa:	462a      	mov	r2, r5
 800cbac:	900a      	str	r0, [sp, #40]	@ 0x28
 800cbae:	464d      	mov	r5, r9
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2a65      	cmp	r2, #101	@ 0x65
 800cbb4:	d001      	beq.n	800cbba <_strtod_l+0x172>
 800cbb6:	2a45      	cmp	r2, #69	@ 0x45
 800cbb8:	d114      	bne.n	800cbe4 <_strtod_l+0x19c>
 800cbba:	b91d      	cbnz	r5, 800cbc4 <_strtod_l+0x17c>
 800cbbc:	9a08      	ldr	r2, [sp, #32]
 800cbbe:	4302      	orrs	r2, r0
 800cbc0:	d096      	beq.n	800caf0 <_strtod_l+0xa8>
 800cbc2:	2500      	movs	r5, #0
 800cbc4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cbc6:	1c62      	adds	r2, r4, #1
 800cbc8:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbca:	7862      	ldrb	r2, [r4, #1]
 800cbcc:	2a2b      	cmp	r2, #43	@ 0x2b
 800cbce:	d07a      	beq.n	800ccc6 <_strtod_l+0x27e>
 800cbd0:	2a2d      	cmp	r2, #45	@ 0x2d
 800cbd2:	d07e      	beq.n	800ccd2 <_strtod_l+0x28a>
 800cbd4:	f04f 0c00 	mov.w	ip, #0
 800cbd8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cbdc:	2909      	cmp	r1, #9
 800cbde:	f240 8085 	bls.w	800ccec <_strtod_l+0x2a4>
 800cbe2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cbe4:	f04f 0800 	mov.w	r8, #0
 800cbe8:	e0a5      	b.n	800cd36 <_strtod_l+0x2ee>
 800cbea:	2300      	movs	r3, #0
 800cbec:	e7c8      	b.n	800cb80 <_strtod_l+0x138>
 800cbee:	f1b9 0f08 	cmp.w	r9, #8
 800cbf2:	bfd8      	it	le
 800cbf4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800cbf6:	f100 0001 	add.w	r0, r0, #1
 800cbfa:	bfda      	itte	le
 800cbfc:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc00:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800cc02:	fb02 3707 	mlagt	r7, r2, r7, r3
 800cc06:	f109 0901 	add.w	r9, r9, #1
 800cc0a:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc0c:	e7bf      	b.n	800cb8e <_strtod_l+0x146>
 800cc0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc10:	1c5a      	adds	r2, r3, #1
 800cc12:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc14:	785a      	ldrb	r2, [r3, #1]
 800cc16:	f1b9 0f00 	cmp.w	r9, #0
 800cc1a:	d03b      	beq.n	800cc94 <_strtod_l+0x24c>
 800cc1c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc1e:	464d      	mov	r5, r9
 800cc20:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cc24:	2b09      	cmp	r3, #9
 800cc26:	d912      	bls.n	800cc4e <_strtod_l+0x206>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e7c2      	b.n	800cbb2 <_strtod_l+0x16a>
 800cc2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc2e:	1c5a      	adds	r2, r3, #1
 800cc30:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc32:	785a      	ldrb	r2, [r3, #1]
 800cc34:	3001      	adds	r0, #1
 800cc36:	2a30      	cmp	r2, #48	@ 0x30
 800cc38:	d0f8      	beq.n	800cc2c <_strtod_l+0x1e4>
 800cc3a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc3e:	2b08      	cmp	r3, #8
 800cc40:	f200 84d2 	bhi.w	800d5e8 <_strtod_l+0xba0>
 800cc44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc46:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc48:	2000      	movs	r0, #0
 800cc4a:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	3a30      	subs	r2, #48	@ 0x30
 800cc50:	f100 0301 	add.w	r3, r0, #1
 800cc54:	d018      	beq.n	800cc88 <_strtod_l+0x240>
 800cc56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc58:	4419      	add	r1, r3
 800cc5a:	910a      	str	r1, [sp, #40]	@ 0x28
 800cc5c:	462e      	mov	r6, r5
 800cc5e:	f04f 0e0a 	mov.w	lr, #10
 800cc62:	1c71      	adds	r1, r6, #1
 800cc64:	eba1 0c05 	sub.w	ip, r1, r5
 800cc68:	4563      	cmp	r3, ip
 800cc6a:	dc15      	bgt.n	800cc98 <_strtod_l+0x250>
 800cc6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cc70:	182b      	adds	r3, r5, r0
 800cc72:	2b08      	cmp	r3, #8
 800cc74:	f105 0501 	add.w	r5, r5, #1
 800cc78:	4405      	add	r5, r0
 800cc7a:	dc1a      	bgt.n	800ccb2 <_strtod_l+0x26a>
 800cc7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cc7e:	230a      	movs	r3, #10
 800cc80:	fb03 2301 	mla	r3, r3, r1, r2
 800cc84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc86:	2300      	movs	r3, #0
 800cc88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc8a:	1c51      	adds	r1, r2, #1
 800cc8c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cc8e:	7852      	ldrb	r2, [r2, #1]
 800cc90:	4618      	mov	r0, r3
 800cc92:	e7c5      	b.n	800cc20 <_strtod_l+0x1d8>
 800cc94:	4648      	mov	r0, r9
 800cc96:	e7ce      	b.n	800cc36 <_strtod_l+0x1ee>
 800cc98:	2e08      	cmp	r6, #8
 800cc9a:	dc05      	bgt.n	800cca8 <_strtod_l+0x260>
 800cc9c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cc9e:	fb0e f606 	mul.w	r6, lr, r6
 800cca2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800cca4:	460e      	mov	r6, r1
 800cca6:	e7dc      	b.n	800cc62 <_strtod_l+0x21a>
 800cca8:	2910      	cmp	r1, #16
 800ccaa:	bfd8      	it	le
 800ccac:	fb0e f707 	mulle.w	r7, lr, r7
 800ccb0:	e7f8      	b.n	800cca4 <_strtod_l+0x25c>
 800ccb2:	2b0f      	cmp	r3, #15
 800ccb4:	bfdc      	itt	le
 800ccb6:	230a      	movle	r3, #10
 800ccb8:	fb03 2707 	mlale	r7, r3, r7, r2
 800ccbc:	e7e3      	b.n	800cc86 <_strtod_l+0x23e>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e77a      	b.n	800cbbc <_strtod_l+0x174>
 800ccc6:	f04f 0c00 	mov.w	ip, #0
 800ccca:	1ca2      	adds	r2, r4, #2
 800cccc:	9219      	str	r2, [sp, #100]	@ 0x64
 800ccce:	78a2      	ldrb	r2, [r4, #2]
 800ccd0:	e782      	b.n	800cbd8 <_strtod_l+0x190>
 800ccd2:	f04f 0c01 	mov.w	ip, #1
 800ccd6:	e7f8      	b.n	800ccca <_strtod_l+0x282>
 800ccd8:	0800f2dc 	.word	0x0800f2dc
 800ccdc:	0800f10f 	.word	0x0800f10f
 800cce0:	7ff00000 	.word	0x7ff00000
 800cce4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cce6:	1c51      	adds	r1, r2, #1
 800cce8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ccea:	7852      	ldrb	r2, [r2, #1]
 800ccec:	2a30      	cmp	r2, #48	@ 0x30
 800ccee:	d0f9      	beq.n	800cce4 <_strtod_l+0x29c>
 800ccf0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ccf4:	2908      	cmp	r1, #8
 800ccf6:	f63f af75 	bhi.w	800cbe4 <_strtod_l+0x19c>
 800ccfa:	3a30      	subs	r2, #48	@ 0x30
 800ccfc:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccfe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd00:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cd02:	f04f 080a 	mov.w	r8, #10
 800cd06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd08:	1c56      	adds	r6, r2, #1
 800cd0a:	9619      	str	r6, [sp, #100]	@ 0x64
 800cd0c:	7852      	ldrb	r2, [r2, #1]
 800cd0e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cd12:	f1be 0f09 	cmp.w	lr, #9
 800cd16:	d939      	bls.n	800cd8c <_strtod_l+0x344>
 800cd18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd1a:	1a76      	subs	r6, r6, r1
 800cd1c:	2e08      	cmp	r6, #8
 800cd1e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cd22:	dc03      	bgt.n	800cd2c <_strtod_l+0x2e4>
 800cd24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd26:	4588      	cmp	r8, r1
 800cd28:	bfa8      	it	ge
 800cd2a:	4688      	movge	r8, r1
 800cd2c:	f1bc 0f00 	cmp.w	ip, #0
 800cd30:	d001      	beq.n	800cd36 <_strtod_l+0x2ee>
 800cd32:	f1c8 0800 	rsb	r8, r8, #0
 800cd36:	2d00      	cmp	r5, #0
 800cd38:	d14e      	bne.n	800cdd8 <_strtod_l+0x390>
 800cd3a:	9908      	ldr	r1, [sp, #32]
 800cd3c:	4308      	orrs	r0, r1
 800cd3e:	f47f aebc 	bne.w	800caba <_strtod_l+0x72>
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f47f aed4 	bne.w	800caf0 <_strtod_l+0xa8>
 800cd48:	2a69      	cmp	r2, #105	@ 0x69
 800cd4a:	d028      	beq.n	800cd9e <_strtod_l+0x356>
 800cd4c:	dc25      	bgt.n	800cd9a <_strtod_l+0x352>
 800cd4e:	2a49      	cmp	r2, #73	@ 0x49
 800cd50:	d025      	beq.n	800cd9e <_strtod_l+0x356>
 800cd52:	2a4e      	cmp	r2, #78	@ 0x4e
 800cd54:	f47f aecc 	bne.w	800caf0 <_strtod_l+0xa8>
 800cd58:	499a      	ldr	r1, [pc, #616]	@ (800cfc4 <_strtod_l+0x57c>)
 800cd5a:	a819      	add	r0, sp, #100	@ 0x64
 800cd5c:	f001 f9ec 	bl	800e138 <__match>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	f43f aec5 	beq.w	800caf0 <_strtod_l+0xa8>
 800cd66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2b28      	cmp	r3, #40	@ 0x28
 800cd6c:	d12e      	bne.n	800cdcc <_strtod_l+0x384>
 800cd6e:	4996      	ldr	r1, [pc, #600]	@ (800cfc8 <_strtod_l+0x580>)
 800cd70:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd72:	a819      	add	r0, sp, #100	@ 0x64
 800cd74:	f001 f9f4 	bl	800e160 <__hexnan>
 800cd78:	2805      	cmp	r0, #5
 800cd7a:	d127      	bne.n	800cdcc <_strtod_l+0x384>
 800cd7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd7e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cd82:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cd86:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cd8a:	e696      	b.n	800caba <_strtod_l+0x72>
 800cd8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd8e:	fb08 2101 	mla	r1, r8, r1, r2
 800cd92:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cd96:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd98:	e7b5      	b.n	800cd06 <_strtod_l+0x2be>
 800cd9a:	2a6e      	cmp	r2, #110	@ 0x6e
 800cd9c:	e7da      	b.n	800cd54 <_strtod_l+0x30c>
 800cd9e:	498b      	ldr	r1, [pc, #556]	@ (800cfcc <_strtod_l+0x584>)
 800cda0:	a819      	add	r0, sp, #100	@ 0x64
 800cda2:	f001 f9c9 	bl	800e138 <__match>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f43f aea2 	beq.w	800caf0 <_strtod_l+0xa8>
 800cdac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdae:	4988      	ldr	r1, [pc, #544]	@ (800cfd0 <_strtod_l+0x588>)
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	a819      	add	r0, sp, #100	@ 0x64
 800cdb4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cdb6:	f001 f9bf 	bl	800e138 <__match>
 800cdba:	b910      	cbnz	r0, 800cdc2 <_strtod_l+0x37a>
 800cdbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	9319      	str	r3, [sp, #100]	@ 0x64
 800cdc2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800cfe0 <_strtod_l+0x598>
 800cdc6:	f04f 0a00 	mov.w	sl, #0
 800cdca:	e676      	b.n	800caba <_strtod_l+0x72>
 800cdcc:	4881      	ldr	r0, [pc, #516]	@ (800cfd4 <_strtod_l+0x58c>)
 800cdce:	f000 feef 	bl	800dbb0 <nan>
 800cdd2:	ec5b ab10 	vmov	sl, fp, d0
 800cdd6:	e670      	b.n	800caba <_strtod_l+0x72>
 800cdd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdda:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cddc:	eba8 0303 	sub.w	r3, r8, r3
 800cde0:	f1b9 0f00 	cmp.w	r9, #0
 800cde4:	bf08      	it	eq
 800cde6:	46a9      	moveq	r9, r5
 800cde8:	2d10      	cmp	r5, #16
 800cdea:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdec:	462c      	mov	r4, r5
 800cdee:	bfa8      	it	ge
 800cdf0:	2410      	movge	r4, #16
 800cdf2:	f7f3 fb8f 	bl	8000514 <__aeabi_ui2d>
 800cdf6:	2d09      	cmp	r5, #9
 800cdf8:	4682      	mov	sl, r0
 800cdfa:	468b      	mov	fp, r1
 800cdfc:	dc13      	bgt.n	800ce26 <_strtod_l+0x3de>
 800cdfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f43f ae5a 	beq.w	800caba <_strtod_l+0x72>
 800ce06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce08:	dd78      	ble.n	800cefc <_strtod_l+0x4b4>
 800ce0a:	2b16      	cmp	r3, #22
 800ce0c:	dc5f      	bgt.n	800cece <_strtod_l+0x486>
 800ce0e:	4972      	ldr	r1, [pc, #456]	@ (800cfd8 <_strtod_l+0x590>)
 800ce10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce18:	4652      	mov	r2, sl
 800ce1a:	465b      	mov	r3, fp
 800ce1c:	f7f3 fbf4 	bl	8000608 <__aeabi_dmul>
 800ce20:	4682      	mov	sl, r0
 800ce22:	468b      	mov	fp, r1
 800ce24:	e649      	b.n	800caba <_strtod_l+0x72>
 800ce26:	4b6c      	ldr	r3, [pc, #432]	@ (800cfd8 <_strtod_l+0x590>)
 800ce28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce30:	f7f3 fbea 	bl	8000608 <__aeabi_dmul>
 800ce34:	4682      	mov	sl, r0
 800ce36:	4638      	mov	r0, r7
 800ce38:	468b      	mov	fp, r1
 800ce3a:	f7f3 fb6b 	bl	8000514 <__aeabi_ui2d>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4650      	mov	r0, sl
 800ce44:	4659      	mov	r1, fp
 800ce46:	f7f3 fa29 	bl	800029c <__adddf3>
 800ce4a:	2d0f      	cmp	r5, #15
 800ce4c:	4682      	mov	sl, r0
 800ce4e:	468b      	mov	fp, r1
 800ce50:	ddd5      	ble.n	800cdfe <_strtod_l+0x3b6>
 800ce52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce54:	1b2c      	subs	r4, r5, r4
 800ce56:	441c      	add	r4, r3
 800ce58:	2c00      	cmp	r4, #0
 800ce5a:	f340 8093 	ble.w	800cf84 <_strtod_l+0x53c>
 800ce5e:	f014 030f 	ands.w	r3, r4, #15
 800ce62:	d00a      	beq.n	800ce7a <_strtod_l+0x432>
 800ce64:	495c      	ldr	r1, [pc, #368]	@ (800cfd8 <_strtod_l+0x590>)
 800ce66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce6a:	4652      	mov	r2, sl
 800ce6c:	465b      	mov	r3, fp
 800ce6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce72:	f7f3 fbc9 	bl	8000608 <__aeabi_dmul>
 800ce76:	4682      	mov	sl, r0
 800ce78:	468b      	mov	fp, r1
 800ce7a:	f034 040f 	bics.w	r4, r4, #15
 800ce7e:	d073      	beq.n	800cf68 <_strtod_l+0x520>
 800ce80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ce84:	dd49      	ble.n	800cf1a <_strtod_l+0x4d2>
 800ce86:	2400      	movs	r4, #0
 800ce88:	46a0      	mov	r8, r4
 800ce8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ce8c:	46a1      	mov	r9, r4
 800ce8e:	9a05      	ldr	r2, [sp, #20]
 800ce90:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800cfe0 <_strtod_l+0x598>
 800ce94:	2322      	movs	r3, #34	@ 0x22
 800ce96:	6013      	str	r3, [r2, #0]
 800ce98:	f04f 0a00 	mov.w	sl, #0
 800ce9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f43f ae0b 	beq.w	800caba <_strtod_l+0x72>
 800cea4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cea6:	9805      	ldr	r0, [sp, #20]
 800cea8:	f7ff f946 	bl	800c138 <_Bfree>
 800ceac:	9805      	ldr	r0, [sp, #20]
 800ceae:	4649      	mov	r1, r9
 800ceb0:	f7ff f942 	bl	800c138 <_Bfree>
 800ceb4:	9805      	ldr	r0, [sp, #20]
 800ceb6:	4641      	mov	r1, r8
 800ceb8:	f7ff f93e 	bl	800c138 <_Bfree>
 800cebc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cebe:	9805      	ldr	r0, [sp, #20]
 800cec0:	f7ff f93a 	bl	800c138 <_Bfree>
 800cec4:	9805      	ldr	r0, [sp, #20]
 800cec6:	4621      	mov	r1, r4
 800cec8:	f7ff f936 	bl	800c138 <_Bfree>
 800cecc:	e5f5      	b.n	800caba <_strtod_l+0x72>
 800cece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ced0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ced4:	4293      	cmp	r3, r2
 800ced6:	dbbc      	blt.n	800ce52 <_strtod_l+0x40a>
 800ced8:	4c3f      	ldr	r4, [pc, #252]	@ (800cfd8 <_strtod_l+0x590>)
 800ceda:	f1c5 050f 	rsb	r5, r5, #15
 800cede:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cee2:	4652      	mov	r2, sl
 800cee4:	465b      	mov	r3, fp
 800cee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceea:	f7f3 fb8d 	bl	8000608 <__aeabi_dmul>
 800ceee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cef0:	1b5d      	subs	r5, r3, r5
 800cef2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cef6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cefa:	e78f      	b.n	800ce1c <_strtod_l+0x3d4>
 800cefc:	3316      	adds	r3, #22
 800cefe:	dba8      	blt.n	800ce52 <_strtod_l+0x40a>
 800cf00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf02:	eba3 0808 	sub.w	r8, r3, r8
 800cf06:	4b34      	ldr	r3, [pc, #208]	@ (800cfd8 <_strtod_l+0x590>)
 800cf08:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cf0c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cf10:	4650      	mov	r0, sl
 800cf12:	4659      	mov	r1, fp
 800cf14:	f7f3 fca2 	bl	800085c <__aeabi_ddiv>
 800cf18:	e782      	b.n	800ce20 <_strtod_l+0x3d8>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	4f2f      	ldr	r7, [pc, #188]	@ (800cfdc <_strtod_l+0x594>)
 800cf1e:	1124      	asrs	r4, r4, #4
 800cf20:	4650      	mov	r0, sl
 800cf22:	4659      	mov	r1, fp
 800cf24:	461e      	mov	r6, r3
 800cf26:	2c01      	cmp	r4, #1
 800cf28:	dc21      	bgt.n	800cf6e <_strtod_l+0x526>
 800cf2a:	b10b      	cbz	r3, 800cf30 <_strtod_l+0x4e8>
 800cf2c:	4682      	mov	sl, r0
 800cf2e:	468b      	mov	fp, r1
 800cf30:	492a      	ldr	r1, [pc, #168]	@ (800cfdc <_strtod_l+0x594>)
 800cf32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf3a:	4652      	mov	r2, sl
 800cf3c:	465b      	mov	r3, fp
 800cf3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf42:	f7f3 fb61 	bl	8000608 <__aeabi_dmul>
 800cf46:	4b26      	ldr	r3, [pc, #152]	@ (800cfe0 <_strtod_l+0x598>)
 800cf48:	460a      	mov	r2, r1
 800cf4a:	400b      	ands	r3, r1
 800cf4c:	4925      	ldr	r1, [pc, #148]	@ (800cfe4 <_strtod_l+0x59c>)
 800cf4e:	428b      	cmp	r3, r1
 800cf50:	4682      	mov	sl, r0
 800cf52:	d898      	bhi.n	800ce86 <_strtod_l+0x43e>
 800cf54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cf58:	428b      	cmp	r3, r1
 800cf5a:	bf86      	itte	hi
 800cf5c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800cfe8 <_strtod_l+0x5a0>
 800cf60:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cf68:	2300      	movs	r3, #0
 800cf6a:	9308      	str	r3, [sp, #32]
 800cf6c:	e076      	b.n	800d05c <_strtod_l+0x614>
 800cf6e:	07e2      	lsls	r2, r4, #31
 800cf70:	d504      	bpl.n	800cf7c <_strtod_l+0x534>
 800cf72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf76:	f7f3 fb47 	bl	8000608 <__aeabi_dmul>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	3601      	adds	r6, #1
 800cf7e:	1064      	asrs	r4, r4, #1
 800cf80:	3708      	adds	r7, #8
 800cf82:	e7d0      	b.n	800cf26 <_strtod_l+0x4de>
 800cf84:	d0f0      	beq.n	800cf68 <_strtod_l+0x520>
 800cf86:	4264      	negs	r4, r4
 800cf88:	f014 020f 	ands.w	r2, r4, #15
 800cf8c:	d00a      	beq.n	800cfa4 <_strtod_l+0x55c>
 800cf8e:	4b12      	ldr	r3, [pc, #72]	@ (800cfd8 <_strtod_l+0x590>)
 800cf90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf94:	4650      	mov	r0, sl
 800cf96:	4659      	mov	r1, fp
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	f7f3 fc5e 	bl	800085c <__aeabi_ddiv>
 800cfa0:	4682      	mov	sl, r0
 800cfa2:	468b      	mov	fp, r1
 800cfa4:	1124      	asrs	r4, r4, #4
 800cfa6:	d0df      	beq.n	800cf68 <_strtod_l+0x520>
 800cfa8:	2c1f      	cmp	r4, #31
 800cfaa:	dd1f      	ble.n	800cfec <_strtod_l+0x5a4>
 800cfac:	2400      	movs	r4, #0
 800cfae:	46a0      	mov	r8, r4
 800cfb0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cfb2:	46a1      	mov	r9, r4
 800cfb4:	9a05      	ldr	r2, [sp, #20]
 800cfb6:	2322      	movs	r3, #34	@ 0x22
 800cfb8:	f04f 0a00 	mov.w	sl, #0
 800cfbc:	f04f 0b00 	mov.w	fp, #0
 800cfc0:	6013      	str	r3, [r2, #0]
 800cfc2:	e76b      	b.n	800ce9c <_strtod_l+0x454>
 800cfc4:	0800effd 	.word	0x0800effd
 800cfc8:	0800f2c8 	.word	0x0800f2c8
 800cfcc:	0800eff5 	.word	0x0800eff5
 800cfd0:	0800f02c 	.word	0x0800f02c
 800cfd4:	0800f165 	.word	0x0800f165
 800cfd8:	0800f200 	.word	0x0800f200
 800cfdc:	0800f1d8 	.word	0x0800f1d8
 800cfe0:	7ff00000 	.word	0x7ff00000
 800cfe4:	7ca00000 	.word	0x7ca00000
 800cfe8:	7fefffff 	.word	0x7fefffff
 800cfec:	f014 0310 	ands.w	r3, r4, #16
 800cff0:	bf18      	it	ne
 800cff2:	236a      	movne	r3, #106	@ 0x6a
 800cff4:	4ea9      	ldr	r6, [pc, #676]	@ (800d29c <_strtod_l+0x854>)
 800cff6:	9308      	str	r3, [sp, #32]
 800cff8:	4650      	mov	r0, sl
 800cffa:	4659      	mov	r1, fp
 800cffc:	2300      	movs	r3, #0
 800cffe:	07e7      	lsls	r7, r4, #31
 800d000:	d504      	bpl.n	800d00c <_strtod_l+0x5c4>
 800d002:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d006:	f7f3 faff 	bl	8000608 <__aeabi_dmul>
 800d00a:	2301      	movs	r3, #1
 800d00c:	1064      	asrs	r4, r4, #1
 800d00e:	f106 0608 	add.w	r6, r6, #8
 800d012:	d1f4      	bne.n	800cffe <_strtod_l+0x5b6>
 800d014:	b10b      	cbz	r3, 800d01a <_strtod_l+0x5d2>
 800d016:	4682      	mov	sl, r0
 800d018:	468b      	mov	fp, r1
 800d01a:	9b08      	ldr	r3, [sp, #32]
 800d01c:	b1b3      	cbz	r3, 800d04c <_strtod_l+0x604>
 800d01e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d022:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d026:	2b00      	cmp	r3, #0
 800d028:	4659      	mov	r1, fp
 800d02a:	dd0f      	ble.n	800d04c <_strtod_l+0x604>
 800d02c:	2b1f      	cmp	r3, #31
 800d02e:	dd56      	ble.n	800d0de <_strtod_l+0x696>
 800d030:	2b34      	cmp	r3, #52	@ 0x34
 800d032:	bfde      	ittt	le
 800d034:	f04f 33ff 	movle.w	r3, #4294967295
 800d038:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d03c:	4093      	lslle	r3, r2
 800d03e:	f04f 0a00 	mov.w	sl, #0
 800d042:	bfcc      	ite	gt
 800d044:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d048:	ea03 0b01 	andle.w	fp, r3, r1
 800d04c:	2200      	movs	r2, #0
 800d04e:	2300      	movs	r3, #0
 800d050:	4650      	mov	r0, sl
 800d052:	4659      	mov	r1, fp
 800d054:	f7f3 fd40 	bl	8000ad8 <__aeabi_dcmpeq>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d1a7      	bne.n	800cfac <_strtod_l+0x564>
 800d05c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d062:	9805      	ldr	r0, [sp, #20]
 800d064:	462b      	mov	r3, r5
 800d066:	464a      	mov	r2, r9
 800d068:	f7ff f8ce 	bl	800c208 <__s2b>
 800d06c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d06e:	2800      	cmp	r0, #0
 800d070:	f43f af09 	beq.w	800ce86 <_strtod_l+0x43e>
 800d074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d076:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d078:	2a00      	cmp	r2, #0
 800d07a:	eba3 0308 	sub.w	r3, r3, r8
 800d07e:	bfa8      	it	ge
 800d080:	2300      	movge	r3, #0
 800d082:	9312      	str	r3, [sp, #72]	@ 0x48
 800d084:	2400      	movs	r4, #0
 800d086:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d08a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d08c:	46a0      	mov	r8, r4
 800d08e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d090:	9805      	ldr	r0, [sp, #20]
 800d092:	6859      	ldr	r1, [r3, #4]
 800d094:	f7ff f810 	bl	800c0b8 <_Balloc>
 800d098:	4681      	mov	r9, r0
 800d09a:	2800      	cmp	r0, #0
 800d09c:	f43f aef7 	beq.w	800ce8e <_strtod_l+0x446>
 800d0a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0a2:	691a      	ldr	r2, [r3, #16]
 800d0a4:	3202      	adds	r2, #2
 800d0a6:	f103 010c 	add.w	r1, r3, #12
 800d0aa:	0092      	lsls	r2, r2, #2
 800d0ac:	300c      	adds	r0, #12
 800d0ae:	f000 fd71 	bl	800db94 <memcpy>
 800d0b2:	ec4b ab10 	vmov	d0, sl, fp
 800d0b6:	9805      	ldr	r0, [sp, #20]
 800d0b8:	aa1c      	add	r2, sp, #112	@ 0x70
 800d0ba:	a91b      	add	r1, sp, #108	@ 0x6c
 800d0bc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d0c0:	f7ff fbd6 	bl	800c870 <__d2b>
 800d0c4:	901a      	str	r0, [sp, #104]	@ 0x68
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	f43f aee1 	beq.w	800ce8e <_strtod_l+0x446>
 800d0cc:	9805      	ldr	r0, [sp, #20]
 800d0ce:	2101      	movs	r1, #1
 800d0d0:	f7ff f930 	bl	800c334 <__i2b>
 800d0d4:	4680      	mov	r8, r0
 800d0d6:	b948      	cbnz	r0, 800d0ec <_strtod_l+0x6a4>
 800d0d8:	f04f 0800 	mov.w	r8, #0
 800d0dc:	e6d7      	b.n	800ce8e <_strtod_l+0x446>
 800d0de:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d0e6:	ea03 0a0a 	and.w	sl, r3, sl
 800d0ea:	e7af      	b.n	800d04c <_strtod_l+0x604>
 800d0ec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d0ee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d0f0:	2d00      	cmp	r5, #0
 800d0f2:	bfab      	itete	ge
 800d0f4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d0f6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d0f8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d0fa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d0fc:	bfac      	ite	ge
 800d0fe:	18ef      	addge	r7, r5, r3
 800d100:	1b5e      	sublt	r6, r3, r5
 800d102:	9b08      	ldr	r3, [sp, #32]
 800d104:	1aed      	subs	r5, r5, r3
 800d106:	4415      	add	r5, r2
 800d108:	4b65      	ldr	r3, [pc, #404]	@ (800d2a0 <_strtod_l+0x858>)
 800d10a:	3d01      	subs	r5, #1
 800d10c:	429d      	cmp	r5, r3
 800d10e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d112:	da50      	bge.n	800d1b6 <_strtod_l+0x76e>
 800d114:	1b5b      	subs	r3, r3, r5
 800d116:	2b1f      	cmp	r3, #31
 800d118:	eba2 0203 	sub.w	r2, r2, r3
 800d11c:	f04f 0101 	mov.w	r1, #1
 800d120:	dc3d      	bgt.n	800d19e <_strtod_l+0x756>
 800d122:	fa01 f303 	lsl.w	r3, r1, r3
 800d126:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d128:	2300      	movs	r3, #0
 800d12a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d12c:	18bd      	adds	r5, r7, r2
 800d12e:	9b08      	ldr	r3, [sp, #32]
 800d130:	42af      	cmp	r7, r5
 800d132:	4416      	add	r6, r2
 800d134:	441e      	add	r6, r3
 800d136:	463b      	mov	r3, r7
 800d138:	bfa8      	it	ge
 800d13a:	462b      	movge	r3, r5
 800d13c:	42b3      	cmp	r3, r6
 800d13e:	bfa8      	it	ge
 800d140:	4633      	movge	r3, r6
 800d142:	2b00      	cmp	r3, #0
 800d144:	bfc2      	ittt	gt
 800d146:	1aed      	subgt	r5, r5, r3
 800d148:	1af6      	subgt	r6, r6, r3
 800d14a:	1aff      	subgt	r7, r7, r3
 800d14c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d14e:	2b00      	cmp	r3, #0
 800d150:	dd16      	ble.n	800d180 <_strtod_l+0x738>
 800d152:	4641      	mov	r1, r8
 800d154:	9805      	ldr	r0, [sp, #20]
 800d156:	461a      	mov	r2, r3
 800d158:	f7ff f9a4 	bl	800c4a4 <__pow5mult>
 800d15c:	4680      	mov	r8, r0
 800d15e:	2800      	cmp	r0, #0
 800d160:	d0ba      	beq.n	800d0d8 <_strtod_l+0x690>
 800d162:	4601      	mov	r1, r0
 800d164:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d166:	9805      	ldr	r0, [sp, #20]
 800d168:	f7ff f8fa 	bl	800c360 <__multiply>
 800d16c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d16e:	2800      	cmp	r0, #0
 800d170:	f43f ae8d 	beq.w	800ce8e <_strtod_l+0x446>
 800d174:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d176:	9805      	ldr	r0, [sp, #20]
 800d178:	f7fe ffde 	bl	800c138 <_Bfree>
 800d17c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d17e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d180:	2d00      	cmp	r5, #0
 800d182:	dc1d      	bgt.n	800d1c0 <_strtod_l+0x778>
 800d184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d186:	2b00      	cmp	r3, #0
 800d188:	dd23      	ble.n	800d1d2 <_strtod_l+0x78a>
 800d18a:	4649      	mov	r1, r9
 800d18c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d18e:	9805      	ldr	r0, [sp, #20]
 800d190:	f7ff f988 	bl	800c4a4 <__pow5mult>
 800d194:	4681      	mov	r9, r0
 800d196:	b9e0      	cbnz	r0, 800d1d2 <_strtod_l+0x78a>
 800d198:	f04f 0900 	mov.w	r9, #0
 800d19c:	e677      	b.n	800ce8e <_strtod_l+0x446>
 800d19e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d1a2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d1a6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d1aa:	35e2      	adds	r5, #226	@ 0xe2
 800d1ac:	fa01 f305 	lsl.w	r3, r1, r5
 800d1b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d1b4:	e7ba      	b.n	800d12c <_strtod_l+0x6e4>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1be:	e7b5      	b.n	800d12c <_strtod_l+0x6e4>
 800d1c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1c2:	9805      	ldr	r0, [sp, #20]
 800d1c4:	462a      	mov	r2, r5
 800d1c6:	f7ff f9c7 	bl	800c558 <__lshift>
 800d1ca:	901a      	str	r0, [sp, #104]	@ 0x68
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d1d9      	bne.n	800d184 <_strtod_l+0x73c>
 800d1d0:	e65d      	b.n	800ce8e <_strtod_l+0x446>
 800d1d2:	2e00      	cmp	r6, #0
 800d1d4:	dd07      	ble.n	800d1e6 <_strtod_l+0x79e>
 800d1d6:	4649      	mov	r1, r9
 800d1d8:	9805      	ldr	r0, [sp, #20]
 800d1da:	4632      	mov	r2, r6
 800d1dc:	f7ff f9bc 	bl	800c558 <__lshift>
 800d1e0:	4681      	mov	r9, r0
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	d0d8      	beq.n	800d198 <_strtod_l+0x750>
 800d1e6:	2f00      	cmp	r7, #0
 800d1e8:	dd08      	ble.n	800d1fc <_strtod_l+0x7b4>
 800d1ea:	4641      	mov	r1, r8
 800d1ec:	9805      	ldr	r0, [sp, #20]
 800d1ee:	463a      	mov	r2, r7
 800d1f0:	f7ff f9b2 	bl	800c558 <__lshift>
 800d1f4:	4680      	mov	r8, r0
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	f43f ae49 	beq.w	800ce8e <_strtod_l+0x446>
 800d1fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1fe:	9805      	ldr	r0, [sp, #20]
 800d200:	464a      	mov	r2, r9
 800d202:	f7ff fa31 	bl	800c668 <__mdiff>
 800d206:	4604      	mov	r4, r0
 800d208:	2800      	cmp	r0, #0
 800d20a:	f43f ae40 	beq.w	800ce8e <_strtod_l+0x446>
 800d20e:	68c3      	ldr	r3, [r0, #12]
 800d210:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d212:	2300      	movs	r3, #0
 800d214:	60c3      	str	r3, [r0, #12]
 800d216:	4641      	mov	r1, r8
 800d218:	f7ff fa0a 	bl	800c630 <__mcmp>
 800d21c:	2800      	cmp	r0, #0
 800d21e:	da45      	bge.n	800d2ac <_strtod_l+0x864>
 800d220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d222:	ea53 030a 	orrs.w	r3, r3, sl
 800d226:	d16b      	bne.n	800d300 <_strtod_l+0x8b8>
 800d228:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d167      	bne.n	800d300 <_strtod_l+0x8b8>
 800d230:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d234:	0d1b      	lsrs	r3, r3, #20
 800d236:	051b      	lsls	r3, r3, #20
 800d238:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d23c:	d960      	bls.n	800d300 <_strtod_l+0x8b8>
 800d23e:	6963      	ldr	r3, [r4, #20]
 800d240:	b913      	cbnz	r3, 800d248 <_strtod_l+0x800>
 800d242:	6923      	ldr	r3, [r4, #16]
 800d244:	2b01      	cmp	r3, #1
 800d246:	dd5b      	ble.n	800d300 <_strtod_l+0x8b8>
 800d248:	4621      	mov	r1, r4
 800d24a:	2201      	movs	r2, #1
 800d24c:	9805      	ldr	r0, [sp, #20]
 800d24e:	f7ff f983 	bl	800c558 <__lshift>
 800d252:	4641      	mov	r1, r8
 800d254:	4604      	mov	r4, r0
 800d256:	f7ff f9eb 	bl	800c630 <__mcmp>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	dd50      	ble.n	800d300 <_strtod_l+0x8b8>
 800d25e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d262:	9a08      	ldr	r2, [sp, #32]
 800d264:	0d1b      	lsrs	r3, r3, #20
 800d266:	051b      	lsls	r3, r3, #20
 800d268:	2a00      	cmp	r2, #0
 800d26a:	d06a      	beq.n	800d342 <_strtod_l+0x8fa>
 800d26c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d270:	d867      	bhi.n	800d342 <_strtod_l+0x8fa>
 800d272:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d276:	f67f ae9d 	bls.w	800cfb4 <_strtod_l+0x56c>
 800d27a:	4b0a      	ldr	r3, [pc, #40]	@ (800d2a4 <_strtod_l+0x85c>)
 800d27c:	4650      	mov	r0, sl
 800d27e:	4659      	mov	r1, fp
 800d280:	2200      	movs	r2, #0
 800d282:	f7f3 f9c1 	bl	8000608 <__aeabi_dmul>
 800d286:	4b08      	ldr	r3, [pc, #32]	@ (800d2a8 <_strtod_l+0x860>)
 800d288:	400b      	ands	r3, r1
 800d28a:	4682      	mov	sl, r0
 800d28c:	468b      	mov	fp, r1
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f47f ae08 	bne.w	800cea4 <_strtod_l+0x45c>
 800d294:	9a05      	ldr	r2, [sp, #20]
 800d296:	2322      	movs	r3, #34	@ 0x22
 800d298:	6013      	str	r3, [r2, #0]
 800d29a:	e603      	b.n	800cea4 <_strtod_l+0x45c>
 800d29c:	0800f2f0 	.word	0x0800f2f0
 800d2a0:	fffffc02 	.word	0xfffffc02
 800d2a4:	39500000 	.word	0x39500000
 800d2a8:	7ff00000 	.word	0x7ff00000
 800d2ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d2b0:	d165      	bne.n	800d37e <_strtod_l+0x936>
 800d2b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d2b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2b8:	b35a      	cbz	r2, 800d312 <_strtod_l+0x8ca>
 800d2ba:	4a9f      	ldr	r2, [pc, #636]	@ (800d538 <_strtod_l+0xaf0>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d12b      	bne.n	800d318 <_strtod_l+0x8d0>
 800d2c0:	9b08      	ldr	r3, [sp, #32]
 800d2c2:	4651      	mov	r1, sl
 800d2c4:	b303      	cbz	r3, 800d308 <_strtod_l+0x8c0>
 800d2c6:	4b9d      	ldr	r3, [pc, #628]	@ (800d53c <_strtod_l+0xaf4>)
 800d2c8:	465a      	mov	r2, fp
 800d2ca:	4013      	ands	r3, r2
 800d2cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d4:	d81b      	bhi.n	800d30e <_strtod_l+0x8c6>
 800d2d6:	0d1b      	lsrs	r3, r3, #20
 800d2d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e0:	4299      	cmp	r1, r3
 800d2e2:	d119      	bne.n	800d318 <_strtod_l+0x8d0>
 800d2e4:	4b96      	ldr	r3, [pc, #600]	@ (800d540 <_strtod_l+0xaf8>)
 800d2e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d102      	bne.n	800d2f2 <_strtod_l+0x8aa>
 800d2ec:	3101      	adds	r1, #1
 800d2ee:	f43f adce 	beq.w	800ce8e <_strtod_l+0x446>
 800d2f2:	4b92      	ldr	r3, [pc, #584]	@ (800d53c <_strtod_l+0xaf4>)
 800d2f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2f6:	401a      	ands	r2, r3
 800d2f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d2fc:	f04f 0a00 	mov.w	sl, #0
 800d300:	9b08      	ldr	r3, [sp, #32]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1b9      	bne.n	800d27a <_strtod_l+0x832>
 800d306:	e5cd      	b.n	800cea4 <_strtod_l+0x45c>
 800d308:	f04f 33ff 	mov.w	r3, #4294967295
 800d30c:	e7e8      	b.n	800d2e0 <_strtod_l+0x898>
 800d30e:	4613      	mov	r3, r2
 800d310:	e7e6      	b.n	800d2e0 <_strtod_l+0x898>
 800d312:	ea53 030a 	orrs.w	r3, r3, sl
 800d316:	d0a2      	beq.n	800d25e <_strtod_l+0x816>
 800d318:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d31a:	b1db      	cbz	r3, 800d354 <_strtod_l+0x90c>
 800d31c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d31e:	4213      	tst	r3, r2
 800d320:	d0ee      	beq.n	800d300 <_strtod_l+0x8b8>
 800d322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d324:	9a08      	ldr	r2, [sp, #32]
 800d326:	4650      	mov	r0, sl
 800d328:	4659      	mov	r1, fp
 800d32a:	b1bb      	cbz	r3, 800d35c <_strtod_l+0x914>
 800d32c:	f7ff fb6e 	bl	800ca0c <sulp>
 800d330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d334:	ec53 2b10 	vmov	r2, r3, d0
 800d338:	f7f2 ffb0 	bl	800029c <__adddf3>
 800d33c:	4682      	mov	sl, r0
 800d33e:	468b      	mov	fp, r1
 800d340:	e7de      	b.n	800d300 <_strtod_l+0x8b8>
 800d342:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d346:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d34a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d34e:	f04f 3aff 	mov.w	sl, #4294967295
 800d352:	e7d5      	b.n	800d300 <_strtod_l+0x8b8>
 800d354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d356:	ea13 0f0a 	tst.w	r3, sl
 800d35a:	e7e1      	b.n	800d320 <_strtod_l+0x8d8>
 800d35c:	f7ff fb56 	bl	800ca0c <sulp>
 800d360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d364:	ec53 2b10 	vmov	r2, r3, d0
 800d368:	f7f2 ff96 	bl	8000298 <__aeabi_dsub>
 800d36c:	2200      	movs	r2, #0
 800d36e:	2300      	movs	r3, #0
 800d370:	4682      	mov	sl, r0
 800d372:	468b      	mov	fp, r1
 800d374:	f7f3 fbb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d378:	2800      	cmp	r0, #0
 800d37a:	d0c1      	beq.n	800d300 <_strtod_l+0x8b8>
 800d37c:	e61a      	b.n	800cfb4 <_strtod_l+0x56c>
 800d37e:	4641      	mov	r1, r8
 800d380:	4620      	mov	r0, r4
 800d382:	f7ff facd 	bl	800c920 <__ratio>
 800d386:	ec57 6b10 	vmov	r6, r7, d0
 800d38a:	2200      	movs	r2, #0
 800d38c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d390:	4630      	mov	r0, r6
 800d392:	4639      	mov	r1, r7
 800d394:	f7f3 fbb4 	bl	8000b00 <__aeabi_dcmple>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d06f      	beq.n	800d47c <_strtod_l+0xa34>
 800d39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d17a      	bne.n	800d498 <_strtod_l+0xa50>
 800d3a2:	f1ba 0f00 	cmp.w	sl, #0
 800d3a6:	d158      	bne.n	800d45a <_strtod_l+0xa12>
 800d3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d15a      	bne.n	800d468 <_strtod_l+0xa20>
 800d3b2:	4b64      	ldr	r3, [pc, #400]	@ (800d544 <_strtod_l+0xafc>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	4639      	mov	r1, r7
 800d3ba:	f7f3 fb97 	bl	8000aec <__aeabi_dcmplt>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d159      	bne.n	800d476 <_strtod_l+0xa2e>
 800d3c2:	4630      	mov	r0, r6
 800d3c4:	4639      	mov	r1, r7
 800d3c6:	4b60      	ldr	r3, [pc, #384]	@ (800d548 <_strtod_l+0xb00>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f7f3 f91d 	bl	8000608 <__aeabi_dmul>
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	460f      	mov	r7, r1
 800d3d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d3d6:	9606      	str	r6, [sp, #24]
 800d3d8:	9307      	str	r3, [sp, #28]
 800d3da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3de:	4d57      	ldr	r5, [pc, #348]	@ (800d53c <_strtod_l+0xaf4>)
 800d3e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3e6:	401d      	ands	r5, r3
 800d3e8:	4b58      	ldr	r3, [pc, #352]	@ (800d54c <_strtod_l+0xb04>)
 800d3ea:	429d      	cmp	r5, r3
 800d3ec:	f040 80b2 	bne.w	800d554 <_strtod_l+0xb0c>
 800d3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d3f6:	ec4b ab10 	vmov	d0, sl, fp
 800d3fa:	f7ff f9c9 	bl	800c790 <__ulp>
 800d3fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d402:	ec51 0b10 	vmov	r0, r1, d0
 800d406:	f7f3 f8ff 	bl	8000608 <__aeabi_dmul>
 800d40a:	4652      	mov	r2, sl
 800d40c:	465b      	mov	r3, fp
 800d40e:	f7f2 ff45 	bl	800029c <__adddf3>
 800d412:	460b      	mov	r3, r1
 800d414:	4949      	ldr	r1, [pc, #292]	@ (800d53c <_strtod_l+0xaf4>)
 800d416:	4a4e      	ldr	r2, [pc, #312]	@ (800d550 <_strtod_l+0xb08>)
 800d418:	4019      	ands	r1, r3
 800d41a:	4291      	cmp	r1, r2
 800d41c:	4682      	mov	sl, r0
 800d41e:	d942      	bls.n	800d4a6 <_strtod_l+0xa5e>
 800d420:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d422:	4b47      	ldr	r3, [pc, #284]	@ (800d540 <_strtod_l+0xaf8>)
 800d424:	429a      	cmp	r2, r3
 800d426:	d103      	bne.n	800d430 <_strtod_l+0x9e8>
 800d428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d42a:	3301      	adds	r3, #1
 800d42c:	f43f ad2f 	beq.w	800ce8e <_strtod_l+0x446>
 800d430:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d540 <_strtod_l+0xaf8>
 800d434:	f04f 3aff 	mov.w	sl, #4294967295
 800d438:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d43a:	9805      	ldr	r0, [sp, #20]
 800d43c:	f7fe fe7c 	bl	800c138 <_Bfree>
 800d440:	9805      	ldr	r0, [sp, #20]
 800d442:	4649      	mov	r1, r9
 800d444:	f7fe fe78 	bl	800c138 <_Bfree>
 800d448:	9805      	ldr	r0, [sp, #20]
 800d44a:	4641      	mov	r1, r8
 800d44c:	f7fe fe74 	bl	800c138 <_Bfree>
 800d450:	9805      	ldr	r0, [sp, #20]
 800d452:	4621      	mov	r1, r4
 800d454:	f7fe fe70 	bl	800c138 <_Bfree>
 800d458:	e619      	b.n	800d08e <_strtod_l+0x646>
 800d45a:	f1ba 0f01 	cmp.w	sl, #1
 800d45e:	d103      	bne.n	800d468 <_strtod_l+0xa20>
 800d460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d462:	2b00      	cmp	r3, #0
 800d464:	f43f ada6 	beq.w	800cfb4 <_strtod_l+0x56c>
 800d468:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d518 <_strtod_l+0xad0>
 800d46c:	4f35      	ldr	r7, [pc, #212]	@ (800d544 <_strtod_l+0xafc>)
 800d46e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d472:	2600      	movs	r6, #0
 800d474:	e7b1      	b.n	800d3da <_strtod_l+0x992>
 800d476:	4f34      	ldr	r7, [pc, #208]	@ (800d548 <_strtod_l+0xb00>)
 800d478:	2600      	movs	r6, #0
 800d47a:	e7aa      	b.n	800d3d2 <_strtod_l+0x98a>
 800d47c:	4b32      	ldr	r3, [pc, #200]	@ (800d548 <_strtod_l+0xb00>)
 800d47e:	4630      	mov	r0, r6
 800d480:	4639      	mov	r1, r7
 800d482:	2200      	movs	r2, #0
 800d484:	f7f3 f8c0 	bl	8000608 <__aeabi_dmul>
 800d488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d48a:	4606      	mov	r6, r0
 800d48c:	460f      	mov	r7, r1
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d09f      	beq.n	800d3d2 <_strtod_l+0x98a>
 800d492:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d496:	e7a0      	b.n	800d3da <_strtod_l+0x992>
 800d498:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d520 <_strtod_l+0xad8>
 800d49c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4a0:	ec57 6b17 	vmov	r6, r7, d7
 800d4a4:	e799      	b.n	800d3da <_strtod_l+0x992>
 800d4a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d4aa:	9b08      	ldr	r3, [sp, #32]
 800d4ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d1c1      	bne.n	800d438 <_strtod_l+0x9f0>
 800d4b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4b8:	0d1b      	lsrs	r3, r3, #20
 800d4ba:	051b      	lsls	r3, r3, #20
 800d4bc:	429d      	cmp	r5, r3
 800d4be:	d1bb      	bne.n	800d438 <_strtod_l+0x9f0>
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	4639      	mov	r1, r7
 800d4c4:	f7f3 fc00 	bl	8000cc8 <__aeabi_d2lz>
 800d4c8:	f7f3 f870 	bl	80005ac <__aeabi_l2d>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	f7f2 fee0 	bl	8000298 <__aeabi_dsub>
 800d4d8:	460b      	mov	r3, r1
 800d4da:	4602      	mov	r2, r0
 800d4dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d4e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4e6:	ea46 060a 	orr.w	r6, r6, sl
 800d4ea:	431e      	orrs	r6, r3
 800d4ec:	d06f      	beq.n	800d5ce <_strtod_l+0xb86>
 800d4ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800d528 <_strtod_l+0xae0>)
 800d4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f4:	f7f3 fafa 	bl	8000aec <__aeabi_dcmplt>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	f47f acd3 	bne.w	800cea4 <_strtod_l+0x45c>
 800d4fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800d530 <_strtod_l+0xae8>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d508:	f7f3 fb0e 	bl	8000b28 <__aeabi_dcmpgt>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d093      	beq.n	800d438 <_strtod_l+0x9f0>
 800d510:	e4c8      	b.n	800cea4 <_strtod_l+0x45c>
 800d512:	bf00      	nop
 800d514:	f3af 8000 	nop.w
 800d518:	00000000 	.word	0x00000000
 800d51c:	bff00000 	.word	0xbff00000
 800d520:	00000000 	.word	0x00000000
 800d524:	3ff00000 	.word	0x3ff00000
 800d528:	94a03595 	.word	0x94a03595
 800d52c:	3fdfffff 	.word	0x3fdfffff
 800d530:	35afe535 	.word	0x35afe535
 800d534:	3fe00000 	.word	0x3fe00000
 800d538:	000fffff 	.word	0x000fffff
 800d53c:	7ff00000 	.word	0x7ff00000
 800d540:	7fefffff 	.word	0x7fefffff
 800d544:	3ff00000 	.word	0x3ff00000
 800d548:	3fe00000 	.word	0x3fe00000
 800d54c:	7fe00000 	.word	0x7fe00000
 800d550:	7c9fffff 	.word	0x7c9fffff
 800d554:	9b08      	ldr	r3, [sp, #32]
 800d556:	b323      	cbz	r3, 800d5a2 <_strtod_l+0xb5a>
 800d558:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d55c:	d821      	bhi.n	800d5a2 <_strtod_l+0xb5a>
 800d55e:	a328      	add	r3, pc, #160	@ (adr r3, 800d600 <_strtod_l+0xbb8>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	4630      	mov	r0, r6
 800d566:	4639      	mov	r1, r7
 800d568:	f7f3 faca 	bl	8000b00 <__aeabi_dcmple>
 800d56c:	b1a0      	cbz	r0, 800d598 <_strtod_l+0xb50>
 800d56e:	4639      	mov	r1, r7
 800d570:	4630      	mov	r0, r6
 800d572:	f7f3 fb21 	bl	8000bb8 <__aeabi_d2uiz>
 800d576:	2801      	cmp	r0, #1
 800d578:	bf38      	it	cc
 800d57a:	2001      	movcc	r0, #1
 800d57c:	f7f2 ffca 	bl	8000514 <__aeabi_ui2d>
 800d580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d582:	4606      	mov	r6, r0
 800d584:	460f      	mov	r7, r1
 800d586:	b9fb      	cbnz	r3, 800d5c8 <_strtod_l+0xb80>
 800d588:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d58c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d58e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d590:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d594:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d598:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d59a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d59e:	1b5b      	subs	r3, r3, r5
 800d5a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d5a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d5a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d5aa:	f7ff f8f1 	bl	800c790 <__ulp>
 800d5ae:	4650      	mov	r0, sl
 800d5b0:	ec53 2b10 	vmov	r2, r3, d0
 800d5b4:	4659      	mov	r1, fp
 800d5b6:	f7f3 f827 	bl	8000608 <__aeabi_dmul>
 800d5ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d5be:	f7f2 fe6d 	bl	800029c <__adddf3>
 800d5c2:	4682      	mov	sl, r0
 800d5c4:	468b      	mov	fp, r1
 800d5c6:	e770      	b.n	800d4aa <_strtod_l+0xa62>
 800d5c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d5cc:	e7e0      	b.n	800d590 <_strtod_l+0xb48>
 800d5ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800d608 <_strtod_l+0xbc0>)
 800d5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d4:	f7f3 fa8a 	bl	8000aec <__aeabi_dcmplt>
 800d5d8:	e798      	b.n	800d50c <_strtod_l+0xac4>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800d5de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d5e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5e2:	6013      	str	r3, [r2, #0]
 800d5e4:	f7ff ba6d 	b.w	800cac2 <_strtod_l+0x7a>
 800d5e8:	2a65      	cmp	r2, #101	@ 0x65
 800d5ea:	f43f ab68 	beq.w	800ccbe <_strtod_l+0x276>
 800d5ee:	2a45      	cmp	r2, #69	@ 0x45
 800d5f0:	f43f ab65 	beq.w	800ccbe <_strtod_l+0x276>
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	f7ff bba0 	b.w	800cd3a <_strtod_l+0x2f2>
 800d5fa:	bf00      	nop
 800d5fc:	f3af 8000 	nop.w
 800d600:	ffc00000 	.word	0xffc00000
 800d604:	41dfffff 	.word	0x41dfffff
 800d608:	94a03595 	.word	0x94a03595
 800d60c:	3fcfffff 	.word	0x3fcfffff

0800d610 <_strtod_r>:
 800d610:	4b01      	ldr	r3, [pc, #4]	@ (800d618 <_strtod_r+0x8>)
 800d612:	f7ff ba19 	b.w	800ca48 <_strtod_l>
 800d616:	bf00      	nop
 800d618:	200001e8 	.word	0x200001e8

0800d61c <_strtol_l.isra.0>:
 800d61c:	2b24      	cmp	r3, #36	@ 0x24
 800d61e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d622:	4686      	mov	lr, r0
 800d624:	4690      	mov	r8, r2
 800d626:	d801      	bhi.n	800d62c <_strtol_l.isra.0+0x10>
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d106      	bne.n	800d63a <_strtol_l.isra.0+0x1e>
 800d62c:	f7fd fdb6 	bl	800b19c <__errno>
 800d630:	2316      	movs	r3, #22
 800d632:	6003      	str	r3, [r0, #0]
 800d634:	2000      	movs	r0, #0
 800d636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d63a:	4834      	ldr	r0, [pc, #208]	@ (800d70c <_strtol_l.isra.0+0xf0>)
 800d63c:	460d      	mov	r5, r1
 800d63e:	462a      	mov	r2, r5
 800d640:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d644:	5d06      	ldrb	r6, [r0, r4]
 800d646:	f016 0608 	ands.w	r6, r6, #8
 800d64a:	d1f8      	bne.n	800d63e <_strtol_l.isra.0+0x22>
 800d64c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d64e:	d110      	bne.n	800d672 <_strtol_l.isra.0+0x56>
 800d650:	782c      	ldrb	r4, [r5, #0]
 800d652:	2601      	movs	r6, #1
 800d654:	1c95      	adds	r5, r2, #2
 800d656:	f033 0210 	bics.w	r2, r3, #16
 800d65a:	d115      	bne.n	800d688 <_strtol_l.isra.0+0x6c>
 800d65c:	2c30      	cmp	r4, #48	@ 0x30
 800d65e:	d10d      	bne.n	800d67c <_strtol_l.isra.0+0x60>
 800d660:	782a      	ldrb	r2, [r5, #0]
 800d662:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d666:	2a58      	cmp	r2, #88	@ 0x58
 800d668:	d108      	bne.n	800d67c <_strtol_l.isra.0+0x60>
 800d66a:	786c      	ldrb	r4, [r5, #1]
 800d66c:	3502      	adds	r5, #2
 800d66e:	2310      	movs	r3, #16
 800d670:	e00a      	b.n	800d688 <_strtol_l.isra.0+0x6c>
 800d672:	2c2b      	cmp	r4, #43	@ 0x2b
 800d674:	bf04      	itt	eq
 800d676:	782c      	ldrbeq	r4, [r5, #0]
 800d678:	1c95      	addeq	r5, r2, #2
 800d67a:	e7ec      	b.n	800d656 <_strtol_l.isra.0+0x3a>
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1f6      	bne.n	800d66e <_strtol_l.isra.0+0x52>
 800d680:	2c30      	cmp	r4, #48	@ 0x30
 800d682:	bf14      	ite	ne
 800d684:	230a      	movne	r3, #10
 800d686:	2308      	moveq	r3, #8
 800d688:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d68c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d690:	2200      	movs	r2, #0
 800d692:	fbbc f9f3 	udiv	r9, ip, r3
 800d696:	4610      	mov	r0, r2
 800d698:	fb03 ca19 	mls	sl, r3, r9, ip
 800d69c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d6a0:	2f09      	cmp	r7, #9
 800d6a2:	d80f      	bhi.n	800d6c4 <_strtol_l.isra.0+0xa8>
 800d6a4:	463c      	mov	r4, r7
 800d6a6:	42a3      	cmp	r3, r4
 800d6a8:	dd1b      	ble.n	800d6e2 <_strtol_l.isra.0+0xc6>
 800d6aa:	1c57      	adds	r7, r2, #1
 800d6ac:	d007      	beq.n	800d6be <_strtol_l.isra.0+0xa2>
 800d6ae:	4581      	cmp	r9, r0
 800d6b0:	d314      	bcc.n	800d6dc <_strtol_l.isra.0+0xc0>
 800d6b2:	d101      	bne.n	800d6b8 <_strtol_l.isra.0+0x9c>
 800d6b4:	45a2      	cmp	sl, r4
 800d6b6:	db11      	blt.n	800d6dc <_strtol_l.isra.0+0xc0>
 800d6b8:	fb00 4003 	mla	r0, r0, r3, r4
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6c2:	e7eb      	b.n	800d69c <_strtol_l.isra.0+0x80>
 800d6c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d6c8:	2f19      	cmp	r7, #25
 800d6ca:	d801      	bhi.n	800d6d0 <_strtol_l.isra.0+0xb4>
 800d6cc:	3c37      	subs	r4, #55	@ 0x37
 800d6ce:	e7ea      	b.n	800d6a6 <_strtol_l.isra.0+0x8a>
 800d6d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d6d4:	2f19      	cmp	r7, #25
 800d6d6:	d804      	bhi.n	800d6e2 <_strtol_l.isra.0+0xc6>
 800d6d8:	3c57      	subs	r4, #87	@ 0x57
 800d6da:	e7e4      	b.n	800d6a6 <_strtol_l.isra.0+0x8a>
 800d6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e0:	e7ed      	b.n	800d6be <_strtol_l.isra.0+0xa2>
 800d6e2:	1c53      	adds	r3, r2, #1
 800d6e4:	d108      	bne.n	800d6f8 <_strtol_l.isra.0+0xdc>
 800d6e6:	2322      	movs	r3, #34	@ 0x22
 800d6e8:	f8ce 3000 	str.w	r3, [lr]
 800d6ec:	4660      	mov	r0, ip
 800d6ee:	f1b8 0f00 	cmp.w	r8, #0
 800d6f2:	d0a0      	beq.n	800d636 <_strtol_l.isra.0+0x1a>
 800d6f4:	1e69      	subs	r1, r5, #1
 800d6f6:	e006      	b.n	800d706 <_strtol_l.isra.0+0xea>
 800d6f8:	b106      	cbz	r6, 800d6fc <_strtol_l.isra.0+0xe0>
 800d6fa:	4240      	negs	r0, r0
 800d6fc:	f1b8 0f00 	cmp.w	r8, #0
 800d700:	d099      	beq.n	800d636 <_strtol_l.isra.0+0x1a>
 800d702:	2a00      	cmp	r2, #0
 800d704:	d1f6      	bne.n	800d6f4 <_strtol_l.isra.0+0xd8>
 800d706:	f8c8 1000 	str.w	r1, [r8]
 800d70a:	e794      	b.n	800d636 <_strtol_l.isra.0+0x1a>
 800d70c:	0800f319 	.word	0x0800f319

0800d710 <_strtol_r>:
 800d710:	f7ff bf84 	b.w	800d61c <_strtol_l.isra.0>

0800d714 <__ssputs_r>:
 800d714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d718:	688e      	ldr	r6, [r1, #8]
 800d71a:	461f      	mov	r7, r3
 800d71c:	42be      	cmp	r6, r7
 800d71e:	680b      	ldr	r3, [r1, #0]
 800d720:	4682      	mov	sl, r0
 800d722:	460c      	mov	r4, r1
 800d724:	4690      	mov	r8, r2
 800d726:	d82d      	bhi.n	800d784 <__ssputs_r+0x70>
 800d728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d72c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d730:	d026      	beq.n	800d780 <__ssputs_r+0x6c>
 800d732:	6965      	ldr	r5, [r4, #20]
 800d734:	6909      	ldr	r1, [r1, #16]
 800d736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d73a:	eba3 0901 	sub.w	r9, r3, r1
 800d73e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d742:	1c7b      	adds	r3, r7, #1
 800d744:	444b      	add	r3, r9
 800d746:	106d      	asrs	r5, r5, #1
 800d748:	429d      	cmp	r5, r3
 800d74a:	bf38      	it	cc
 800d74c:	461d      	movcc	r5, r3
 800d74e:	0553      	lsls	r3, r2, #21
 800d750:	d527      	bpl.n	800d7a2 <__ssputs_r+0x8e>
 800d752:	4629      	mov	r1, r5
 800d754:	f7fe fc24 	bl	800bfa0 <_malloc_r>
 800d758:	4606      	mov	r6, r0
 800d75a:	b360      	cbz	r0, 800d7b6 <__ssputs_r+0xa2>
 800d75c:	6921      	ldr	r1, [r4, #16]
 800d75e:	464a      	mov	r2, r9
 800d760:	f000 fa18 	bl	800db94 <memcpy>
 800d764:	89a3      	ldrh	r3, [r4, #12]
 800d766:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d76a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d76e:	81a3      	strh	r3, [r4, #12]
 800d770:	6126      	str	r6, [r4, #16]
 800d772:	6165      	str	r5, [r4, #20]
 800d774:	444e      	add	r6, r9
 800d776:	eba5 0509 	sub.w	r5, r5, r9
 800d77a:	6026      	str	r6, [r4, #0]
 800d77c:	60a5      	str	r5, [r4, #8]
 800d77e:	463e      	mov	r6, r7
 800d780:	42be      	cmp	r6, r7
 800d782:	d900      	bls.n	800d786 <__ssputs_r+0x72>
 800d784:	463e      	mov	r6, r7
 800d786:	6820      	ldr	r0, [r4, #0]
 800d788:	4632      	mov	r2, r6
 800d78a:	4641      	mov	r1, r8
 800d78c:	f000 f9c6 	bl	800db1c <memmove>
 800d790:	68a3      	ldr	r3, [r4, #8]
 800d792:	1b9b      	subs	r3, r3, r6
 800d794:	60a3      	str	r3, [r4, #8]
 800d796:	6823      	ldr	r3, [r4, #0]
 800d798:	4433      	add	r3, r6
 800d79a:	6023      	str	r3, [r4, #0]
 800d79c:	2000      	movs	r0, #0
 800d79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	f000 fd89 	bl	800e2ba <_realloc_r>
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d1e0      	bne.n	800d770 <__ssputs_r+0x5c>
 800d7ae:	6921      	ldr	r1, [r4, #16]
 800d7b0:	4650      	mov	r0, sl
 800d7b2:	f7fe fb81 	bl	800beb8 <_free_r>
 800d7b6:	230c      	movs	r3, #12
 800d7b8:	f8ca 3000 	str.w	r3, [sl]
 800d7bc:	89a3      	ldrh	r3, [r4, #12]
 800d7be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7c2:	81a3      	strh	r3, [r4, #12]
 800d7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c8:	e7e9      	b.n	800d79e <__ssputs_r+0x8a>
	...

0800d7cc <_svfiprintf_r>:
 800d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d0:	4698      	mov	r8, r3
 800d7d2:	898b      	ldrh	r3, [r1, #12]
 800d7d4:	061b      	lsls	r3, r3, #24
 800d7d6:	b09d      	sub	sp, #116	@ 0x74
 800d7d8:	4607      	mov	r7, r0
 800d7da:	460d      	mov	r5, r1
 800d7dc:	4614      	mov	r4, r2
 800d7de:	d510      	bpl.n	800d802 <_svfiprintf_r+0x36>
 800d7e0:	690b      	ldr	r3, [r1, #16]
 800d7e2:	b973      	cbnz	r3, 800d802 <_svfiprintf_r+0x36>
 800d7e4:	2140      	movs	r1, #64	@ 0x40
 800d7e6:	f7fe fbdb 	bl	800bfa0 <_malloc_r>
 800d7ea:	6028      	str	r0, [r5, #0]
 800d7ec:	6128      	str	r0, [r5, #16]
 800d7ee:	b930      	cbnz	r0, 800d7fe <_svfiprintf_r+0x32>
 800d7f0:	230c      	movs	r3, #12
 800d7f2:	603b      	str	r3, [r7, #0]
 800d7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f8:	b01d      	add	sp, #116	@ 0x74
 800d7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7fe:	2340      	movs	r3, #64	@ 0x40
 800d800:	616b      	str	r3, [r5, #20]
 800d802:	2300      	movs	r3, #0
 800d804:	9309      	str	r3, [sp, #36]	@ 0x24
 800d806:	2320      	movs	r3, #32
 800d808:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d80c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d810:	2330      	movs	r3, #48	@ 0x30
 800d812:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d9b0 <_svfiprintf_r+0x1e4>
 800d816:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d81a:	f04f 0901 	mov.w	r9, #1
 800d81e:	4623      	mov	r3, r4
 800d820:	469a      	mov	sl, r3
 800d822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d826:	b10a      	cbz	r2, 800d82c <_svfiprintf_r+0x60>
 800d828:	2a25      	cmp	r2, #37	@ 0x25
 800d82a:	d1f9      	bne.n	800d820 <_svfiprintf_r+0x54>
 800d82c:	ebba 0b04 	subs.w	fp, sl, r4
 800d830:	d00b      	beq.n	800d84a <_svfiprintf_r+0x7e>
 800d832:	465b      	mov	r3, fp
 800d834:	4622      	mov	r2, r4
 800d836:	4629      	mov	r1, r5
 800d838:	4638      	mov	r0, r7
 800d83a:	f7ff ff6b 	bl	800d714 <__ssputs_r>
 800d83e:	3001      	adds	r0, #1
 800d840:	f000 80a7 	beq.w	800d992 <_svfiprintf_r+0x1c6>
 800d844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d846:	445a      	add	r2, fp
 800d848:	9209      	str	r2, [sp, #36]	@ 0x24
 800d84a:	f89a 3000 	ldrb.w	r3, [sl]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f000 809f 	beq.w	800d992 <_svfiprintf_r+0x1c6>
 800d854:	2300      	movs	r3, #0
 800d856:	f04f 32ff 	mov.w	r2, #4294967295
 800d85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d85e:	f10a 0a01 	add.w	sl, sl, #1
 800d862:	9304      	str	r3, [sp, #16]
 800d864:	9307      	str	r3, [sp, #28]
 800d866:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d86a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d86c:	4654      	mov	r4, sl
 800d86e:	2205      	movs	r2, #5
 800d870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d874:	484e      	ldr	r0, [pc, #312]	@ (800d9b0 <_svfiprintf_r+0x1e4>)
 800d876:	f7f2 fcb3 	bl	80001e0 <memchr>
 800d87a:	9a04      	ldr	r2, [sp, #16]
 800d87c:	b9d8      	cbnz	r0, 800d8b6 <_svfiprintf_r+0xea>
 800d87e:	06d0      	lsls	r0, r2, #27
 800d880:	bf44      	itt	mi
 800d882:	2320      	movmi	r3, #32
 800d884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d888:	0711      	lsls	r1, r2, #28
 800d88a:	bf44      	itt	mi
 800d88c:	232b      	movmi	r3, #43	@ 0x2b
 800d88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d892:	f89a 3000 	ldrb.w	r3, [sl]
 800d896:	2b2a      	cmp	r3, #42	@ 0x2a
 800d898:	d015      	beq.n	800d8c6 <_svfiprintf_r+0xfa>
 800d89a:	9a07      	ldr	r2, [sp, #28]
 800d89c:	4654      	mov	r4, sl
 800d89e:	2000      	movs	r0, #0
 800d8a0:	f04f 0c0a 	mov.w	ip, #10
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8aa:	3b30      	subs	r3, #48	@ 0x30
 800d8ac:	2b09      	cmp	r3, #9
 800d8ae:	d94b      	bls.n	800d948 <_svfiprintf_r+0x17c>
 800d8b0:	b1b0      	cbz	r0, 800d8e0 <_svfiprintf_r+0x114>
 800d8b2:	9207      	str	r2, [sp, #28]
 800d8b4:	e014      	b.n	800d8e0 <_svfiprintf_r+0x114>
 800d8b6:	eba0 0308 	sub.w	r3, r0, r8
 800d8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	9304      	str	r3, [sp, #16]
 800d8c2:	46a2      	mov	sl, r4
 800d8c4:	e7d2      	b.n	800d86c <_svfiprintf_r+0xa0>
 800d8c6:	9b03      	ldr	r3, [sp, #12]
 800d8c8:	1d19      	adds	r1, r3, #4
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	9103      	str	r1, [sp, #12]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	bfbb      	ittet	lt
 800d8d2:	425b      	neglt	r3, r3
 800d8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8d8:	9307      	strge	r3, [sp, #28]
 800d8da:	9307      	strlt	r3, [sp, #28]
 800d8dc:	bfb8      	it	lt
 800d8de:	9204      	strlt	r2, [sp, #16]
 800d8e0:	7823      	ldrb	r3, [r4, #0]
 800d8e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8e4:	d10a      	bne.n	800d8fc <_svfiprintf_r+0x130>
 800d8e6:	7863      	ldrb	r3, [r4, #1]
 800d8e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8ea:	d132      	bne.n	800d952 <_svfiprintf_r+0x186>
 800d8ec:	9b03      	ldr	r3, [sp, #12]
 800d8ee:	1d1a      	adds	r2, r3, #4
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	9203      	str	r2, [sp, #12]
 800d8f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8f8:	3402      	adds	r4, #2
 800d8fa:	9305      	str	r3, [sp, #20]
 800d8fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9c0 <_svfiprintf_r+0x1f4>
 800d900:	7821      	ldrb	r1, [r4, #0]
 800d902:	2203      	movs	r2, #3
 800d904:	4650      	mov	r0, sl
 800d906:	f7f2 fc6b 	bl	80001e0 <memchr>
 800d90a:	b138      	cbz	r0, 800d91c <_svfiprintf_r+0x150>
 800d90c:	9b04      	ldr	r3, [sp, #16]
 800d90e:	eba0 000a 	sub.w	r0, r0, sl
 800d912:	2240      	movs	r2, #64	@ 0x40
 800d914:	4082      	lsls	r2, r0
 800d916:	4313      	orrs	r3, r2
 800d918:	3401      	adds	r4, #1
 800d91a:	9304      	str	r3, [sp, #16]
 800d91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d920:	4824      	ldr	r0, [pc, #144]	@ (800d9b4 <_svfiprintf_r+0x1e8>)
 800d922:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d926:	2206      	movs	r2, #6
 800d928:	f7f2 fc5a 	bl	80001e0 <memchr>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d036      	beq.n	800d99e <_svfiprintf_r+0x1d2>
 800d930:	4b21      	ldr	r3, [pc, #132]	@ (800d9b8 <_svfiprintf_r+0x1ec>)
 800d932:	bb1b      	cbnz	r3, 800d97c <_svfiprintf_r+0x1b0>
 800d934:	9b03      	ldr	r3, [sp, #12]
 800d936:	3307      	adds	r3, #7
 800d938:	f023 0307 	bic.w	r3, r3, #7
 800d93c:	3308      	adds	r3, #8
 800d93e:	9303      	str	r3, [sp, #12]
 800d940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d942:	4433      	add	r3, r6
 800d944:	9309      	str	r3, [sp, #36]	@ 0x24
 800d946:	e76a      	b.n	800d81e <_svfiprintf_r+0x52>
 800d948:	fb0c 3202 	mla	r2, ip, r2, r3
 800d94c:	460c      	mov	r4, r1
 800d94e:	2001      	movs	r0, #1
 800d950:	e7a8      	b.n	800d8a4 <_svfiprintf_r+0xd8>
 800d952:	2300      	movs	r3, #0
 800d954:	3401      	adds	r4, #1
 800d956:	9305      	str	r3, [sp, #20]
 800d958:	4619      	mov	r1, r3
 800d95a:	f04f 0c0a 	mov.w	ip, #10
 800d95e:	4620      	mov	r0, r4
 800d960:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d964:	3a30      	subs	r2, #48	@ 0x30
 800d966:	2a09      	cmp	r2, #9
 800d968:	d903      	bls.n	800d972 <_svfiprintf_r+0x1a6>
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d0c6      	beq.n	800d8fc <_svfiprintf_r+0x130>
 800d96e:	9105      	str	r1, [sp, #20]
 800d970:	e7c4      	b.n	800d8fc <_svfiprintf_r+0x130>
 800d972:	fb0c 2101 	mla	r1, ip, r1, r2
 800d976:	4604      	mov	r4, r0
 800d978:	2301      	movs	r3, #1
 800d97a:	e7f0      	b.n	800d95e <_svfiprintf_r+0x192>
 800d97c:	ab03      	add	r3, sp, #12
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	462a      	mov	r2, r5
 800d982:	4b0e      	ldr	r3, [pc, #56]	@ (800d9bc <_svfiprintf_r+0x1f0>)
 800d984:	a904      	add	r1, sp, #16
 800d986:	4638      	mov	r0, r7
 800d988:	f7fc fcca 	bl	800a320 <_printf_float>
 800d98c:	1c42      	adds	r2, r0, #1
 800d98e:	4606      	mov	r6, r0
 800d990:	d1d6      	bne.n	800d940 <_svfiprintf_r+0x174>
 800d992:	89ab      	ldrh	r3, [r5, #12]
 800d994:	065b      	lsls	r3, r3, #25
 800d996:	f53f af2d 	bmi.w	800d7f4 <_svfiprintf_r+0x28>
 800d99a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d99c:	e72c      	b.n	800d7f8 <_svfiprintf_r+0x2c>
 800d99e:	ab03      	add	r3, sp, #12
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	462a      	mov	r2, r5
 800d9a4:	4b05      	ldr	r3, [pc, #20]	@ (800d9bc <_svfiprintf_r+0x1f0>)
 800d9a6:	a904      	add	r1, sp, #16
 800d9a8:	4638      	mov	r0, r7
 800d9aa:	f7fc ff51 	bl	800a850 <_printf_i>
 800d9ae:	e7ed      	b.n	800d98c <_svfiprintf_r+0x1c0>
 800d9b0:	0800f111 	.word	0x0800f111
 800d9b4:	0800f11b 	.word	0x0800f11b
 800d9b8:	0800a321 	.word	0x0800a321
 800d9bc:	0800d715 	.word	0x0800d715
 800d9c0:	0800f117 	.word	0x0800f117

0800d9c4 <__sflush_r>:
 800d9c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9cc:	0716      	lsls	r6, r2, #28
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	d454      	bmi.n	800da7e <__sflush_r+0xba>
 800d9d4:	684b      	ldr	r3, [r1, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	dc02      	bgt.n	800d9e0 <__sflush_r+0x1c>
 800d9da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dd48      	ble.n	800da72 <__sflush_r+0xae>
 800d9e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9e2:	2e00      	cmp	r6, #0
 800d9e4:	d045      	beq.n	800da72 <__sflush_r+0xae>
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d9ec:	682f      	ldr	r7, [r5, #0]
 800d9ee:	6a21      	ldr	r1, [r4, #32]
 800d9f0:	602b      	str	r3, [r5, #0]
 800d9f2:	d030      	beq.n	800da56 <__sflush_r+0x92>
 800d9f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d9f6:	89a3      	ldrh	r3, [r4, #12]
 800d9f8:	0759      	lsls	r1, r3, #29
 800d9fa:	d505      	bpl.n	800da08 <__sflush_r+0x44>
 800d9fc:	6863      	ldr	r3, [r4, #4]
 800d9fe:	1ad2      	subs	r2, r2, r3
 800da00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da02:	b10b      	cbz	r3, 800da08 <__sflush_r+0x44>
 800da04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da06:	1ad2      	subs	r2, r2, r3
 800da08:	2300      	movs	r3, #0
 800da0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da0c:	6a21      	ldr	r1, [r4, #32]
 800da0e:	4628      	mov	r0, r5
 800da10:	47b0      	blx	r6
 800da12:	1c43      	adds	r3, r0, #1
 800da14:	89a3      	ldrh	r3, [r4, #12]
 800da16:	d106      	bne.n	800da26 <__sflush_r+0x62>
 800da18:	6829      	ldr	r1, [r5, #0]
 800da1a:	291d      	cmp	r1, #29
 800da1c:	d82b      	bhi.n	800da76 <__sflush_r+0xb2>
 800da1e:	4a2a      	ldr	r2, [pc, #168]	@ (800dac8 <__sflush_r+0x104>)
 800da20:	40ca      	lsrs	r2, r1
 800da22:	07d6      	lsls	r6, r2, #31
 800da24:	d527      	bpl.n	800da76 <__sflush_r+0xb2>
 800da26:	2200      	movs	r2, #0
 800da28:	6062      	str	r2, [r4, #4]
 800da2a:	04d9      	lsls	r1, r3, #19
 800da2c:	6922      	ldr	r2, [r4, #16]
 800da2e:	6022      	str	r2, [r4, #0]
 800da30:	d504      	bpl.n	800da3c <__sflush_r+0x78>
 800da32:	1c42      	adds	r2, r0, #1
 800da34:	d101      	bne.n	800da3a <__sflush_r+0x76>
 800da36:	682b      	ldr	r3, [r5, #0]
 800da38:	b903      	cbnz	r3, 800da3c <__sflush_r+0x78>
 800da3a:	6560      	str	r0, [r4, #84]	@ 0x54
 800da3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da3e:	602f      	str	r7, [r5, #0]
 800da40:	b1b9      	cbz	r1, 800da72 <__sflush_r+0xae>
 800da42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da46:	4299      	cmp	r1, r3
 800da48:	d002      	beq.n	800da50 <__sflush_r+0x8c>
 800da4a:	4628      	mov	r0, r5
 800da4c:	f7fe fa34 	bl	800beb8 <_free_r>
 800da50:	2300      	movs	r3, #0
 800da52:	6363      	str	r3, [r4, #52]	@ 0x34
 800da54:	e00d      	b.n	800da72 <__sflush_r+0xae>
 800da56:	2301      	movs	r3, #1
 800da58:	4628      	mov	r0, r5
 800da5a:	47b0      	blx	r6
 800da5c:	4602      	mov	r2, r0
 800da5e:	1c50      	adds	r0, r2, #1
 800da60:	d1c9      	bne.n	800d9f6 <__sflush_r+0x32>
 800da62:	682b      	ldr	r3, [r5, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d0c6      	beq.n	800d9f6 <__sflush_r+0x32>
 800da68:	2b1d      	cmp	r3, #29
 800da6a:	d001      	beq.n	800da70 <__sflush_r+0xac>
 800da6c:	2b16      	cmp	r3, #22
 800da6e:	d11e      	bne.n	800daae <__sflush_r+0xea>
 800da70:	602f      	str	r7, [r5, #0]
 800da72:	2000      	movs	r0, #0
 800da74:	e022      	b.n	800dabc <__sflush_r+0xf8>
 800da76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da7a:	b21b      	sxth	r3, r3
 800da7c:	e01b      	b.n	800dab6 <__sflush_r+0xf2>
 800da7e:	690f      	ldr	r7, [r1, #16]
 800da80:	2f00      	cmp	r7, #0
 800da82:	d0f6      	beq.n	800da72 <__sflush_r+0xae>
 800da84:	0793      	lsls	r3, r2, #30
 800da86:	680e      	ldr	r6, [r1, #0]
 800da88:	bf08      	it	eq
 800da8a:	694b      	ldreq	r3, [r1, #20]
 800da8c:	600f      	str	r7, [r1, #0]
 800da8e:	bf18      	it	ne
 800da90:	2300      	movne	r3, #0
 800da92:	eba6 0807 	sub.w	r8, r6, r7
 800da96:	608b      	str	r3, [r1, #8]
 800da98:	f1b8 0f00 	cmp.w	r8, #0
 800da9c:	dde9      	ble.n	800da72 <__sflush_r+0xae>
 800da9e:	6a21      	ldr	r1, [r4, #32]
 800daa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800daa2:	4643      	mov	r3, r8
 800daa4:	463a      	mov	r2, r7
 800daa6:	4628      	mov	r0, r5
 800daa8:	47b0      	blx	r6
 800daaa:	2800      	cmp	r0, #0
 800daac:	dc08      	bgt.n	800dac0 <__sflush_r+0xfc>
 800daae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dab6:	81a3      	strh	r3, [r4, #12]
 800dab8:	f04f 30ff 	mov.w	r0, #4294967295
 800dabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac0:	4407      	add	r7, r0
 800dac2:	eba8 0800 	sub.w	r8, r8, r0
 800dac6:	e7e7      	b.n	800da98 <__sflush_r+0xd4>
 800dac8:	20400001 	.word	0x20400001

0800dacc <_fflush_r>:
 800dacc:	b538      	push	{r3, r4, r5, lr}
 800dace:	690b      	ldr	r3, [r1, #16]
 800dad0:	4605      	mov	r5, r0
 800dad2:	460c      	mov	r4, r1
 800dad4:	b913      	cbnz	r3, 800dadc <_fflush_r+0x10>
 800dad6:	2500      	movs	r5, #0
 800dad8:	4628      	mov	r0, r5
 800dada:	bd38      	pop	{r3, r4, r5, pc}
 800dadc:	b118      	cbz	r0, 800dae6 <_fflush_r+0x1a>
 800dade:	6a03      	ldr	r3, [r0, #32]
 800dae0:	b90b      	cbnz	r3, 800dae6 <_fflush_r+0x1a>
 800dae2:	f7fd fa6d 	bl	800afc0 <__sinit>
 800dae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d0f3      	beq.n	800dad6 <_fflush_r+0xa>
 800daee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800daf0:	07d0      	lsls	r0, r2, #31
 800daf2:	d404      	bmi.n	800dafe <_fflush_r+0x32>
 800daf4:	0599      	lsls	r1, r3, #22
 800daf6:	d402      	bmi.n	800dafe <_fflush_r+0x32>
 800daf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dafa:	f7fd fb7a 	bl	800b1f2 <__retarget_lock_acquire_recursive>
 800dafe:	4628      	mov	r0, r5
 800db00:	4621      	mov	r1, r4
 800db02:	f7ff ff5f 	bl	800d9c4 <__sflush_r>
 800db06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db08:	07da      	lsls	r2, r3, #31
 800db0a:	4605      	mov	r5, r0
 800db0c:	d4e4      	bmi.n	800dad8 <_fflush_r+0xc>
 800db0e:	89a3      	ldrh	r3, [r4, #12]
 800db10:	059b      	lsls	r3, r3, #22
 800db12:	d4e1      	bmi.n	800dad8 <_fflush_r+0xc>
 800db14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db16:	f7fd fb6d 	bl	800b1f4 <__retarget_lock_release_recursive>
 800db1a:	e7dd      	b.n	800dad8 <_fflush_r+0xc>

0800db1c <memmove>:
 800db1c:	4288      	cmp	r0, r1
 800db1e:	b510      	push	{r4, lr}
 800db20:	eb01 0402 	add.w	r4, r1, r2
 800db24:	d902      	bls.n	800db2c <memmove+0x10>
 800db26:	4284      	cmp	r4, r0
 800db28:	4623      	mov	r3, r4
 800db2a:	d807      	bhi.n	800db3c <memmove+0x20>
 800db2c:	1e43      	subs	r3, r0, #1
 800db2e:	42a1      	cmp	r1, r4
 800db30:	d008      	beq.n	800db44 <memmove+0x28>
 800db32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db3a:	e7f8      	b.n	800db2e <memmove+0x12>
 800db3c:	4402      	add	r2, r0
 800db3e:	4601      	mov	r1, r0
 800db40:	428a      	cmp	r2, r1
 800db42:	d100      	bne.n	800db46 <memmove+0x2a>
 800db44:	bd10      	pop	{r4, pc}
 800db46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db4e:	e7f7      	b.n	800db40 <memmove+0x24>

0800db50 <strncmp>:
 800db50:	b510      	push	{r4, lr}
 800db52:	b16a      	cbz	r2, 800db70 <strncmp+0x20>
 800db54:	3901      	subs	r1, #1
 800db56:	1884      	adds	r4, r0, r2
 800db58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db60:	429a      	cmp	r2, r3
 800db62:	d103      	bne.n	800db6c <strncmp+0x1c>
 800db64:	42a0      	cmp	r0, r4
 800db66:	d001      	beq.n	800db6c <strncmp+0x1c>
 800db68:	2a00      	cmp	r2, #0
 800db6a:	d1f5      	bne.n	800db58 <strncmp+0x8>
 800db6c:	1ad0      	subs	r0, r2, r3
 800db6e:	bd10      	pop	{r4, pc}
 800db70:	4610      	mov	r0, r2
 800db72:	e7fc      	b.n	800db6e <strncmp+0x1e>

0800db74 <_sbrk_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4d06      	ldr	r5, [pc, #24]	@ (800db90 <_sbrk_r+0x1c>)
 800db78:	2300      	movs	r3, #0
 800db7a:	4604      	mov	r4, r0
 800db7c:	4608      	mov	r0, r1
 800db7e:	602b      	str	r3, [r5, #0]
 800db80:	f7f4 fcd8 	bl	8002534 <_sbrk>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d102      	bne.n	800db8e <_sbrk_r+0x1a>
 800db88:	682b      	ldr	r3, [r5, #0]
 800db8a:	b103      	cbz	r3, 800db8e <_sbrk_r+0x1a>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
 800db90:	200022d4 	.word	0x200022d4

0800db94 <memcpy>:
 800db94:	440a      	add	r2, r1
 800db96:	4291      	cmp	r1, r2
 800db98:	f100 33ff 	add.w	r3, r0, #4294967295
 800db9c:	d100      	bne.n	800dba0 <memcpy+0xc>
 800db9e:	4770      	bx	lr
 800dba0:	b510      	push	{r4, lr}
 800dba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbaa:	4291      	cmp	r1, r2
 800dbac:	d1f9      	bne.n	800dba2 <memcpy+0xe>
 800dbae:	bd10      	pop	{r4, pc}

0800dbb0 <nan>:
 800dbb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dbb8 <nan+0x8>
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	00000000 	.word	0x00000000
 800dbbc:	7ff80000 	.word	0x7ff80000

0800dbc0 <__assert_func>:
 800dbc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbc2:	4614      	mov	r4, r2
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	4b09      	ldr	r3, [pc, #36]	@ (800dbec <__assert_func+0x2c>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4605      	mov	r5, r0
 800dbcc:	68d8      	ldr	r0, [r3, #12]
 800dbce:	b14c      	cbz	r4, 800dbe4 <__assert_func+0x24>
 800dbd0:	4b07      	ldr	r3, [pc, #28]	@ (800dbf0 <__assert_func+0x30>)
 800dbd2:	9100      	str	r1, [sp, #0]
 800dbd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbd8:	4906      	ldr	r1, [pc, #24]	@ (800dbf4 <__assert_func+0x34>)
 800dbda:	462b      	mov	r3, r5
 800dbdc:	f000 fba8 	bl	800e330 <fiprintf>
 800dbe0:	f000 fbb8 	bl	800e354 <abort>
 800dbe4:	4b04      	ldr	r3, [pc, #16]	@ (800dbf8 <__assert_func+0x38>)
 800dbe6:	461c      	mov	r4, r3
 800dbe8:	e7f3      	b.n	800dbd2 <__assert_func+0x12>
 800dbea:	bf00      	nop
 800dbec:	20000198 	.word	0x20000198
 800dbf0:	0800f12a 	.word	0x0800f12a
 800dbf4:	0800f137 	.word	0x0800f137
 800dbf8:	0800f165 	.word	0x0800f165

0800dbfc <_calloc_r>:
 800dbfc:	b570      	push	{r4, r5, r6, lr}
 800dbfe:	fba1 5402 	umull	r5, r4, r1, r2
 800dc02:	b934      	cbnz	r4, 800dc12 <_calloc_r+0x16>
 800dc04:	4629      	mov	r1, r5
 800dc06:	f7fe f9cb 	bl	800bfa0 <_malloc_r>
 800dc0a:	4606      	mov	r6, r0
 800dc0c:	b928      	cbnz	r0, 800dc1a <_calloc_r+0x1e>
 800dc0e:	4630      	mov	r0, r6
 800dc10:	bd70      	pop	{r4, r5, r6, pc}
 800dc12:	220c      	movs	r2, #12
 800dc14:	6002      	str	r2, [r0, #0]
 800dc16:	2600      	movs	r6, #0
 800dc18:	e7f9      	b.n	800dc0e <_calloc_r+0x12>
 800dc1a:	462a      	mov	r2, r5
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	f7fd fa6a 	bl	800b0f6 <memset>
 800dc22:	e7f4      	b.n	800dc0e <_calloc_r+0x12>

0800dc24 <rshift>:
 800dc24:	6903      	ldr	r3, [r0, #16]
 800dc26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc32:	f100 0414 	add.w	r4, r0, #20
 800dc36:	dd45      	ble.n	800dcc4 <rshift+0xa0>
 800dc38:	f011 011f 	ands.w	r1, r1, #31
 800dc3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc44:	d10c      	bne.n	800dc60 <rshift+0x3c>
 800dc46:	f100 0710 	add.w	r7, r0, #16
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	42b1      	cmp	r1, r6
 800dc4e:	d334      	bcc.n	800dcba <rshift+0x96>
 800dc50:	1a9b      	subs	r3, r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	1eea      	subs	r2, r5, #3
 800dc56:	4296      	cmp	r6, r2
 800dc58:	bf38      	it	cc
 800dc5a:	2300      	movcc	r3, #0
 800dc5c:	4423      	add	r3, r4
 800dc5e:	e015      	b.n	800dc8c <rshift+0x68>
 800dc60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc64:	f1c1 0820 	rsb	r8, r1, #32
 800dc68:	40cf      	lsrs	r7, r1
 800dc6a:	f105 0e04 	add.w	lr, r5, #4
 800dc6e:	46a1      	mov	r9, r4
 800dc70:	4576      	cmp	r6, lr
 800dc72:	46f4      	mov	ip, lr
 800dc74:	d815      	bhi.n	800dca2 <rshift+0x7e>
 800dc76:	1a9a      	subs	r2, r3, r2
 800dc78:	0092      	lsls	r2, r2, #2
 800dc7a:	3a04      	subs	r2, #4
 800dc7c:	3501      	adds	r5, #1
 800dc7e:	42ae      	cmp	r6, r5
 800dc80:	bf38      	it	cc
 800dc82:	2200      	movcc	r2, #0
 800dc84:	18a3      	adds	r3, r4, r2
 800dc86:	50a7      	str	r7, [r4, r2]
 800dc88:	b107      	cbz	r7, 800dc8c <rshift+0x68>
 800dc8a:	3304      	adds	r3, #4
 800dc8c:	1b1a      	subs	r2, r3, r4
 800dc8e:	42a3      	cmp	r3, r4
 800dc90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc94:	bf08      	it	eq
 800dc96:	2300      	moveq	r3, #0
 800dc98:	6102      	str	r2, [r0, #16]
 800dc9a:	bf08      	it	eq
 800dc9c:	6143      	streq	r3, [r0, #20]
 800dc9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dca2:	f8dc c000 	ldr.w	ip, [ip]
 800dca6:	fa0c fc08 	lsl.w	ip, ip, r8
 800dcaa:	ea4c 0707 	orr.w	r7, ip, r7
 800dcae:	f849 7b04 	str.w	r7, [r9], #4
 800dcb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcb6:	40cf      	lsrs	r7, r1
 800dcb8:	e7da      	b.n	800dc70 <rshift+0x4c>
 800dcba:	f851 cb04 	ldr.w	ip, [r1], #4
 800dcbe:	f847 cf04 	str.w	ip, [r7, #4]!
 800dcc2:	e7c3      	b.n	800dc4c <rshift+0x28>
 800dcc4:	4623      	mov	r3, r4
 800dcc6:	e7e1      	b.n	800dc8c <rshift+0x68>

0800dcc8 <__hexdig_fun>:
 800dcc8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dccc:	2b09      	cmp	r3, #9
 800dcce:	d802      	bhi.n	800dcd6 <__hexdig_fun+0xe>
 800dcd0:	3820      	subs	r0, #32
 800dcd2:	b2c0      	uxtb	r0, r0
 800dcd4:	4770      	bx	lr
 800dcd6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dcda:	2b05      	cmp	r3, #5
 800dcdc:	d801      	bhi.n	800dce2 <__hexdig_fun+0x1a>
 800dcde:	3847      	subs	r0, #71	@ 0x47
 800dce0:	e7f7      	b.n	800dcd2 <__hexdig_fun+0xa>
 800dce2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dce6:	2b05      	cmp	r3, #5
 800dce8:	d801      	bhi.n	800dcee <__hexdig_fun+0x26>
 800dcea:	3827      	subs	r0, #39	@ 0x27
 800dcec:	e7f1      	b.n	800dcd2 <__hexdig_fun+0xa>
 800dcee:	2000      	movs	r0, #0
 800dcf0:	4770      	bx	lr
	...

0800dcf4 <__gethex>:
 800dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf8:	b085      	sub	sp, #20
 800dcfa:	468a      	mov	sl, r1
 800dcfc:	9302      	str	r3, [sp, #8]
 800dcfe:	680b      	ldr	r3, [r1, #0]
 800dd00:	9001      	str	r0, [sp, #4]
 800dd02:	4690      	mov	r8, r2
 800dd04:	1c9c      	adds	r4, r3, #2
 800dd06:	46a1      	mov	r9, r4
 800dd08:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dd0c:	2830      	cmp	r0, #48	@ 0x30
 800dd0e:	d0fa      	beq.n	800dd06 <__gethex+0x12>
 800dd10:	eba9 0303 	sub.w	r3, r9, r3
 800dd14:	f1a3 0b02 	sub.w	fp, r3, #2
 800dd18:	f7ff ffd6 	bl	800dcc8 <__hexdig_fun>
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d168      	bne.n	800ddf4 <__gethex+0x100>
 800dd22:	49a0      	ldr	r1, [pc, #640]	@ (800dfa4 <__gethex+0x2b0>)
 800dd24:	2201      	movs	r2, #1
 800dd26:	4648      	mov	r0, r9
 800dd28:	f7ff ff12 	bl	800db50 <strncmp>
 800dd2c:	4607      	mov	r7, r0
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	d167      	bne.n	800de02 <__gethex+0x10e>
 800dd32:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dd36:	4626      	mov	r6, r4
 800dd38:	f7ff ffc6 	bl	800dcc8 <__hexdig_fun>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	d062      	beq.n	800de06 <__gethex+0x112>
 800dd40:	4623      	mov	r3, r4
 800dd42:	7818      	ldrb	r0, [r3, #0]
 800dd44:	2830      	cmp	r0, #48	@ 0x30
 800dd46:	4699      	mov	r9, r3
 800dd48:	f103 0301 	add.w	r3, r3, #1
 800dd4c:	d0f9      	beq.n	800dd42 <__gethex+0x4e>
 800dd4e:	f7ff ffbb 	bl	800dcc8 <__hexdig_fun>
 800dd52:	fab0 f580 	clz	r5, r0
 800dd56:	096d      	lsrs	r5, r5, #5
 800dd58:	f04f 0b01 	mov.w	fp, #1
 800dd5c:	464a      	mov	r2, r9
 800dd5e:	4616      	mov	r6, r2
 800dd60:	3201      	adds	r2, #1
 800dd62:	7830      	ldrb	r0, [r6, #0]
 800dd64:	f7ff ffb0 	bl	800dcc8 <__hexdig_fun>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d1f8      	bne.n	800dd5e <__gethex+0x6a>
 800dd6c:	498d      	ldr	r1, [pc, #564]	@ (800dfa4 <__gethex+0x2b0>)
 800dd6e:	2201      	movs	r2, #1
 800dd70:	4630      	mov	r0, r6
 800dd72:	f7ff feed 	bl	800db50 <strncmp>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d13f      	bne.n	800ddfa <__gethex+0x106>
 800dd7a:	b944      	cbnz	r4, 800dd8e <__gethex+0x9a>
 800dd7c:	1c74      	adds	r4, r6, #1
 800dd7e:	4622      	mov	r2, r4
 800dd80:	4616      	mov	r6, r2
 800dd82:	3201      	adds	r2, #1
 800dd84:	7830      	ldrb	r0, [r6, #0]
 800dd86:	f7ff ff9f 	bl	800dcc8 <__hexdig_fun>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	d1f8      	bne.n	800dd80 <__gethex+0x8c>
 800dd8e:	1ba4      	subs	r4, r4, r6
 800dd90:	00a7      	lsls	r7, r4, #2
 800dd92:	7833      	ldrb	r3, [r6, #0]
 800dd94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dd98:	2b50      	cmp	r3, #80	@ 0x50
 800dd9a:	d13e      	bne.n	800de1a <__gethex+0x126>
 800dd9c:	7873      	ldrb	r3, [r6, #1]
 800dd9e:	2b2b      	cmp	r3, #43	@ 0x2b
 800dda0:	d033      	beq.n	800de0a <__gethex+0x116>
 800dda2:	2b2d      	cmp	r3, #45	@ 0x2d
 800dda4:	d034      	beq.n	800de10 <__gethex+0x11c>
 800dda6:	1c71      	adds	r1, r6, #1
 800dda8:	2400      	movs	r4, #0
 800ddaa:	7808      	ldrb	r0, [r1, #0]
 800ddac:	f7ff ff8c 	bl	800dcc8 <__hexdig_fun>
 800ddb0:	1e43      	subs	r3, r0, #1
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	2b18      	cmp	r3, #24
 800ddb6:	d830      	bhi.n	800de1a <__gethex+0x126>
 800ddb8:	f1a0 0210 	sub.w	r2, r0, #16
 800ddbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ddc0:	f7ff ff82 	bl	800dcc8 <__hexdig_fun>
 800ddc4:	f100 3cff 	add.w	ip, r0, #4294967295
 800ddc8:	fa5f fc8c 	uxtb.w	ip, ip
 800ddcc:	f1bc 0f18 	cmp.w	ip, #24
 800ddd0:	f04f 030a 	mov.w	r3, #10
 800ddd4:	d91e      	bls.n	800de14 <__gethex+0x120>
 800ddd6:	b104      	cbz	r4, 800ddda <__gethex+0xe6>
 800ddd8:	4252      	negs	r2, r2
 800ddda:	4417      	add	r7, r2
 800dddc:	f8ca 1000 	str.w	r1, [sl]
 800dde0:	b1ed      	cbz	r5, 800de1e <__gethex+0x12a>
 800dde2:	f1bb 0f00 	cmp.w	fp, #0
 800dde6:	bf0c      	ite	eq
 800dde8:	2506      	moveq	r5, #6
 800ddea:	2500      	movne	r5, #0
 800ddec:	4628      	mov	r0, r5
 800ddee:	b005      	add	sp, #20
 800ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf4:	2500      	movs	r5, #0
 800ddf6:	462c      	mov	r4, r5
 800ddf8:	e7b0      	b.n	800dd5c <__gethex+0x68>
 800ddfa:	2c00      	cmp	r4, #0
 800ddfc:	d1c7      	bne.n	800dd8e <__gethex+0x9a>
 800ddfe:	4627      	mov	r7, r4
 800de00:	e7c7      	b.n	800dd92 <__gethex+0x9e>
 800de02:	464e      	mov	r6, r9
 800de04:	462f      	mov	r7, r5
 800de06:	2501      	movs	r5, #1
 800de08:	e7c3      	b.n	800dd92 <__gethex+0x9e>
 800de0a:	2400      	movs	r4, #0
 800de0c:	1cb1      	adds	r1, r6, #2
 800de0e:	e7cc      	b.n	800ddaa <__gethex+0xb6>
 800de10:	2401      	movs	r4, #1
 800de12:	e7fb      	b.n	800de0c <__gethex+0x118>
 800de14:	fb03 0002 	mla	r0, r3, r2, r0
 800de18:	e7ce      	b.n	800ddb8 <__gethex+0xc4>
 800de1a:	4631      	mov	r1, r6
 800de1c:	e7de      	b.n	800dddc <__gethex+0xe8>
 800de1e:	eba6 0309 	sub.w	r3, r6, r9
 800de22:	3b01      	subs	r3, #1
 800de24:	4629      	mov	r1, r5
 800de26:	2b07      	cmp	r3, #7
 800de28:	dc0a      	bgt.n	800de40 <__gethex+0x14c>
 800de2a:	9801      	ldr	r0, [sp, #4]
 800de2c:	f7fe f944 	bl	800c0b8 <_Balloc>
 800de30:	4604      	mov	r4, r0
 800de32:	b940      	cbnz	r0, 800de46 <__gethex+0x152>
 800de34:	4b5c      	ldr	r3, [pc, #368]	@ (800dfa8 <__gethex+0x2b4>)
 800de36:	4602      	mov	r2, r0
 800de38:	21e4      	movs	r1, #228	@ 0xe4
 800de3a:	485c      	ldr	r0, [pc, #368]	@ (800dfac <__gethex+0x2b8>)
 800de3c:	f7ff fec0 	bl	800dbc0 <__assert_func>
 800de40:	3101      	adds	r1, #1
 800de42:	105b      	asrs	r3, r3, #1
 800de44:	e7ef      	b.n	800de26 <__gethex+0x132>
 800de46:	f100 0a14 	add.w	sl, r0, #20
 800de4a:	2300      	movs	r3, #0
 800de4c:	4655      	mov	r5, sl
 800de4e:	469b      	mov	fp, r3
 800de50:	45b1      	cmp	r9, r6
 800de52:	d337      	bcc.n	800dec4 <__gethex+0x1d0>
 800de54:	f845 bb04 	str.w	fp, [r5], #4
 800de58:	eba5 050a 	sub.w	r5, r5, sl
 800de5c:	10ad      	asrs	r5, r5, #2
 800de5e:	6125      	str	r5, [r4, #16]
 800de60:	4658      	mov	r0, fp
 800de62:	f7fe fa1b 	bl	800c29c <__hi0bits>
 800de66:	016d      	lsls	r5, r5, #5
 800de68:	f8d8 6000 	ldr.w	r6, [r8]
 800de6c:	1a2d      	subs	r5, r5, r0
 800de6e:	42b5      	cmp	r5, r6
 800de70:	dd54      	ble.n	800df1c <__gethex+0x228>
 800de72:	1bad      	subs	r5, r5, r6
 800de74:	4629      	mov	r1, r5
 800de76:	4620      	mov	r0, r4
 800de78:	f7fe fda7 	bl	800c9ca <__any_on>
 800de7c:	4681      	mov	r9, r0
 800de7e:	b178      	cbz	r0, 800dea0 <__gethex+0x1ac>
 800de80:	1e6b      	subs	r3, r5, #1
 800de82:	1159      	asrs	r1, r3, #5
 800de84:	f003 021f 	and.w	r2, r3, #31
 800de88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800de8c:	f04f 0901 	mov.w	r9, #1
 800de90:	fa09 f202 	lsl.w	r2, r9, r2
 800de94:	420a      	tst	r2, r1
 800de96:	d003      	beq.n	800dea0 <__gethex+0x1ac>
 800de98:	454b      	cmp	r3, r9
 800de9a:	dc36      	bgt.n	800df0a <__gethex+0x216>
 800de9c:	f04f 0902 	mov.w	r9, #2
 800dea0:	4629      	mov	r1, r5
 800dea2:	4620      	mov	r0, r4
 800dea4:	f7ff febe 	bl	800dc24 <rshift>
 800dea8:	442f      	add	r7, r5
 800deaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800deae:	42bb      	cmp	r3, r7
 800deb0:	da42      	bge.n	800df38 <__gethex+0x244>
 800deb2:	9801      	ldr	r0, [sp, #4]
 800deb4:	4621      	mov	r1, r4
 800deb6:	f7fe f93f 	bl	800c138 <_Bfree>
 800deba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800debc:	2300      	movs	r3, #0
 800debe:	6013      	str	r3, [r2, #0]
 800dec0:	25a3      	movs	r5, #163	@ 0xa3
 800dec2:	e793      	b.n	800ddec <__gethex+0xf8>
 800dec4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dec8:	2a2e      	cmp	r2, #46	@ 0x2e
 800deca:	d012      	beq.n	800def2 <__gethex+0x1fe>
 800decc:	2b20      	cmp	r3, #32
 800dece:	d104      	bne.n	800deda <__gethex+0x1e6>
 800ded0:	f845 bb04 	str.w	fp, [r5], #4
 800ded4:	f04f 0b00 	mov.w	fp, #0
 800ded8:	465b      	mov	r3, fp
 800deda:	7830      	ldrb	r0, [r6, #0]
 800dedc:	9303      	str	r3, [sp, #12]
 800dede:	f7ff fef3 	bl	800dcc8 <__hexdig_fun>
 800dee2:	9b03      	ldr	r3, [sp, #12]
 800dee4:	f000 000f 	and.w	r0, r0, #15
 800dee8:	4098      	lsls	r0, r3
 800deea:	ea4b 0b00 	orr.w	fp, fp, r0
 800deee:	3304      	adds	r3, #4
 800def0:	e7ae      	b.n	800de50 <__gethex+0x15c>
 800def2:	45b1      	cmp	r9, r6
 800def4:	d8ea      	bhi.n	800decc <__gethex+0x1d8>
 800def6:	492b      	ldr	r1, [pc, #172]	@ (800dfa4 <__gethex+0x2b0>)
 800def8:	9303      	str	r3, [sp, #12]
 800defa:	2201      	movs	r2, #1
 800defc:	4630      	mov	r0, r6
 800defe:	f7ff fe27 	bl	800db50 <strncmp>
 800df02:	9b03      	ldr	r3, [sp, #12]
 800df04:	2800      	cmp	r0, #0
 800df06:	d1e1      	bne.n	800decc <__gethex+0x1d8>
 800df08:	e7a2      	b.n	800de50 <__gethex+0x15c>
 800df0a:	1ea9      	subs	r1, r5, #2
 800df0c:	4620      	mov	r0, r4
 800df0e:	f7fe fd5c 	bl	800c9ca <__any_on>
 800df12:	2800      	cmp	r0, #0
 800df14:	d0c2      	beq.n	800de9c <__gethex+0x1a8>
 800df16:	f04f 0903 	mov.w	r9, #3
 800df1a:	e7c1      	b.n	800dea0 <__gethex+0x1ac>
 800df1c:	da09      	bge.n	800df32 <__gethex+0x23e>
 800df1e:	1b75      	subs	r5, r6, r5
 800df20:	4621      	mov	r1, r4
 800df22:	9801      	ldr	r0, [sp, #4]
 800df24:	462a      	mov	r2, r5
 800df26:	f7fe fb17 	bl	800c558 <__lshift>
 800df2a:	1b7f      	subs	r7, r7, r5
 800df2c:	4604      	mov	r4, r0
 800df2e:	f100 0a14 	add.w	sl, r0, #20
 800df32:	f04f 0900 	mov.w	r9, #0
 800df36:	e7b8      	b.n	800deaa <__gethex+0x1b6>
 800df38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df3c:	42bd      	cmp	r5, r7
 800df3e:	dd6f      	ble.n	800e020 <__gethex+0x32c>
 800df40:	1bed      	subs	r5, r5, r7
 800df42:	42ae      	cmp	r6, r5
 800df44:	dc34      	bgt.n	800dfb0 <__gethex+0x2bc>
 800df46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df4a:	2b02      	cmp	r3, #2
 800df4c:	d022      	beq.n	800df94 <__gethex+0x2a0>
 800df4e:	2b03      	cmp	r3, #3
 800df50:	d024      	beq.n	800df9c <__gethex+0x2a8>
 800df52:	2b01      	cmp	r3, #1
 800df54:	d115      	bne.n	800df82 <__gethex+0x28e>
 800df56:	42ae      	cmp	r6, r5
 800df58:	d113      	bne.n	800df82 <__gethex+0x28e>
 800df5a:	2e01      	cmp	r6, #1
 800df5c:	d10b      	bne.n	800df76 <__gethex+0x282>
 800df5e:	9a02      	ldr	r2, [sp, #8]
 800df60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df64:	6013      	str	r3, [r2, #0]
 800df66:	2301      	movs	r3, #1
 800df68:	6123      	str	r3, [r4, #16]
 800df6a:	f8ca 3000 	str.w	r3, [sl]
 800df6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df70:	2562      	movs	r5, #98	@ 0x62
 800df72:	601c      	str	r4, [r3, #0]
 800df74:	e73a      	b.n	800ddec <__gethex+0xf8>
 800df76:	1e71      	subs	r1, r6, #1
 800df78:	4620      	mov	r0, r4
 800df7a:	f7fe fd26 	bl	800c9ca <__any_on>
 800df7e:	2800      	cmp	r0, #0
 800df80:	d1ed      	bne.n	800df5e <__gethex+0x26a>
 800df82:	9801      	ldr	r0, [sp, #4]
 800df84:	4621      	mov	r1, r4
 800df86:	f7fe f8d7 	bl	800c138 <_Bfree>
 800df8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df8c:	2300      	movs	r3, #0
 800df8e:	6013      	str	r3, [r2, #0]
 800df90:	2550      	movs	r5, #80	@ 0x50
 800df92:	e72b      	b.n	800ddec <__gethex+0xf8>
 800df94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df96:	2b00      	cmp	r3, #0
 800df98:	d1f3      	bne.n	800df82 <__gethex+0x28e>
 800df9a:	e7e0      	b.n	800df5e <__gethex+0x26a>
 800df9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d1dd      	bne.n	800df5e <__gethex+0x26a>
 800dfa2:	e7ee      	b.n	800df82 <__gethex+0x28e>
 800dfa4:	0800f10f 	.word	0x0800f10f
 800dfa8:	0800f0a5 	.word	0x0800f0a5
 800dfac:	0800f166 	.word	0x0800f166
 800dfb0:	1e6f      	subs	r7, r5, #1
 800dfb2:	f1b9 0f00 	cmp.w	r9, #0
 800dfb6:	d130      	bne.n	800e01a <__gethex+0x326>
 800dfb8:	b127      	cbz	r7, 800dfc4 <__gethex+0x2d0>
 800dfba:	4639      	mov	r1, r7
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f7fe fd04 	bl	800c9ca <__any_on>
 800dfc2:	4681      	mov	r9, r0
 800dfc4:	117a      	asrs	r2, r7, #5
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dfcc:	f007 071f 	and.w	r7, r7, #31
 800dfd0:	40bb      	lsls	r3, r7
 800dfd2:	4213      	tst	r3, r2
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	bf18      	it	ne
 800dfda:	f049 0902 	orrne.w	r9, r9, #2
 800dfde:	f7ff fe21 	bl	800dc24 <rshift>
 800dfe2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dfe6:	1b76      	subs	r6, r6, r5
 800dfe8:	2502      	movs	r5, #2
 800dfea:	f1b9 0f00 	cmp.w	r9, #0
 800dfee:	d047      	beq.n	800e080 <__gethex+0x38c>
 800dff0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dff4:	2b02      	cmp	r3, #2
 800dff6:	d015      	beq.n	800e024 <__gethex+0x330>
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	d017      	beq.n	800e02c <__gethex+0x338>
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d109      	bne.n	800e014 <__gethex+0x320>
 800e000:	f019 0f02 	tst.w	r9, #2
 800e004:	d006      	beq.n	800e014 <__gethex+0x320>
 800e006:	f8da 3000 	ldr.w	r3, [sl]
 800e00a:	ea49 0903 	orr.w	r9, r9, r3
 800e00e:	f019 0f01 	tst.w	r9, #1
 800e012:	d10e      	bne.n	800e032 <__gethex+0x33e>
 800e014:	f045 0510 	orr.w	r5, r5, #16
 800e018:	e032      	b.n	800e080 <__gethex+0x38c>
 800e01a:	f04f 0901 	mov.w	r9, #1
 800e01e:	e7d1      	b.n	800dfc4 <__gethex+0x2d0>
 800e020:	2501      	movs	r5, #1
 800e022:	e7e2      	b.n	800dfea <__gethex+0x2f6>
 800e024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e026:	f1c3 0301 	rsb	r3, r3, #1
 800e02a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d0f0      	beq.n	800e014 <__gethex+0x320>
 800e032:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e036:	f104 0314 	add.w	r3, r4, #20
 800e03a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e03e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e042:	f04f 0c00 	mov.w	ip, #0
 800e046:	4618      	mov	r0, r3
 800e048:	f853 2b04 	ldr.w	r2, [r3], #4
 800e04c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e050:	d01b      	beq.n	800e08a <__gethex+0x396>
 800e052:	3201      	adds	r2, #1
 800e054:	6002      	str	r2, [r0, #0]
 800e056:	2d02      	cmp	r5, #2
 800e058:	f104 0314 	add.w	r3, r4, #20
 800e05c:	d13c      	bne.n	800e0d8 <__gethex+0x3e4>
 800e05e:	f8d8 2000 	ldr.w	r2, [r8]
 800e062:	3a01      	subs	r2, #1
 800e064:	42b2      	cmp	r2, r6
 800e066:	d109      	bne.n	800e07c <__gethex+0x388>
 800e068:	1171      	asrs	r1, r6, #5
 800e06a:	2201      	movs	r2, #1
 800e06c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e070:	f006 061f 	and.w	r6, r6, #31
 800e074:	fa02 f606 	lsl.w	r6, r2, r6
 800e078:	421e      	tst	r6, r3
 800e07a:	d13a      	bne.n	800e0f2 <__gethex+0x3fe>
 800e07c:	f045 0520 	orr.w	r5, r5, #32
 800e080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e082:	601c      	str	r4, [r3, #0]
 800e084:	9b02      	ldr	r3, [sp, #8]
 800e086:	601f      	str	r7, [r3, #0]
 800e088:	e6b0      	b.n	800ddec <__gethex+0xf8>
 800e08a:	4299      	cmp	r1, r3
 800e08c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e090:	d8d9      	bhi.n	800e046 <__gethex+0x352>
 800e092:	68a3      	ldr	r3, [r4, #8]
 800e094:	459b      	cmp	fp, r3
 800e096:	db17      	blt.n	800e0c8 <__gethex+0x3d4>
 800e098:	6861      	ldr	r1, [r4, #4]
 800e09a:	9801      	ldr	r0, [sp, #4]
 800e09c:	3101      	adds	r1, #1
 800e09e:	f7fe f80b 	bl	800c0b8 <_Balloc>
 800e0a2:	4681      	mov	r9, r0
 800e0a4:	b918      	cbnz	r0, 800e0ae <__gethex+0x3ba>
 800e0a6:	4b1a      	ldr	r3, [pc, #104]	@ (800e110 <__gethex+0x41c>)
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	2184      	movs	r1, #132	@ 0x84
 800e0ac:	e6c5      	b.n	800de3a <__gethex+0x146>
 800e0ae:	6922      	ldr	r2, [r4, #16]
 800e0b0:	3202      	adds	r2, #2
 800e0b2:	f104 010c 	add.w	r1, r4, #12
 800e0b6:	0092      	lsls	r2, r2, #2
 800e0b8:	300c      	adds	r0, #12
 800e0ba:	f7ff fd6b 	bl	800db94 <memcpy>
 800e0be:	4621      	mov	r1, r4
 800e0c0:	9801      	ldr	r0, [sp, #4]
 800e0c2:	f7fe f839 	bl	800c138 <_Bfree>
 800e0c6:	464c      	mov	r4, r9
 800e0c8:	6923      	ldr	r3, [r4, #16]
 800e0ca:	1c5a      	adds	r2, r3, #1
 800e0cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e0d0:	6122      	str	r2, [r4, #16]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	615a      	str	r2, [r3, #20]
 800e0d6:	e7be      	b.n	800e056 <__gethex+0x362>
 800e0d8:	6922      	ldr	r2, [r4, #16]
 800e0da:	455a      	cmp	r2, fp
 800e0dc:	dd0b      	ble.n	800e0f6 <__gethex+0x402>
 800e0de:	2101      	movs	r1, #1
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f7ff fd9f 	bl	800dc24 <rshift>
 800e0e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0ea:	3701      	adds	r7, #1
 800e0ec:	42bb      	cmp	r3, r7
 800e0ee:	f6ff aee0 	blt.w	800deb2 <__gethex+0x1be>
 800e0f2:	2501      	movs	r5, #1
 800e0f4:	e7c2      	b.n	800e07c <__gethex+0x388>
 800e0f6:	f016 061f 	ands.w	r6, r6, #31
 800e0fa:	d0fa      	beq.n	800e0f2 <__gethex+0x3fe>
 800e0fc:	4453      	add	r3, sl
 800e0fe:	f1c6 0620 	rsb	r6, r6, #32
 800e102:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e106:	f7fe f8c9 	bl	800c29c <__hi0bits>
 800e10a:	42b0      	cmp	r0, r6
 800e10c:	dbe7      	blt.n	800e0de <__gethex+0x3ea>
 800e10e:	e7f0      	b.n	800e0f2 <__gethex+0x3fe>
 800e110:	0800f0a5 	.word	0x0800f0a5

0800e114 <L_shift>:
 800e114:	f1c2 0208 	rsb	r2, r2, #8
 800e118:	0092      	lsls	r2, r2, #2
 800e11a:	b570      	push	{r4, r5, r6, lr}
 800e11c:	f1c2 0620 	rsb	r6, r2, #32
 800e120:	6843      	ldr	r3, [r0, #4]
 800e122:	6804      	ldr	r4, [r0, #0]
 800e124:	fa03 f506 	lsl.w	r5, r3, r6
 800e128:	432c      	orrs	r4, r5
 800e12a:	40d3      	lsrs	r3, r2
 800e12c:	6004      	str	r4, [r0, #0]
 800e12e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e132:	4288      	cmp	r0, r1
 800e134:	d3f4      	bcc.n	800e120 <L_shift+0xc>
 800e136:	bd70      	pop	{r4, r5, r6, pc}

0800e138 <__match>:
 800e138:	b530      	push	{r4, r5, lr}
 800e13a:	6803      	ldr	r3, [r0, #0]
 800e13c:	3301      	adds	r3, #1
 800e13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e142:	b914      	cbnz	r4, 800e14a <__match+0x12>
 800e144:	6003      	str	r3, [r0, #0]
 800e146:	2001      	movs	r0, #1
 800e148:	bd30      	pop	{r4, r5, pc}
 800e14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e14e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e152:	2d19      	cmp	r5, #25
 800e154:	bf98      	it	ls
 800e156:	3220      	addls	r2, #32
 800e158:	42a2      	cmp	r2, r4
 800e15a:	d0f0      	beq.n	800e13e <__match+0x6>
 800e15c:	2000      	movs	r0, #0
 800e15e:	e7f3      	b.n	800e148 <__match+0x10>

0800e160 <__hexnan>:
 800e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e164:	680b      	ldr	r3, [r1, #0]
 800e166:	6801      	ldr	r1, [r0, #0]
 800e168:	115e      	asrs	r6, r3, #5
 800e16a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e16e:	f013 031f 	ands.w	r3, r3, #31
 800e172:	b087      	sub	sp, #28
 800e174:	bf18      	it	ne
 800e176:	3604      	addne	r6, #4
 800e178:	2500      	movs	r5, #0
 800e17a:	1f37      	subs	r7, r6, #4
 800e17c:	4682      	mov	sl, r0
 800e17e:	4690      	mov	r8, r2
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	f846 5c04 	str.w	r5, [r6, #-4]
 800e186:	46b9      	mov	r9, r7
 800e188:	463c      	mov	r4, r7
 800e18a:	9502      	str	r5, [sp, #8]
 800e18c:	46ab      	mov	fp, r5
 800e18e:	784a      	ldrb	r2, [r1, #1]
 800e190:	1c4b      	adds	r3, r1, #1
 800e192:	9303      	str	r3, [sp, #12]
 800e194:	b342      	cbz	r2, 800e1e8 <__hexnan+0x88>
 800e196:	4610      	mov	r0, r2
 800e198:	9105      	str	r1, [sp, #20]
 800e19a:	9204      	str	r2, [sp, #16]
 800e19c:	f7ff fd94 	bl	800dcc8 <__hexdig_fun>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d151      	bne.n	800e248 <__hexnan+0xe8>
 800e1a4:	9a04      	ldr	r2, [sp, #16]
 800e1a6:	9905      	ldr	r1, [sp, #20]
 800e1a8:	2a20      	cmp	r2, #32
 800e1aa:	d818      	bhi.n	800e1de <__hexnan+0x7e>
 800e1ac:	9b02      	ldr	r3, [sp, #8]
 800e1ae:	459b      	cmp	fp, r3
 800e1b0:	dd13      	ble.n	800e1da <__hexnan+0x7a>
 800e1b2:	454c      	cmp	r4, r9
 800e1b4:	d206      	bcs.n	800e1c4 <__hexnan+0x64>
 800e1b6:	2d07      	cmp	r5, #7
 800e1b8:	dc04      	bgt.n	800e1c4 <__hexnan+0x64>
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	4649      	mov	r1, r9
 800e1be:	4620      	mov	r0, r4
 800e1c0:	f7ff ffa8 	bl	800e114 <L_shift>
 800e1c4:	4544      	cmp	r4, r8
 800e1c6:	d952      	bls.n	800e26e <__hexnan+0x10e>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f1a4 0904 	sub.w	r9, r4, #4
 800e1ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1d2:	f8cd b008 	str.w	fp, [sp, #8]
 800e1d6:	464c      	mov	r4, r9
 800e1d8:	461d      	mov	r5, r3
 800e1da:	9903      	ldr	r1, [sp, #12]
 800e1dc:	e7d7      	b.n	800e18e <__hexnan+0x2e>
 800e1de:	2a29      	cmp	r2, #41	@ 0x29
 800e1e0:	d157      	bne.n	800e292 <__hexnan+0x132>
 800e1e2:	3102      	adds	r1, #2
 800e1e4:	f8ca 1000 	str.w	r1, [sl]
 800e1e8:	f1bb 0f00 	cmp.w	fp, #0
 800e1ec:	d051      	beq.n	800e292 <__hexnan+0x132>
 800e1ee:	454c      	cmp	r4, r9
 800e1f0:	d206      	bcs.n	800e200 <__hexnan+0xa0>
 800e1f2:	2d07      	cmp	r5, #7
 800e1f4:	dc04      	bgt.n	800e200 <__hexnan+0xa0>
 800e1f6:	462a      	mov	r2, r5
 800e1f8:	4649      	mov	r1, r9
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f7ff ff8a 	bl	800e114 <L_shift>
 800e200:	4544      	cmp	r4, r8
 800e202:	d936      	bls.n	800e272 <__hexnan+0x112>
 800e204:	f1a8 0204 	sub.w	r2, r8, #4
 800e208:	4623      	mov	r3, r4
 800e20a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e20e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e212:	429f      	cmp	r7, r3
 800e214:	d2f9      	bcs.n	800e20a <__hexnan+0xaa>
 800e216:	1b3b      	subs	r3, r7, r4
 800e218:	f023 0303 	bic.w	r3, r3, #3
 800e21c:	3304      	adds	r3, #4
 800e21e:	3401      	adds	r4, #1
 800e220:	3e03      	subs	r6, #3
 800e222:	42b4      	cmp	r4, r6
 800e224:	bf88      	it	hi
 800e226:	2304      	movhi	r3, #4
 800e228:	4443      	add	r3, r8
 800e22a:	2200      	movs	r2, #0
 800e22c:	f843 2b04 	str.w	r2, [r3], #4
 800e230:	429f      	cmp	r7, r3
 800e232:	d2fb      	bcs.n	800e22c <__hexnan+0xcc>
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	b91b      	cbnz	r3, 800e240 <__hexnan+0xe0>
 800e238:	4547      	cmp	r7, r8
 800e23a:	d128      	bne.n	800e28e <__hexnan+0x12e>
 800e23c:	2301      	movs	r3, #1
 800e23e:	603b      	str	r3, [r7, #0]
 800e240:	2005      	movs	r0, #5
 800e242:	b007      	add	sp, #28
 800e244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e248:	3501      	adds	r5, #1
 800e24a:	2d08      	cmp	r5, #8
 800e24c:	f10b 0b01 	add.w	fp, fp, #1
 800e250:	dd06      	ble.n	800e260 <__hexnan+0x100>
 800e252:	4544      	cmp	r4, r8
 800e254:	d9c1      	bls.n	800e1da <__hexnan+0x7a>
 800e256:	2300      	movs	r3, #0
 800e258:	f844 3c04 	str.w	r3, [r4, #-4]
 800e25c:	2501      	movs	r5, #1
 800e25e:	3c04      	subs	r4, #4
 800e260:	6822      	ldr	r2, [r4, #0]
 800e262:	f000 000f 	and.w	r0, r0, #15
 800e266:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e26a:	6020      	str	r0, [r4, #0]
 800e26c:	e7b5      	b.n	800e1da <__hexnan+0x7a>
 800e26e:	2508      	movs	r5, #8
 800e270:	e7b3      	b.n	800e1da <__hexnan+0x7a>
 800e272:	9b01      	ldr	r3, [sp, #4]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d0dd      	beq.n	800e234 <__hexnan+0xd4>
 800e278:	f1c3 0320 	rsb	r3, r3, #32
 800e27c:	f04f 32ff 	mov.w	r2, #4294967295
 800e280:	40da      	lsrs	r2, r3
 800e282:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e286:	4013      	ands	r3, r2
 800e288:	f846 3c04 	str.w	r3, [r6, #-4]
 800e28c:	e7d2      	b.n	800e234 <__hexnan+0xd4>
 800e28e:	3f04      	subs	r7, #4
 800e290:	e7d0      	b.n	800e234 <__hexnan+0xd4>
 800e292:	2004      	movs	r0, #4
 800e294:	e7d5      	b.n	800e242 <__hexnan+0xe2>

0800e296 <__ascii_mbtowc>:
 800e296:	b082      	sub	sp, #8
 800e298:	b901      	cbnz	r1, 800e29c <__ascii_mbtowc+0x6>
 800e29a:	a901      	add	r1, sp, #4
 800e29c:	b142      	cbz	r2, 800e2b0 <__ascii_mbtowc+0x1a>
 800e29e:	b14b      	cbz	r3, 800e2b4 <__ascii_mbtowc+0x1e>
 800e2a0:	7813      	ldrb	r3, [r2, #0]
 800e2a2:	600b      	str	r3, [r1, #0]
 800e2a4:	7812      	ldrb	r2, [r2, #0]
 800e2a6:	1e10      	subs	r0, r2, #0
 800e2a8:	bf18      	it	ne
 800e2aa:	2001      	movne	r0, #1
 800e2ac:	b002      	add	sp, #8
 800e2ae:	4770      	bx	lr
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	e7fb      	b.n	800e2ac <__ascii_mbtowc+0x16>
 800e2b4:	f06f 0001 	mvn.w	r0, #1
 800e2b8:	e7f8      	b.n	800e2ac <__ascii_mbtowc+0x16>

0800e2ba <_realloc_r>:
 800e2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2be:	4607      	mov	r7, r0
 800e2c0:	4614      	mov	r4, r2
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	b921      	cbnz	r1, 800e2d0 <_realloc_r+0x16>
 800e2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	f7fd be68 	b.w	800bfa0 <_malloc_r>
 800e2d0:	b92a      	cbnz	r2, 800e2de <_realloc_r+0x24>
 800e2d2:	f7fd fdf1 	bl	800beb8 <_free_r>
 800e2d6:	4625      	mov	r5, r4
 800e2d8:	4628      	mov	r0, r5
 800e2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2de:	f000 f840 	bl	800e362 <_malloc_usable_size_r>
 800e2e2:	4284      	cmp	r4, r0
 800e2e4:	4606      	mov	r6, r0
 800e2e6:	d802      	bhi.n	800e2ee <_realloc_r+0x34>
 800e2e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2ec:	d8f4      	bhi.n	800e2d8 <_realloc_r+0x1e>
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	4638      	mov	r0, r7
 800e2f2:	f7fd fe55 	bl	800bfa0 <_malloc_r>
 800e2f6:	4680      	mov	r8, r0
 800e2f8:	b908      	cbnz	r0, 800e2fe <_realloc_r+0x44>
 800e2fa:	4645      	mov	r5, r8
 800e2fc:	e7ec      	b.n	800e2d8 <_realloc_r+0x1e>
 800e2fe:	42b4      	cmp	r4, r6
 800e300:	4622      	mov	r2, r4
 800e302:	4629      	mov	r1, r5
 800e304:	bf28      	it	cs
 800e306:	4632      	movcs	r2, r6
 800e308:	f7ff fc44 	bl	800db94 <memcpy>
 800e30c:	4629      	mov	r1, r5
 800e30e:	4638      	mov	r0, r7
 800e310:	f7fd fdd2 	bl	800beb8 <_free_r>
 800e314:	e7f1      	b.n	800e2fa <_realloc_r+0x40>

0800e316 <__ascii_wctomb>:
 800e316:	4603      	mov	r3, r0
 800e318:	4608      	mov	r0, r1
 800e31a:	b141      	cbz	r1, 800e32e <__ascii_wctomb+0x18>
 800e31c:	2aff      	cmp	r2, #255	@ 0xff
 800e31e:	d904      	bls.n	800e32a <__ascii_wctomb+0x14>
 800e320:	228a      	movs	r2, #138	@ 0x8a
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	f04f 30ff 	mov.w	r0, #4294967295
 800e328:	4770      	bx	lr
 800e32a:	700a      	strb	r2, [r1, #0]
 800e32c:	2001      	movs	r0, #1
 800e32e:	4770      	bx	lr

0800e330 <fiprintf>:
 800e330:	b40e      	push	{r1, r2, r3}
 800e332:	b503      	push	{r0, r1, lr}
 800e334:	4601      	mov	r1, r0
 800e336:	ab03      	add	r3, sp, #12
 800e338:	4805      	ldr	r0, [pc, #20]	@ (800e350 <fiprintf+0x20>)
 800e33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e33e:	6800      	ldr	r0, [r0, #0]
 800e340:	9301      	str	r3, [sp, #4]
 800e342:	f000 f83f 	bl	800e3c4 <_vfiprintf_r>
 800e346:	b002      	add	sp, #8
 800e348:	f85d eb04 	ldr.w	lr, [sp], #4
 800e34c:	b003      	add	sp, #12
 800e34e:	4770      	bx	lr
 800e350:	20000198 	.word	0x20000198

0800e354 <abort>:
 800e354:	b508      	push	{r3, lr}
 800e356:	2006      	movs	r0, #6
 800e358:	f000 fa08 	bl	800e76c <raise>
 800e35c:	2001      	movs	r0, #1
 800e35e:	f7f4 f871 	bl	8002444 <_exit>

0800e362 <_malloc_usable_size_r>:
 800e362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e366:	1f18      	subs	r0, r3, #4
 800e368:	2b00      	cmp	r3, #0
 800e36a:	bfbc      	itt	lt
 800e36c:	580b      	ldrlt	r3, [r1, r0]
 800e36e:	18c0      	addlt	r0, r0, r3
 800e370:	4770      	bx	lr

0800e372 <__sfputc_r>:
 800e372:	6893      	ldr	r3, [r2, #8]
 800e374:	3b01      	subs	r3, #1
 800e376:	2b00      	cmp	r3, #0
 800e378:	b410      	push	{r4}
 800e37a:	6093      	str	r3, [r2, #8]
 800e37c:	da08      	bge.n	800e390 <__sfputc_r+0x1e>
 800e37e:	6994      	ldr	r4, [r2, #24]
 800e380:	42a3      	cmp	r3, r4
 800e382:	db01      	blt.n	800e388 <__sfputc_r+0x16>
 800e384:	290a      	cmp	r1, #10
 800e386:	d103      	bne.n	800e390 <__sfputc_r+0x1e>
 800e388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e38c:	f000 b932 	b.w	800e5f4 <__swbuf_r>
 800e390:	6813      	ldr	r3, [r2, #0]
 800e392:	1c58      	adds	r0, r3, #1
 800e394:	6010      	str	r0, [r2, #0]
 800e396:	7019      	strb	r1, [r3, #0]
 800e398:	4608      	mov	r0, r1
 800e39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <__sfputs_r>:
 800e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a2:	4606      	mov	r6, r0
 800e3a4:	460f      	mov	r7, r1
 800e3a6:	4614      	mov	r4, r2
 800e3a8:	18d5      	adds	r5, r2, r3
 800e3aa:	42ac      	cmp	r4, r5
 800e3ac:	d101      	bne.n	800e3b2 <__sfputs_r+0x12>
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	e007      	b.n	800e3c2 <__sfputs_r+0x22>
 800e3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3b6:	463a      	mov	r2, r7
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f7ff ffda 	bl	800e372 <__sfputc_r>
 800e3be:	1c43      	adds	r3, r0, #1
 800e3c0:	d1f3      	bne.n	800e3aa <__sfputs_r+0xa>
 800e3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3c4 <_vfiprintf_r>:
 800e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c8:	460d      	mov	r5, r1
 800e3ca:	b09d      	sub	sp, #116	@ 0x74
 800e3cc:	4614      	mov	r4, r2
 800e3ce:	4698      	mov	r8, r3
 800e3d0:	4606      	mov	r6, r0
 800e3d2:	b118      	cbz	r0, 800e3dc <_vfiprintf_r+0x18>
 800e3d4:	6a03      	ldr	r3, [r0, #32]
 800e3d6:	b90b      	cbnz	r3, 800e3dc <_vfiprintf_r+0x18>
 800e3d8:	f7fc fdf2 	bl	800afc0 <__sinit>
 800e3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3de:	07d9      	lsls	r1, r3, #31
 800e3e0:	d405      	bmi.n	800e3ee <_vfiprintf_r+0x2a>
 800e3e2:	89ab      	ldrh	r3, [r5, #12]
 800e3e4:	059a      	lsls	r2, r3, #22
 800e3e6:	d402      	bmi.n	800e3ee <_vfiprintf_r+0x2a>
 800e3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3ea:	f7fc ff02 	bl	800b1f2 <__retarget_lock_acquire_recursive>
 800e3ee:	89ab      	ldrh	r3, [r5, #12]
 800e3f0:	071b      	lsls	r3, r3, #28
 800e3f2:	d501      	bpl.n	800e3f8 <_vfiprintf_r+0x34>
 800e3f4:	692b      	ldr	r3, [r5, #16]
 800e3f6:	b99b      	cbnz	r3, 800e420 <_vfiprintf_r+0x5c>
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f000 f938 	bl	800e670 <__swsetup_r>
 800e400:	b170      	cbz	r0, 800e420 <_vfiprintf_r+0x5c>
 800e402:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e404:	07dc      	lsls	r4, r3, #31
 800e406:	d504      	bpl.n	800e412 <_vfiprintf_r+0x4e>
 800e408:	f04f 30ff 	mov.w	r0, #4294967295
 800e40c:	b01d      	add	sp, #116	@ 0x74
 800e40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e412:	89ab      	ldrh	r3, [r5, #12]
 800e414:	0598      	lsls	r0, r3, #22
 800e416:	d4f7      	bmi.n	800e408 <_vfiprintf_r+0x44>
 800e418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e41a:	f7fc feeb 	bl	800b1f4 <__retarget_lock_release_recursive>
 800e41e:	e7f3      	b.n	800e408 <_vfiprintf_r+0x44>
 800e420:	2300      	movs	r3, #0
 800e422:	9309      	str	r3, [sp, #36]	@ 0x24
 800e424:	2320      	movs	r3, #32
 800e426:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e42a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e42e:	2330      	movs	r3, #48	@ 0x30
 800e430:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5e0 <_vfiprintf_r+0x21c>
 800e434:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e438:	f04f 0901 	mov.w	r9, #1
 800e43c:	4623      	mov	r3, r4
 800e43e:	469a      	mov	sl, r3
 800e440:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e444:	b10a      	cbz	r2, 800e44a <_vfiprintf_r+0x86>
 800e446:	2a25      	cmp	r2, #37	@ 0x25
 800e448:	d1f9      	bne.n	800e43e <_vfiprintf_r+0x7a>
 800e44a:	ebba 0b04 	subs.w	fp, sl, r4
 800e44e:	d00b      	beq.n	800e468 <_vfiprintf_r+0xa4>
 800e450:	465b      	mov	r3, fp
 800e452:	4622      	mov	r2, r4
 800e454:	4629      	mov	r1, r5
 800e456:	4630      	mov	r0, r6
 800e458:	f7ff ffa2 	bl	800e3a0 <__sfputs_r>
 800e45c:	3001      	adds	r0, #1
 800e45e:	f000 80a7 	beq.w	800e5b0 <_vfiprintf_r+0x1ec>
 800e462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e464:	445a      	add	r2, fp
 800e466:	9209      	str	r2, [sp, #36]	@ 0x24
 800e468:	f89a 3000 	ldrb.w	r3, [sl]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 809f 	beq.w	800e5b0 <_vfiprintf_r+0x1ec>
 800e472:	2300      	movs	r3, #0
 800e474:	f04f 32ff 	mov.w	r2, #4294967295
 800e478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e47c:	f10a 0a01 	add.w	sl, sl, #1
 800e480:	9304      	str	r3, [sp, #16]
 800e482:	9307      	str	r3, [sp, #28]
 800e484:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e488:	931a      	str	r3, [sp, #104]	@ 0x68
 800e48a:	4654      	mov	r4, sl
 800e48c:	2205      	movs	r2, #5
 800e48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e492:	4853      	ldr	r0, [pc, #332]	@ (800e5e0 <_vfiprintf_r+0x21c>)
 800e494:	f7f1 fea4 	bl	80001e0 <memchr>
 800e498:	9a04      	ldr	r2, [sp, #16]
 800e49a:	b9d8      	cbnz	r0, 800e4d4 <_vfiprintf_r+0x110>
 800e49c:	06d1      	lsls	r1, r2, #27
 800e49e:	bf44      	itt	mi
 800e4a0:	2320      	movmi	r3, #32
 800e4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4a6:	0713      	lsls	r3, r2, #28
 800e4a8:	bf44      	itt	mi
 800e4aa:	232b      	movmi	r3, #43	@ 0x2b
 800e4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4b6:	d015      	beq.n	800e4e4 <_vfiprintf_r+0x120>
 800e4b8:	9a07      	ldr	r2, [sp, #28]
 800e4ba:	4654      	mov	r4, sl
 800e4bc:	2000      	movs	r0, #0
 800e4be:	f04f 0c0a 	mov.w	ip, #10
 800e4c2:	4621      	mov	r1, r4
 800e4c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4c8:	3b30      	subs	r3, #48	@ 0x30
 800e4ca:	2b09      	cmp	r3, #9
 800e4cc:	d94b      	bls.n	800e566 <_vfiprintf_r+0x1a2>
 800e4ce:	b1b0      	cbz	r0, 800e4fe <_vfiprintf_r+0x13a>
 800e4d0:	9207      	str	r2, [sp, #28]
 800e4d2:	e014      	b.n	800e4fe <_vfiprintf_r+0x13a>
 800e4d4:	eba0 0308 	sub.w	r3, r0, r8
 800e4d8:	fa09 f303 	lsl.w	r3, r9, r3
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	9304      	str	r3, [sp, #16]
 800e4e0:	46a2      	mov	sl, r4
 800e4e2:	e7d2      	b.n	800e48a <_vfiprintf_r+0xc6>
 800e4e4:	9b03      	ldr	r3, [sp, #12]
 800e4e6:	1d19      	adds	r1, r3, #4
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	9103      	str	r1, [sp, #12]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	bfbb      	ittet	lt
 800e4f0:	425b      	neglt	r3, r3
 800e4f2:	f042 0202 	orrlt.w	r2, r2, #2
 800e4f6:	9307      	strge	r3, [sp, #28]
 800e4f8:	9307      	strlt	r3, [sp, #28]
 800e4fa:	bfb8      	it	lt
 800e4fc:	9204      	strlt	r2, [sp, #16]
 800e4fe:	7823      	ldrb	r3, [r4, #0]
 800e500:	2b2e      	cmp	r3, #46	@ 0x2e
 800e502:	d10a      	bne.n	800e51a <_vfiprintf_r+0x156>
 800e504:	7863      	ldrb	r3, [r4, #1]
 800e506:	2b2a      	cmp	r3, #42	@ 0x2a
 800e508:	d132      	bne.n	800e570 <_vfiprintf_r+0x1ac>
 800e50a:	9b03      	ldr	r3, [sp, #12]
 800e50c:	1d1a      	adds	r2, r3, #4
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	9203      	str	r2, [sp, #12]
 800e512:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e516:	3402      	adds	r4, #2
 800e518:	9305      	str	r3, [sp, #20]
 800e51a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e5f0 <_vfiprintf_r+0x22c>
 800e51e:	7821      	ldrb	r1, [r4, #0]
 800e520:	2203      	movs	r2, #3
 800e522:	4650      	mov	r0, sl
 800e524:	f7f1 fe5c 	bl	80001e0 <memchr>
 800e528:	b138      	cbz	r0, 800e53a <_vfiprintf_r+0x176>
 800e52a:	9b04      	ldr	r3, [sp, #16]
 800e52c:	eba0 000a 	sub.w	r0, r0, sl
 800e530:	2240      	movs	r2, #64	@ 0x40
 800e532:	4082      	lsls	r2, r0
 800e534:	4313      	orrs	r3, r2
 800e536:	3401      	adds	r4, #1
 800e538:	9304      	str	r3, [sp, #16]
 800e53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e53e:	4829      	ldr	r0, [pc, #164]	@ (800e5e4 <_vfiprintf_r+0x220>)
 800e540:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e544:	2206      	movs	r2, #6
 800e546:	f7f1 fe4b 	bl	80001e0 <memchr>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	d03f      	beq.n	800e5ce <_vfiprintf_r+0x20a>
 800e54e:	4b26      	ldr	r3, [pc, #152]	@ (800e5e8 <_vfiprintf_r+0x224>)
 800e550:	bb1b      	cbnz	r3, 800e59a <_vfiprintf_r+0x1d6>
 800e552:	9b03      	ldr	r3, [sp, #12]
 800e554:	3307      	adds	r3, #7
 800e556:	f023 0307 	bic.w	r3, r3, #7
 800e55a:	3308      	adds	r3, #8
 800e55c:	9303      	str	r3, [sp, #12]
 800e55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e560:	443b      	add	r3, r7
 800e562:	9309      	str	r3, [sp, #36]	@ 0x24
 800e564:	e76a      	b.n	800e43c <_vfiprintf_r+0x78>
 800e566:	fb0c 3202 	mla	r2, ip, r2, r3
 800e56a:	460c      	mov	r4, r1
 800e56c:	2001      	movs	r0, #1
 800e56e:	e7a8      	b.n	800e4c2 <_vfiprintf_r+0xfe>
 800e570:	2300      	movs	r3, #0
 800e572:	3401      	adds	r4, #1
 800e574:	9305      	str	r3, [sp, #20]
 800e576:	4619      	mov	r1, r3
 800e578:	f04f 0c0a 	mov.w	ip, #10
 800e57c:	4620      	mov	r0, r4
 800e57e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e582:	3a30      	subs	r2, #48	@ 0x30
 800e584:	2a09      	cmp	r2, #9
 800e586:	d903      	bls.n	800e590 <_vfiprintf_r+0x1cc>
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d0c6      	beq.n	800e51a <_vfiprintf_r+0x156>
 800e58c:	9105      	str	r1, [sp, #20]
 800e58e:	e7c4      	b.n	800e51a <_vfiprintf_r+0x156>
 800e590:	fb0c 2101 	mla	r1, ip, r1, r2
 800e594:	4604      	mov	r4, r0
 800e596:	2301      	movs	r3, #1
 800e598:	e7f0      	b.n	800e57c <_vfiprintf_r+0x1b8>
 800e59a:	ab03      	add	r3, sp, #12
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	462a      	mov	r2, r5
 800e5a0:	4b12      	ldr	r3, [pc, #72]	@ (800e5ec <_vfiprintf_r+0x228>)
 800e5a2:	a904      	add	r1, sp, #16
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	f7fb febb 	bl	800a320 <_printf_float>
 800e5aa:	4607      	mov	r7, r0
 800e5ac:	1c78      	adds	r0, r7, #1
 800e5ae:	d1d6      	bne.n	800e55e <_vfiprintf_r+0x19a>
 800e5b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5b2:	07d9      	lsls	r1, r3, #31
 800e5b4:	d405      	bmi.n	800e5c2 <_vfiprintf_r+0x1fe>
 800e5b6:	89ab      	ldrh	r3, [r5, #12]
 800e5b8:	059a      	lsls	r2, r3, #22
 800e5ba:	d402      	bmi.n	800e5c2 <_vfiprintf_r+0x1fe>
 800e5bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5be:	f7fc fe19 	bl	800b1f4 <__retarget_lock_release_recursive>
 800e5c2:	89ab      	ldrh	r3, [r5, #12]
 800e5c4:	065b      	lsls	r3, r3, #25
 800e5c6:	f53f af1f 	bmi.w	800e408 <_vfiprintf_r+0x44>
 800e5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5cc:	e71e      	b.n	800e40c <_vfiprintf_r+0x48>
 800e5ce:	ab03      	add	r3, sp, #12
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	462a      	mov	r2, r5
 800e5d4:	4b05      	ldr	r3, [pc, #20]	@ (800e5ec <_vfiprintf_r+0x228>)
 800e5d6:	a904      	add	r1, sp, #16
 800e5d8:	4630      	mov	r0, r6
 800e5da:	f7fc f939 	bl	800a850 <_printf_i>
 800e5de:	e7e4      	b.n	800e5aa <_vfiprintf_r+0x1e6>
 800e5e0:	0800f111 	.word	0x0800f111
 800e5e4:	0800f11b 	.word	0x0800f11b
 800e5e8:	0800a321 	.word	0x0800a321
 800e5ec:	0800e3a1 	.word	0x0800e3a1
 800e5f0:	0800f117 	.word	0x0800f117

0800e5f4 <__swbuf_r>:
 800e5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f6:	460e      	mov	r6, r1
 800e5f8:	4614      	mov	r4, r2
 800e5fa:	4605      	mov	r5, r0
 800e5fc:	b118      	cbz	r0, 800e606 <__swbuf_r+0x12>
 800e5fe:	6a03      	ldr	r3, [r0, #32]
 800e600:	b90b      	cbnz	r3, 800e606 <__swbuf_r+0x12>
 800e602:	f7fc fcdd 	bl	800afc0 <__sinit>
 800e606:	69a3      	ldr	r3, [r4, #24]
 800e608:	60a3      	str	r3, [r4, #8]
 800e60a:	89a3      	ldrh	r3, [r4, #12]
 800e60c:	071a      	lsls	r2, r3, #28
 800e60e:	d501      	bpl.n	800e614 <__swbuf_r+0x20>
 800e610:	6923      	ldr	r3, [r4, #16]
 800e612:	b943      	cbnz	r3, 800e626 <__swbuf_r+0x32>
 800e614:	4621      	mov	r1, r4
 800e616:	4628      	mov	r0, r5
 800e618:	f000 f82a 	bl	800e670 <__swsetup_r>
 800e61c:	b118      	cbz	r0, 800e626 <__swbuf_r+0x32>
 800e61e:	f04f 37ff 	mov.w	r7, #4294967295
 800e622:	4638      	mov	r0, r7
 800e624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	6922      	ldr	r2, [r4, #16]
 800e62a:	1a98      	subs	r0, r3, r2
 800e62c:	6963      	ldr	r3, [r4, #20]
 800e62e:	b2f6      	uxtb	r6, r6
 800e630:	4283      	cmp	r3, r0
 800e632:	4637      	mov	r7, r6
 800e634:	dc05      	bgt.n	800e642 <__swbuf_r+0x4e>
 800e636:	4621      	mov	r1, r4
 800e638:	4628      	mov	r0, r5
 800e63a:	f7ff fa47 	bl	800dacc <_fflush_r>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d1ed      	bne.n	800e61e <__swbuf_r+0x2a>
 800e642:	68a3      	ldr	r3, [r4, #8]
 800e644:	3b01      	subs	r3, #1
 800e646:	60a3      	str	r3, [r4, #8]
 800e648:	6823      	ldr	r3, [r4, #0]
 800e64a:	1c5a      	adds	r2, r3, #1
 800e64c:	6022      	str	r2, [r4, #0]
 800e64e:	701e      	strb	r6, [r3, #0]
 800e650:	6962      	ldr	r2, [r4, #20]
 800e652:	1c43      	adds	r3, r0, #1
 800e654:	429a      	cmp	r2, r3
 800e656:	d004      	beq.n	800e662 <__swbuf_r+0x6e>
 800e658:	89a3      	ldrh	r3, [r4, #12]
 800e65a:	07db      	lsls	r3, r3, #31
 800e65c:	d5e1      	bpl.n	800e622 <__swbuf_r+0x2e>
 800e65e:	2e0a      	cmp	r6, #10
 800e660:	d1df      	bne.n	800e622 <__swbuf_r+0x2e>
 800e662:	4621      	mov	r1, r4
 800e664:	4628      	mov	r0, r5
 800e666:	f7ff fa31 	bl	800dacc <_fflush_r>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d0d9      	beq.n	800e622 <__swbuf_r+0x2e>
 800e66e:	e7d6      	b.n	800e61e <__swbuf_r+0x2a>

0800e670 <__swsetup_r>:
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4b29      	ldr	r3, [pc, #164]	@ (800e718 <__swsetup_r+0xa8>)
 800e674:	4605      	mov	r5, r0
 800e676:	6818      	ldr	r0, [r3, #0]
 800e678:	460c      	mov	r4, r1
 800e67a:	b118      	cbz	r0, 800e684 <__swsetup_r+0x14>
 800e67c:	6a03      	ldr	r3, [r0, #32]
 800e67e:	b90b      	cbnz	r3, 800e684 <__swsetup_r+0x14>
 800e680:	f7fc fc9e 	bl	800afc0 <__sinit>
 800e684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e688:	0719      	lsls	r1, r3, #28
 800e68a:	d422      	bmi.n	800e6d2 <__swsetup_r+0x62>
 800e68c:	06da      	lsls	r2, r3, #27
 800e68e:	d407      	bmi.n	800e6a0 <__swsetup_r+0x30>
 800e690:	2209      	movs	r2, #9
 800e692:	602a      	str	r2, [r5, #0]
 800e694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e698:	81a3      	strh	r3, [r4, #12]
 800e69a:	f04f 30ff 	mov.w	r0, #4294967295
 800e69e:	e033      	b.n	800e708 <__swsetup_r+0x98>
 800e6a0:	0758      	lsls	r0, r3, #29
 800e6a2:	d512      	bpl.n	800e6ca <__swsetup_r+0x5a>
 800e6a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6a6:	b141      	cbz	r1, 800e6ba <__swsetup_r+0x4a>
 800e6a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6ac:	4299      	cmp	r1, r3
 800e6ae:	d002      	beq.n	800e6b6 <__swsetup_r+0x46>
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	f7fd fc01 	bl	800beb8 <_free_r>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6ba:	89a3      	ldrh	r3, [r4, #12]
 800e6bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6c0:	81a3      	strh	r3, [r4, #12]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	6063      	str	r3, [r4, #4]
 800e6c6:	6923      	ldr	r3, [r4, #16]
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	f043 0308 	orr.w	r3, r3, #8
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	6923      	ldr	r3, [r4, #16]
 800e6d4:	b94b      	cbnz	r3, 800e6ea <__swsetup_r+0x7a>
 800e6d6:	89a3      	ldrh	r3, [r4, #12]
 800e6d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6e0:	d003      	beq.n	800e6ea <__swsetup_r+0x7a>
 800e6e2:	4621      	mov	r1, r4
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	f000 f883 	bl	800e7f0 <__smakebuf_r>
 800e6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ee:	f013 0201 	ands.w	r2, r3, #1
 800e6f2:	d00a      	beq.n	800e70a <__swsetup_r+0x9a>
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	60a2      	str	r2, [r4, #8]
 800e6f8:	6962      	ldr	r2, [r4, #20]
 800e6fa:	4252      	negs	r2, r2
 800e6fc:	61a2      	str	r2, [r4, #24]
 800e6fe:	6922      	ldr	r2, [r4, #16]
 800e700:	b942      	cbnz	r2, 800e714 <__swsetup_r+0xa4>
 800e702:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e706:	d1c5      	bne.n	800e694 <__swsetup_r+0x24>
 800e708:	bd38      	pop	{r3, r4, r5, pc}
 800e70a:	0799      	lsls	r1, r3, #30
 800e70c:	bf58      	it	pl
 800e70e:	6962      	ldrpl	r2, [r4, #20]
 800e710:	60a2      	str	r2, [r4, #8]
 800e712:	e7f4      	b.n	800e6fe <__swsetup_r+0x8e>
 800e714:	2000      	movs	r0, #0
 800e716:	e7f7      	b.n	800e708 <__swsetup_r+0x98>
 800e718:	20000198 	.word	0x20000198

0800e71c <_raise_r>:
 800e71c:	291f      	cmp	r1, #31
 800e71e:	b538      	push	{r3, r4, r5, lr}
 800e720:	4605      	mov	r5, r0
 800e722:	460c      	mov	r4, r1
 800e724:	d904      	bls.n	800e730 <_raise_r+0x14>
 800e726:	2316      	movs	r3, #22
 800e728:	6003      	str	r3, [r0, #0]
 800e72a:	f04f 30ff 	mov.w	r0, #4294967295
 800e72e:	bd38      	pop	{r3, r4, r5, pc}
 800e730:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e732:	b112      	cbz	r2, 800e73a <_raise_r+0x1e>
 800e734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e738:	b94b      	cbnz	r3, 800e74e <_raise_r+0x32>
 800e73a:	4628      	mov	r0, r5
 800e73c:	f000 f830 	bl	800e7a0 <_getpid_r>
 800e740:	4622      	mov	r2, r4
 800e742:	4601      	mov	r1, r0
 800e744:	4628      	mov	r0, r5
 800e746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e74a:	f000 b817 	b.w	800e77c <_kill_r>
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d00a      	beq.n	800e768 <_raise_r+0x4c>
 800e752:	1c59      	adds	r1, r3, #1
 800e754:	d103      	bne.n	800e75e <_raise_r+0x42>
 800e756:	2316      	movs	r3, #22
 800e758:	6003      	str	r3, [r0, #0]
 800e75a:	2001      	movs	r0, #1
 800e75c:	e7e7      	b.n	800e72e <_raise_r+0x12>
 800e75e:	2100      	movs	r1, #0
 800e760:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e764:	4620      	mov	r0, r4
 800e766:	4798      	blx	r3
 800e768:	2000      	movs	r0, #0
 800e76a:	e7e0      	b.n	800e72e <_raise_r+0x12>

0800e76c <raise>:
 800e76c:	4b02      	ldr	r3, [pc, #8]	@ (800e778 <raise+0xc>)
 800e76e:	4601      	mov	r1, r0
 800e770:	6818      	ldr	r0, [r3, #0]
 800e772:	f7ff bfd3 	b.w	800e71c <_raise_r>
 800e776:	bf00      	nop
 800e778:	20000198 	.word	0x20000198

0800e77c <_kill_r>:
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	4d07      	ldr	r5, [pc, #28]	@ (800e79c <_kill_r+0x20>)
 800e780:	2300      	movs	r3, #0
 800e782:	4604      	mov	r4, r0
 800e784:	4608      	mov	r0, r1
 800e786:	4611      	mov	r1, r2
 800e788:	602b      	str	r3, [r5, #0]
 800e78a:	f7f3 fe4b 	bl	8002424 <_kill>
 800e78e:	1c43      	adds	r3, r0, #1
 800e790:	d102      	bne.n	800e798 <_kill_r+0x1c>
 800e792:	682b      	ldr	r3, [r5, #0]
 800e794:	b103      	cbz	r3, 800e798 <_kill_r+0x1c>
 800e796:	6023      	str	r3, [r4, #0]
 800e798:	bd38      	pop	{r3, r4, r5, pc}
 800e79a:	bf00      	nop
 800e79c:	200022d4 	.word	0x200022d4

0800e7a0 <_getpid_r>:
 800e7a0:	f7f3 be38 	b.w	8002414 <_getpid>

0800e7a4 <__swhatbuf_r>:
 800e7a4:	b570      	push	{r4, r5, r6, lr}
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ac:	2900      	cmp	r1, #0
 800e7ae:	b096      	sub	sp, #88	@ 0x58
 800e7b0:	4615      	mov	r5, r2
 800e7b2:	461e      	mov	r6, r3
 800e7b4:	da0d      	bge.n	800e7d2 <__swhatbuf_r+0x2e>
 800e7b6:	89a3      	ldrh	r3, [r4, #12]
 800e7b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7bc:	f04f 0100 	mov.w	r1, #0
 800e7c0:	bf14      	ite	ne
 800e7c2:	2340      	movne	r3, #64	@ 0x40
 800e7c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	6031      	str	r1, [r6, #0]
 800e7cc:	602b      	str	r3, [r5, #0]
 800e7ce:	b016      	add	sp, #88	@ 0x58
 800e7d0:	bd70      	pop	{r4, r5, r6, pc}
 800e7d2:	466a      	mov	r2, sp
 800e7d4:	f000 f848 	bl	800e868 <_fstat_r>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	dbec      	blt.n	800e7b6 <__swhatbuf_r+0x12>
 800e7dc:	9901      	ldr	r1, [sp, #4]
 800e7de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7e6:	4259      	negs	r1, r3
 800e7e8:	4159      	adcs	r1, r3
 800e7ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7ee:	e7eb      	b.n	800e7c8 <__swhatbuf_r+0x24>

0800e7f0 <__smakebuf_r>:
 800e7f0:	898b      	ldrh	r3, [r1, #12]
 800e7f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7f4:	079d      	lsls	r5, r3, #30
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	460c      	mov	r4, r1
 800e7fa:	d507      	bpl.n	800e80c <__smakebuf_r+0x1c>
 800e7fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	6123      	str	r3, [r4, #16]
 800e804:	2301      	movs	r3, #1
 800e806:	6163      	str	r3, [r4, #20]
 800e808:	b003      	add	sp, #12
 800e80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e80c:	ab01      	add	r3, sp, #4
 800e80e:	466a      	mov	r2, sp
 800e810:	f7ff ffc8 	bl	800e7a4 <__swhatbuf_r>
 800e814:	9f00      	ldr	r7, [sp, #0]
 800e816:	4605      	mov	r5, r0
 800e818:	4639      	mov	r1, r7
 800e81a:	4630      	mov	r0, r6
 800e81c:	f7fd fbc0 	bl	800bfa0 <_malloc_r>
 800e820:	b948      	cbnz	r0, 800e836 <__smakebuf_r+0x46>
 800e822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e826:	059a      	lsls	r2, r3, #22
 800e828:	d4ee      	bmi.n	800e808 <__smakebuf_r+0x18>
 800e82a:	f023 0303 	bic.w	r3, r3, #3
 800e82e:	f043 0302 	orr.w	r3, r3, #2
 800e832:	81a3      	strh	r3, [r4, #12]
 800e834:	e7e2      	b.n	800e7fc <__smakebuf_r+0xc>
 800e836:	89a3      	ldrh	r3, [r4, #12]
 800e838:	6020      	str	r0, [r4, #0]
 800e83a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e83e:	81a3      	strh	r3, [r4, #12]
 800e840:	9b01      	ldr	r3, [sp, #4]
 800e842:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e846:	b15b      	cbz	r3, 800e860 <__smakebuf_r+0x70>
 800e848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e84c:	4630      	mov	r0, r6
 800e84e:	f000 f81d 	bl	800e88c <_isatty_r>
 800e852:	b128      	cbz	r0, 800e860 <__smakebuf_r+0x70>
 800e854:	89a3      	ldrh	r3, [r4, #12]
 800e856:	f023 0303 	bic.w	r3, r3, #3
 800e85a:	f043 0301 	orr.w	r3, r3, #1
 800e85e:	81a3      	strh	r3, [r4, #12]
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	431d      	orrs	r5, r3
 800e864:	81a5      	strh	r5, [r4, #12]
 800e866:	e7cf      	b.n	800e808 <__smakebuf_r+0x18>

0800e868 <_fstat_r>:
 800e868:	b538      	push	{r3, r4, r5, lr}
 800e86a:	4d07      	ldr	r5, [pc, #28]	@ (800e888 <_fstat_r+0x20>)
 800e86c:	2300      	movs	r3, #0
 800e86e:	4604      	mov	r4, r0
 800e870:	4608      	mov	r0, r1
 800e872:	4611      	mov	r1, r2
 800e874:	602b      	str	r3, [r5, #0]
 800e876:	f7f3 fe35 	bl	80024e4 <_fstat>
 800e87a:	1c43      	adds	r3, r0, #1
 800e87c:	d102      	bne.n	800e884 <_fstat_r+0x1c>
 800e87e:	682b      	ldr	r3, [r5, #0]
 800e880:	b103      	cbz	r3, 800e884 <_fstat_r+0x1c>
 800e882:	6023      	str	r3, [r4, #0]
 800e884:	bd38      	pop	{r3, r4, r5, pc}
 800e886:	bf00      	nop
 800e888:	200022d4 	.word	0x200022d4

0800e88c <_isatty_r>:
 800e88c:	b538      	push	{r3, r4, r5, lr}
 800e88e:	4d06      	ldr	r5, [pc, #24]	@ (800e8a8 <_isatty_r+0x1c>)
 800e890:	2300      	movs	r3, #0
 800e892:	4604      	mov	r4, r0
 800e894:	4608      	mov	r0, r1
 800e896:	602b      	str	r3, [r5, #0]
 800e898:	f7f3 fe34 	bl	8002504 <_isatty>
 800e89c:	1c43      	adds	r3, r0, #1
 800e89e:	d102      	bne.n	800e8a6 <_isatty_r+0x1a>
 800e8a0:	682b      	ldr	r3, [r5, #0]
 800e8a2:	b103      	cbz	r3, 800e8a6 <_isatty_r+0x1a>
 800e8a4:	6023      	str	r3, [r4, #0]
 800e8a6:	bd38      	pop	{r3, r4, r5, pc}
 800e8a8:	200022d4 	.word	0x200022d4

0800e8ac <atan2>:
 800e8ac:	f000 b904 	b.w	800eab8 <__ieee754_atan2>

0800e8b0 <sqrt>:
 800e8b0:	b538      	push	{r3, r4, r5, lr}
 800e8b2:	ed2d 8b02 	vpush	{d8}
 800e8b6:	ec55 4b10 	vmov	r4, r5, d0
 800e8ba:	f000 f825 	bl	800e908 <__ieee754_sqrt>
 800e8be:	4622      	mov	r2, r4
 800e8c0:	462b      	mov	r3, r5
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	4629      	mov	r1, r5
 800e8c6:	eeb0 8a40 	vmov.f32	s16, s0
 800e8ca:	eef0 8a60 	vmov.f32	s17, s1
 800e8ce:	f7f2 f935 	bl	8000b3c <__aeabi_dcmpun>
 800e8d2:	b990      	cbnz	r0, 800e8fa <sqrt+0x4a>
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	4620      	mov	r0, r4
 800e8da:	4629      	mov	r1, r5
 800e8dc:	f7f2 f906 	bl	8000aec <__aeabi_dcmplt>
 800e8e0:	b158      	cbz	r0, 800e8fa <sqrt+0x4a>
 800e8e2:	f7fc fc5b 	bl	800b19c <__errno>
 800e8e6:	2321      	movs	r3, #33	@ 0x21
 800e8e8:	6003      	str	r3, [r0, #0]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	4610      	mov	r0, r2
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	f7f1 ffb3 	bl	800085c <__aeabi_ddiv>
 800e8f6:	ec41 0b18 	vmov	d8, r0, r1
 800e8fa:	eeb0 0a48 	vmov.f32	s0, s16
 800e8fe:	eef0 0a68 	vmov.f32	s1, s17
 800e902:	ecbd 8b02 	vpop	{d8}
 800e906:	bd38      	pop	{r3, r4, r5, pc}

0800e908 <__ieee754_sqrt>:
 800e908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e90c:	4a66      	ldr	r2, [pc, #408]	@ (800eaa8 <__ieee754_sqrt+0x1a0>)
 800e90e:	ec55 4b10 	vmov	r4, r5, d0
 800e912:	43aa      	bics	r2, r5
 800e914:	462b      	mov	r3, r5
 800e916:	4621      	mov	r1, r4
 800e918:	d110      	bne.n	800e93c <__ieee754_sqrt+0x34>
 800e91a:	4622      	mov	r2, r4
 800e91c:	4620      	mov	r0, r4
 800e91e:	4629      	mov	r1, r5
 800e920:	f7f1 fe72 	bl	8000608 <__aeabi_dmul>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	4620      	mov	r0, r4
 800e92a:	4629      	mov	r1, r5
 800e92c:	f7f1 fcb6 	bl	800029c <__adddf3>
 800e930:	4604      	mov	r4, r0
 800e932:	460d      	mov	r5, r1
 800e934:	ec45 4b10 	vmov	d0, r4, r5
 800e938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e93c:	2d00      	cmp	r5, #0
 800e93e:	dc0e      	bgt.n	800e95e <__ieee754_sqrt+0x56>
 800e940:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e944:	4322      	orrs	r2, r4
 800e946:	d0f5      	beq.n	800e934 <__ieee754_sqrt+0x2c>
 800e948:	b19d      	cbz	r5, 800e972 <__ieee754_sqrt+0x6a>
 800e94a:	4622      	mov	r2, r4
 800e94c:	4620      	mov	r0, r4
 800e94e:	4629      	mov	r1, r5
 800e950:	f7f1 fca2 	bl	8000298 <__aeabi_dsub>
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	f7f1 ff80 	bl	800085c <__aeabi_ddiv>
 800e95c:	e7e8      	b.n	800e930 <__ieee754_sqrt+0x28>
 800e95e:	152a      	asrs	r2, r5, #20
 800e960:	d115      	bne.n	800e98e <__ieee754_sqrt+0x86>
 800e962:	2000      	movs	r0, #0
 800e964:	e009      	b.n	800e97a <__ieee754_sqrt+0x72>
 800e966:	0acb      	lsrs	r3, r1, #11
 800e968:	3a15      	subs	r2, #21
 800e96a:	0549      	lsls	r1, r1, #21
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d0fa      	beq.n	800e966 <__ieee754_sqrt+0x5e>
 800e970:	e7f7      	b.n	800e962 <__ieee754_sqrt+0x5a>
 800e972:	462a      	mov	r2, r5
 800e974:	e7fa      	b.n	800e96c <__ieee754_sqrt+0x64>
 800e976:	005b      	lsls	r3, r3, #1
 800e978:	3001      	adds	r0, #1
 800e97a:	02dc      	lsls	r4, r3, #11
 800e97c:	d5fb      	bpl.n	800e976 <__ieee754_sqrt+0x6e>
 800e97e:	1e44      	subs	r4, r0, #1
 800e980:	1b12      	subs	r2, r2, r4
 800e982:	f1c0 0420 	rsb	r4, r0, #32
 800e986:	fa21 f404 	lsr.w	r4, r1, r4
 800e98a:	4323      	orrs	r3, r4
 800e98c:	4081      	lsls	r1, r0
 800e98e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e992:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800e996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e99a:	07d2      	lsls	r2, r2, #31
 800e99c:	bf5c      	itt	pl
 800e99e:	005b      	lslpl	r3, r3, #1
 800e9a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e9a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e9a8:	bf58      	it	pl
 800e9aa:	0049      	lslpl	r1, r1, #1
 800e9ac:	2600      	movs	r6, #0
 800e9ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e9b2:	107f      	asrs	r7, r7, #1
 800e9b4:	0049      	lsls	r1, r1, #1
 800e9b6:	2016      	movs	r0, #22
 800e9b8:	4632      	mov	r2, r6
 800e9ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e9be:	1915      	adds	r5, r2, r4
 800e9c0:	429d      	cmp	r5, r3
 800e9c2:	bfde      	ittt	le
 800e9c4:	192a      	addle	r2, r5, r4
 800e9c6:	1b5b      	suble	r3, r3, r5
 800e9c8:	1936      	addle	r6, r6, r4
 800e9ca:	0fcd      	lsrs	r5, r1, #31
 800e9cc:	3801      	subs	r0, #1
 800e9ce:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e9d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e9d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e9da:	d1f0      	bne.n	800e9be <__ieee754_sqrt+0xb6>
 800e9dc:	4605      	mov	r5, r0
 800e9de:	2420      	movs	r4, #32
 800e9e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	eb0c 0e00 	add.w	lr, ip, r0
 800e9ea:	dc02      	bgt.n	800e9f2 <__ieee754_sqrt+0xea>
 800e9ec:	d113      	bne.n	800ea16 <__ieee754_sqrt+0x10e>
 800e9ee:	458e      	cmp	lr, r1
 800e9f0:	d811      	bhi.n	800ea16 <__ieee754_sqrt+0x10e>
 800e9f2:	f1be 0f00 	cmp.w	lr, #0
 800e9f6:	eb0e 000c 	add.w	r0, lr, ip
 800e9fa:	da3f      	bge.n	800ea7c <__ieee754_sqrt+0x174>
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	db3d      	blt.n	800ea7c <__ieee754_sqrt+0x174>
 800ea00:	f102 0801 	add.w	r8, r2, #1
 800ea04:	1a9b      	subs	r3, r3, r2
 800ea06:	458e      	cmp	lr, r1
 800ea08:	bf88      	it	hi
 800ea0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ea0e:	eba1 010e 	sub.w	r1, r1, lr
 800ea12:	4465      	add	r5, ip
 800ea14:	4642      	mov	r2, r8
 800ea16:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ea1a:	3c01      	subs	r4, #1
 800ea1c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ea20:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ea24:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ea28:	d1dc      	bne.n	800e9e4 <__ieee754_sqrt+0xdc>
 800ea2a:	4319      	orrs	r1, r3
 800ea2c:	d01b      	beq.n	800ea66 <__ieee754_sqrt+0x15e>
 800ea2e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800eaac <__ieee754_sqrt+0x1a4>
 800ea32:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800eab0 <__ieee754_sqrt+0x1a8>
 800ea36:	e9da 0100 	ldrd	r0, r1, [sl]
 800ea3a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ea3e:	f7f1 fc2b 	bl	8000298 <__aeabi_dsub>
 800ea42:	e9da 8900 	ldrd	r8, r9, [sl]
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	4640      	mov	r0, r8
 800ea4c:	4649      	mov	r1, r9
 800ea4e:	f7f2 f857 	bl	8000b00 <__aeabi_dcmple>
 800ea52:	b140      	cbz	r0, 800ea66 <__ieee754_sqrt+0x15e>
 800ea54:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ea58:	e9da 0100 	ldrd	r0, r1, [sl]
 800ea5c:	e9db 2300 	ldrd	r2, r3, [fp]
 800ea60:	d10e      	bne.n	800ea80 <__ieee754_sqrt+0x178>
 800ea62:	3601      	adds	r6, #1
 800ea64:	4625      	mov	r5, r4
 800ea66:	1073      	asrs	r3, r6, #1
 800ea68:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800ea6c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800ea70:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800ea74:	086b      	lsrs	r3, r5, #1
 800ea76:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800ea7a:	e759      	b.n	800e930 <__ieee754_sqrt+0x28>
 800ea7c:	4690      	mov	r8, r2
 800ea7e:	e7c1      	b.n	800ea04 <__ieee754_sqrt+0xfc>
 800ea80:	f7f1 fc0c 	bl	800029c <__adddf3>
 800ea84:	e9da 8900 	ldrd	r8, r9, [sl]
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	4640      	mov	r0, r8
 800ea8e:	4649      	mov	r1, r9
 800ea90:	f7f2 f82c 	bl	8000aec <__aeabi_dcmplt>
 800ea94:	b120      	cbz	r0, 800eaa0 <__ieee754_sqrt+0x198>
 800ea96:	1cab      	adds	r3, r5, #2
 800ea98:	bf08      	it	eq
 800ea9a:	3601      	addeq	r6, #1
 800ea9c:	3502      	adds	r5, #2
 800ea9e:	e7e2      	b.n	800ea66 <__ieee754_sqrt+0x15e>
 800eaa0:	1c6b      	adds	r3, r5, #1
 800eaa2:	f023 0501 	bic.w	r5, r3, #1
 800eaa6:	e7de      	b.n	800ea66 <__ieee754_sqrt+0x15e>
 800eaa8:	7ff00000 	.word	0x7ff00000
 800eaac:	0800f428 	.word	0x0800f428
 800eab0:	0800f420 	.word	0x0800f420
 800eab4:	00000000 	.word	0x00000000

0800eab8 <__ieee754_atan2>:
 800eab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eabc:	ec57 6b11 	vmov	r6, r7, d1
 800eac0:	4273      	negs	r3, r6
 800eac2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ec40 <__ieee754_atan2+0x188>
 800eac6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800eaca:	4333      	orrs	r3, r6
 800eacc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ead0:	4543      	cmp	r3, r8
 800ead2:	ec51 0b10 	vmov	r0, r1, d0
 800ead6:	4635      	mov	r5, r6
 800ead8:	d809      	bhi.n	800eaee <__ieee754_atan2+0x36>
 800eada:	4244      	negs	r4, r0
 800eadc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eae0:	4304      	orrs	r4, r0
 800eae2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800eae6:	4544      	cmp	r4, r8
 800eae8:	468e      	mov	lr, r1
 800eaea:	4681      	mov	r9, r0
 800eaec:	d907      	bls.n	800eafe <__ieee754_atan2+0x46>
 800eaee:	4632      	mov	r2, r6
 800eaf0:	463b      	mov	r3, r7
 800eaf2:	f7f1 fbd3 	bl	800029c <__adddf3>
 800eaf6:	ec41 0b10 	vmov	d0, r0, r1
 800eafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eafe:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800eb02:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800eb06:	4334      	orrs	r4, r6
 800eb08:	d103      	bne.n	800eb12 <__ieee754_atan2+0x5a>
 800eb0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb0e:	f000 b89b 	b.w	800ec48 <atan>
 800eb12:	17bc      	asrs	r4, r7, #30
 800eb14:	f004 0402 	and.w	r4, r4, #2
 800eb18:	ea53 0909 	orrs.w	r9, r3, r9
 800eb1c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800eb20:	d107      	bne.n	800eb32 <__ieee754_atan2+0x7a>
 800eb22:	2c02      	cmp	r4, #2
 800eb24:	d05f      	beq.n	800ebe6 <__ieee754_atan2+0x12e>
 800eb26:	2c03      	cmp	r4, #3
 800eb28:	d1e5      	bne.n	800eaf6 <__ieee754_atan2+0x3e>
 800eb2a:	a143      	add	r1, pc, #268	@ (adr r1, 800ec38 <__ieee754_atan2+0x180>)
 800eb2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb30:	e7e1      	b.n	800eaf6 <__ieee754_atan2+0x3e>
 800eb32:	4315      	orrs	r5, r2
 800eb34:	d106      	bne.n	800eb44 <__ieee754_atan2+0x8c>
 800eb36:	f1be 0f00 	cmp.w	lr, #0
 800eb3a:	db5f      	blt.n	800ebfc <__ieee754_atan2+0x144>
 800eb3c:	a136      	add	r1, pc, #216	@ (adr r1, 800ec18 <__ieee754_atan2+0x160>)
 800eb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb42:	e7d8      	b.n	800eaf6 <__ieee754_atan2+0x3e>
 800eb44:	4542      	cmp	r2, r8
 800eb46:	d10f      	bne.n	800eb68 <__ieee754_atan2+0xb0>
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	f104 34ff 	add.w	r4, r4, #4294967295
 800eb4e:	d107      	bne.n	800eb60 <__ieee754_atan2+0xa8>
 800eb50:	2c02      	cmp	r4, #2
 800eb52:	d84c      	bhi.n	800ebee <__ieee754_atan2+0x136>
 800eb54:	4b36      	ldr	r3, [pc, #216]	@ (800ec30 <__ieee754_atan2+0x178>)
 800eb56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb5e:	e7ca      	b.n	800eaf6 <__ieee754_atan2+0x3e>
 800eb60:	2c02      	cmp	r4, #2
 800eb62:	d848      	bhi.n	800ebf6 <__ieee754_atan2+0x13e>
 800eb64:	4b33      	ldr	r3, [pc, #204]	@ (800ec34 <__ieee754_atan2+0x17c>)
 800eb66:	e7f6      	b.n	800eb56 <__ieee754_atan2+0x9e>
 800eb68:	4543      	cmp	r3, r8
 800eb6a:	d0e4      	beq.n	800eb36 <__ieee754_atan2+0x7e>
 800eb6c:	1a9b      	subs	r3, r3, r2
 800eb6e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800eb72:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eb76:	da1e      	bge.n	800ebb6 <__ieee754_atan2+0xfe>
 800eb78:	2f00      	cmp	r7, #0
 800eb7a:	da01      	bge.n	800eb80 <__ieee754_atan2+0xc8>
 800eb7c:	323c      	adds	r2, #60	@ 0x3c
 800eb7e:	db1e      	blt.n	800ebbe <__ieee754_atan2+0x106>
 800eb80:	4632      	mov	r2, r6
 800eb82:	463b      	mov	r3, r7
 800eb84:	f7f1 fe6a 	bl	800085c <__aeabi_ddiv>
 800eb88:	ec41 0b10 	vmov	d0, r0, r1
 800eb8c:	f000 f9f4 	bl	800ef78 <fabs>
 800eb90:	f000 f85a 	bl	800ec48 <atan>
 800eb94:	ec51 0b10 	vmov	r0, r1, d0
 800eb98:	2c01      	cmp	r4, #1
 800eb9a:	d013      	beq.n	800ebc4 <__ieee754_atan2+0x10c>
 800eb9c:	2c02      	cmp	r4, #2
 800eb9e:	d015      	beq.n	800ebcc <__ieee754_atan2+0x114>
 800eba0:	2c00      	cmp	r4, #0
 800eba2:	d0a8      	beq.n	800eaf6 <__ieee754_atan2+0x3e>
 800eba4:	a318      	add	r3, pc, #96	@ (adr r3, 800ec08 <__ieee754_atan2+0x150>)
 800eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebaa:	f7f1 fb75 	bl	8000298 <__aeabi_dsub>
 800ebae:	a318      	add	r3, pc, #96	@ (adr r3, 800ec10 <__ieee754_atan2+0x158>)
 800ebb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb4:	e014      	b.n	800ebe0 <__ieee754_atan2+0x128>
 800ebb6:	a118      	add	r1, pc, #96	@ (adr r1, 800ec18 <__ieee754_atan2+0x160>)
 800ebb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebbc:	e7ec      	b.n	800eb98 <__ieee754_atan2+0xe0>
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	e7e9      	b.n	800eb98 <__ieee754_atan2+0xe0>
 800ebc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ebc8:	4619      	mov	r1, r3
 800ebca:	e794      	b.n	800eaf6 <__ieee754_atan2+0x3e>
 800ebcc:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec08 <__ieee754_atan2+0x150>)
 800ebce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd2:	f7f1 fb61 	bl	8000298 <__aeabi_dsub>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	460b      	mov	r3, r1
 800ebda:	a10d      	add	r1, pc, #52	@ (adr r1, 800ec10 <__ieee754_atan2+0x158>)
 800ebdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebe0:	f7f1 fb5a 	bl	8000298 <__aeabi_dsub>
 800ebe4:	e787      	b.n	800eaf6 <__ieee754_atan2+0x3e>
 800ebe6:	a10a      	add	r1, pc, #40	@ (adr r1, 800ec10 <__ieee754_atan2+0x158>)
 800ebe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebec:	e783      	b.n	800eaf6 <__ieee754_atan2+0x3e>
 800ebee:	a10c      	add	r1, pc, #48	@ (adr r1, 800ec20 <__ieee754_atan2+0x168>)
 800ebf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebf4:	e77f      	b.n	800eaf6 <__ieee754_atan2+0x3e>
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	e77c      	b.n	800eaf6 <__ieee754_atan2+0x3e>
 800ebfc:	a10a      	add	r1, pc, #40	@ (adr r1, 800ec28 <__ieee754_atan2+0x170>)
 800ebfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec02:	e778      	b.n	800eaf6 <__ieee754_atan2+0x3e>
 800ec04:	f3af 8000 	nop.w
 800ec08:	33145c07 	.word	0x33145c07
 800ec0c:	3ca1a626 	.word	0x3ca1a626
 800ec10:	54442d18 	.word	0x54442d18
 800ec14:	400921fb 	.word	0x400921fb
 800ec18:	54442d18 	.word	0x54442d18
 800ec1c:	3ff921fb 	.word	0x3ff921fb
 800ec20:	54442d18 	.word	0x54442d18
 800ec24:	3fe921fb 	.word	0x3fe921fb
 800ec28:	54442d18 	.word	0x54442d18
 800ec2c:	bff921fb 	.word	0xbff921fb
 800ec30:	0800f448 	.word	0x0800f448
 800ec34:	0800f430 	.word	0x0800f430
 800ec38:	54442d18 	.word	0x54442d18
 800ec3c:	c00921fb 	.word	0xc00921fb
 800ec40:	7ff00000 	.word	0x7ff00000
 800ec44:	00000000 	.word	0x00000000

0800ec48 <atan>:
 800ec48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec4c:	ec55 4b10 	vmov	r4, r5, d0
 800ec50:	4bbf      	ldr	r3, [pc, #764]	@ (800ef50 <atan+0x308>)
 800ec52:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ec56:	429e      	cmp	r6, r3
 800ec58:	46ab      	mov	fp, r5
 800ec5a:	d918      	bls.n	800ec8e <atan+0x46>
 800ec5c:	4bbd      	ldr	r3, [pc, #756]	@ (800ef54 <atan+0x30c>)
 800ec5e:	429e      	cmp	r6, r3
 800ec60:	d801      	bhi.n	800ec66 <atan+0x1e>
 800ec62:	d109      	bne.n	800ec78 <atan+0x30>
 800ec64:	b144      	cbz	r4, 800ec78 <atan+0x30>
 800ec66:	4622      	mov	r2, r4
 800ec68:	462b      	mov	r3, r5
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	f7f1 fb15 	bl	800029c <__adddf3>
 800ec72:	4604      	mov	r4, r0
 800ec74:	460d      	mov	r5, r1
 800ec76:	e006      	b.n	800ec86 <atan+0x3e>
 800ec78:	f1bb 0f00 	cmp.w	fp, #0
 800ec7c:	f340 812b 	ble.w	800eed6 <atan+0x28e>
 800ec80:	a597      	add	r5, pc, #604	@ (adr r5, 800eee0 <atan+0x298>)
 800ec82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ec86:	ec45 4b10 	vmov	d0, r4, r5
 800ec8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec8e:	4bb2      	ldr	r3, [pc, #712]	@ (800ef58 <atan+0x310>)
 800ec90:	429e      	cmp	r6, r3
 800ec92:	d813      	bhi.n	800ecbc <atan+0x74>
 800ec94:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ec98:	429e      	cmp	r6, r3
 800ec9a:	d80c      	bhi.n	800ecb6 <atan+0x6e>
 800ec9c:	a392      	add	r3, pc, #584	@ (adr r3, 800eee8 <atan+0x2a0>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	4620      	mov	r0, r4
 800eca4:	4629      	mov	r1, r5
 800eca6:	f7f1 faf9 	bl	800029c <__adddf3>
 800ecaa:	4bac      	ldr	r3, [pc, #688]	@ (800ef5c <atan+0x314>)
 800ecac:	2200      	movs	r2, #0
 800ecae:	f7f1 ff3b 	bl	8000b28 <__aeabi_dcmpgt>
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d1e7      	bne.n	800ec86 <atan+0x3e>
 800ecb6:	f04f 3aff 	mov.w	sl, #4294967295
 800ecba:	e029      	b.n	800ed10 <atan+0xc8>
 800ecbc:	f000 f95c 	bl	800ef78 <fabs>
 800ecc0:	4ba7      	ldr	r3, [pc, #668]	@ (800ef60 <atan+0x318>)
 800ecc2:	429e      	cmp	r6, r3
 800ecc4:	ec55 4b10 	vmov	r4, r5, d0
 800ecc8:	f200 80bc 	bhi.w	800ee44 <atan+0x1fc>
 800eccc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ecd0:	429e      	cmp	r6, r3
 800ecd2:	f200 809e 	bhi.w	800ee12 <atan+0x1ca>
 800ecd6:	4622      	mov	r2, r4
 800ecd8:	462b      	mov	r3, r5
 800ecda:	4620      	mov	r0, r4
 800ecdc:	4629      	mov	r1, r5
 800ecde:	f7f1 fadd 	bl	800029c <__adddf3>
 800ece2:	4b9e      	ldr	r3, [pc, #632]	@ (800ef5c <atan+0x314>)
 800ece4:	2200      	movs	r2, #0
 800ece6:	f7f1 fad7 	bl	8000298 <__aeabi_dsub>
 800ecea:	2200      	movs	r2, #0
 800ecec:	4606      	mov	r6, r0
 800ecee:	460f      	mov	r7, r1
 800ecf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	4629      	mov	r1, r5
 800ecf8:	f7f1 fad0 	bl	800029c <__adddf3>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	4630      	mov	r0, r6
 800ed02:	4639      	mov	r1, r7
 800ed04:	f7f1 fdaa 	bl	800085c <__aeabi_ddiv>
 800ed08:	f04f 0a00 	mov.w	sl, #0
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	460d      	mov	r5, r1
 800ed10:	4622      	mov	r2, r4
 800ed12:	462b      	mov	r3, r5
 800ed14:	4620      	mov	r0, r4
 800ed16:	4629      	mov	r1, r5
 800ed18:	f7f1 fc76 	bl	8000608 <__aeabi_dmul>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	460b      	mov	r3, r1
 800ed20:	4680      	mov	r8, r0
 800ed22:	4689      	mov	r9, r1
 800ed24:	f7f1 fc70 	bl	8000608 <__aeabi_dmul>
 800ed28:	a371      	add	r3, pc, #452	@ (adr r3, 800eef0 <atan+0x2a8>)
 800ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2e:	4606      	mov	r6, r0
 800ed30:	460f      	mov	r7, r1
 800ed32:	f7f1 fc69 	bl	8000608 <__aeabi_dmul>
 800ed36:	a370      	add	r3, pc, #448	@ (adr r3, 800eef8 <atan+0x2b0>)
 800ed38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3c:	f7f1 faae 	bl	800029c <__adddf3>
 800ed40:	4632      	mov	r2, r6
 800ed42:	463b      	mov	r3, r7
 800ed44:	f7f1 fc60 	bl	8000608 <__aeabi_dmul>
 800ed48:	a36d      	add	r3, pc, #436	@ (adr r3, 800ef00 <atan+0x2b8>)
 800ed4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4e:	f7f1 faa5 	bl	800029c <__adddf3>
 800ed52:	4632      	mov	r2, r6
 800ed54:	463b      	mov	r3, r7
 800ed56:	f7f1 fc57 	bl	8000608 <__aeabi_dmul>
 800ed5a:	a36b      	add	r3, pc, #428	@ (adr r3, 800ef08 <atan+0x2c0>)
 800ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed60:	f7f1 fa9c 	bl	800029c <__adddf3>
 800ed64:	4632      	mov	r2, r6
 800ed66:	463b      	mov	r3, r7
 800ed68:	f7f1 fc4e 	bl	8000608 <__aeabi_dmul>
 800ed6c:	a368      	add	r3, pc, #416	@ (adr r3, 800ef10 <atan+0x2c8>)
 800ed6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed72:	f7f1 fa93 	bl	800029c <__adddf3>
 800ed76:	4632      	mov	r2, r6
 800ed78:	463b      	mov	r3, r7
 800ed7a:	f7f1 fc45 	bl	8000608 <__aeabi_dmul>
 800ed7e:	a366      	add	r3, pc, #408	@ (adr r3, 800ef18 <atan+0x2d0>)
 800ed80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed84:	f7f1 fa8a 	bl	800029c <__adddf3>
 800ed88:	4642      	mov	r2, r8
 800ed8a:	464b      	mov	r3, r9
 800ed8c:	f7f1 fc3c 	bl	8000608 <__aeabi_dmul>
 800ed90:	a363      	add	r3, pc, #396	@ (adr r3, 800ef20 <atan+0x2d8>)
 800ed92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed96:	4680      	mov	r8, r0
 800ed98:	4689      	mov	r9, r1
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	4639      	mov	r1, r7
 800ed9e:	f7f1 fc33 	bl	8000608 <__aeabi_dmul>
 800eda2:	a361      	add	r3, pc, #388	@ (adr r3, 800ef28 <atan+0x2e0>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	f7f1 fa76 	bl	8000298 <__aeabi_dsub>
 800edac:	4632      	mov	r2, r6
 800edae:	463b      	mov	r3, r7
 800edb0:	f7f1 fc2a 	bl	8000608 <__aeabi_dmul>
 800edb4:	a35e      	add	r3, pc, #376	@ (adr r3, 800ef30 <atan+0x2e8>)
 800edb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edba:	f7f1 fa6d 	bl	8000298 <__aeabi_dsub>
 800edbe:	4632      	mov	r2, r6
 800edc0:	463b      	mov	r3, r7
 800edc2:	f7f1 fc21 	bl	8000608 <__aeabi_dmul>
 800edc6:	a35c      	add	r3, pc, #368	@ (adr r3, 800ef38 <atan+0x2f0>)
 800edc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edcc:	f7f1 fa64 	bl	8000298 <__aeabi_dsub>
 800edd0:	4632      	mov	r2, r6
 800edd2:	463b      	mov	r3, r7
 800edd4:	f7f1 fc18 	bl	8000608 <__aeabi_dmul>
 800edd8:	a359      	add	r3, pc, #356	@ (adr r3, 800ef40 <atan+0x2f8>)
 800edda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edde:	f7f1 fa5b 	bl	8000298 <__aeabi_dsub>
 800ede2:	4632      	mov	r2, r6
 800ede4:	463b      	mov	r3, r7
 800ede6:	f7f1 fc0f 	bl	8000608 <__aeabi_dmul>
 800edea:	4602      	mov	r2, r0
 800edec:	460b      	mov	r3, r1
 800edee:	4640      	mov	r0, r8
 800edf0:	4649      	mov	r1, r9
 800edf2:	f7f1 fa53 	bl	800029c <__adddf3>
 800edf6:	4622      	mov	r2, r4
 800edf8:	462b      	mov	r3, r5
 800edfa:	f7f1 fc05 	bl	8000608 <__aeabi_dmul>
 800edfe:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ee02:	4602      	mov	r2, r0
 800ee04:	460b      	mov	r3, r1
 800ee06:	d148      	bne.n	800ee9a <atan+0x252>
 800ee08:	4620      	mov	r0, r4
 800ee0a:	4629      	mov	r1, r5
 800ee0c:	f7f1 fa44 	bl	8000298 <__aeabi_dsub>
 800ee10:	e72f      	b.n	800ec72 <atan+0x2a>
 800ee12:	4b52      	ldr	r3, [pc, #328]	@ (800ef5c <atan+0x314>)
 800ee14:	2200      	movs	r2, #0
 800ee16:	4620      	mov	r0, r4
 800ee18:	4629      	mov	r1, r5
 800ee1a:	f7f1 fa3d 	bl	8000298 <__aeabi_dsub>
 800ee1e:	4b4f      	ldr	r3, [pc, #316]	@ (800ef5c <atan+0x314>)
 800ee20:	4606      	mov	r6, r0
 800ee22:	460f      	mov	r7, r1
 800ee24:	2200      	movs	r2, #0
 800ee26:	4620      	mov	r0, r4
 800ee28:	4629      	mov	r1, r5
 800ee2a:	f7f1 fa37 	bl	800029c <__adddf3>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	4630      	mov	r0, r6
 800ee34:	4639      	mov	r1, r7
 800ee36:	f7f1 fd11 	bl	800085c <__aeabi_ddiv>
 800ee3a:	f04f 0a01 	mov.w	sl, #1
 800ee3e:	4604      	mov	r4, r0
 800ee40:	460d      	mov	r5, r1
 800ee42:	e765      	b.n	800ed10 <atan+0xc8>
 800ee44:	4b47      	ldr	r3, [pc, #284]	@ (800ef64 <atan+0x31c>)
 800ee46:	429e      	cmp	r6, r3
 800ee48:	d21c      	bcs.n	800ee84 <atan+0x23c>
 800ee4a:	4b47      	ldr	r3, [pc, #284]	@ (800ef68 <atan+0x320>)
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	4620      	mov	r0, r4
 800ee50:	4629      	mov	r1, r5
 800ee52:	f7f1 fa21 	bl	8000298 <__aeabi_dsub>
 800ee56:	4b44      	ldr	r3, [pc, #272]	@ (800ef68 <atan+0x320>)
 800ee58:	4606      	mov	r6, r0
 800ee5a:	460f      	mov	r7, r1
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	4620      	mov	r0, r4
 800ee60:	4629      	mov	r1, r5
 800ee62:	f7f1 fbd1 	bl	8000608 <__aeabi_dmul>
 800ee66:	4b3d      	ldr	r3, [pc, #244]	@ (800ef5c <atan+0x314>)
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f7f1 fa17 	bl	800029c <__adddf3>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	4630      	mov	r0, r6
 800ee74:	4639      	mov	r1, r7
 800ee76:	f7f1 fcf1 	bl	800085c <__aeabi_ddiv>
 800ee7a:	f04f 0a02 	mov.w	sl, #2
 800ee7e:	4604      	mov	r4, r0
 800ee80:	460d      	mov	r5, r1
 800ee82:	e745      	b.n	800ed10 <atan+0xc8>
 800ee84:	4622      	mov	r2, r4
 800ee86:	462b      	mov	r3, r5
 800ee88:	4938      	ldr	r1, [pc, #224]	@ (800ef6c <atan+0x324>)
 800ee8a:	2000      	movs	r0, #0
 800ee8c:	f7f1 fce6 	bl	800085c <__aeabi_ddiv>
 800ee90:	f04f 0a03 	mov.w	sl, #3
 800ee94:	4604      	mov	r4, r0
 800ee96:	460d      	mov	r5, r1
 800ee98:	e73a      	b.n	800ed10 <atan+0xc8>
 800ee9a:	4b35      	ldr	r3, [pc, #212]	@ (800ef70 <atan+0x328>)
 800ee9c:	4e35      	ldr	r6, [pc, #212]	@ (800ef74 <atan+0x32c>)
 800ee9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea6:	f7f1 f9f7 	bl	8000298 <__aeabi_dsub>
 800eeaa:	4622      	mov	r2, r4
 800eeac:	462b      	mov	r3, r5
 800eeae:	f7f1 f9f3 	bl	8000298 <__aeabi_dsub>
 800eeb2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	460b      	mov	r3, r1
 800eeba:	e9d6 0100 	ldrd	r0, r1, [r6]
 800eebe:	f7f1 f9eb 	bl	8000298 <__aeabi_dsub>
 800eec2:	f1bb 0f00 	cmp.w	fp, #0
 800eec6:	4604      	mov	r4, r0
 800eec8:	460d      	mov	r5, r1
 800eeca:	f6bf aedc 	bge.w	800ec86 <atan+0x3e>
 800eece:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eed2:	461d      	mov	r5, r3
 800eed4:	e6d7      	b.n	800ec86 <atan+0x3e>
 800eed6:	a51c      	add	r5, pc, #112	@ (adr r5, 800ef48 <atan+0x300>)
 800eed8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eedc:	e6d3      	b.n	800ec86 <atan+0x3e>
 800eede:	bf00      	nop
 800eee0:	54442d18 	.word	0x54442d18
 800eee4:	3ff921fb 	.word	0x3ff921fb
 800eee8:	8800759c 	.word	0x8800759c
 800eeec:	7e37e43c 	.word	0x7e37e43c
 800eef0:	e322da11 	.word	0xe322da11
 800eef4:	3f90ad3a 	.word	0x3f90ad3a
 800eef8:	24760deb 	.word	0x24760deb
 800eefc:	3fa97b4b 	.word	0x3fa97b4b
 800ef00:	a0d03d51 	.word	0xa0d03d51
 800ef04:	3fb10d66 	.word	0x3fb10d66
 800ef08:	c54c206e 	.word	0xc54c206e
 800ef0c:	3fb745cd 	.word	0x3fb745cd
 800ef10:	920083ff 	.word	0x920083ff
 800ef14:	3fc24924 	.word	0x3fc24924
 800ef18:	5555550d 	.word	0x5555550d
 800ef1c:	3fd55555 	.word	0x3fd55555
 800ef20:	2c6a6c2f 	.word	0x2c6a6c2f
 800ef24:	bfa2b444 	.word	0xbfa2b444
 800ef28:	52defd9a 	.word	0x52defd9a
 800ef2c:	3fadde2d 	.word	0x3fadde2d
 800ef30:	af749a6d 	.word	0xaf749a6d
 800ef34:	3fb3b0f2 	.word	0x3fb3b0f2
 800ef38:	fe231671 	.word	0xfe231671
 800ef3c:	3fbc71c6 	.word	0x3fbc71c6
 800ef40:	9998ebc4 	.word	0x9998ebc4
 800ef44:	3fc99999 	.word	0x3fc99999
 800ef48:	54442d18 	.word	0x54442d18
 800ef4c:	bff921fb 	.word	0xbff921fb
 800ef50:	440fffff 	.word	0x440fffff
 800ef54:	7ff00000 	.word	0x7ff00000
 800ef58:	3fdbffff 	.word	0x3fdbffff
 800ef5c:	3ff00000 	.word	0x3ff00000
 800ef60:	3ff2ffff 	.word	0x3ff2ffff
 800ef64:	40038000 	.word	0x40038000
 800ef68:	3ff80000 	.word	0x3ff80000
 800ef6c:	bff00000 	.word	0xbff00000
 800ef70:	0800f460 	.word	0x0800f460
 800ef74:	0800f480 	.word	0x0800f480

0800ef78 <fabs>:
 800ef78:	ec51 0b10 	vmov	r0, r1, d0
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ef82:	ec43 2b10 	vmov	d0, r2, r3
 800ef86:	4770      	bx	lr

0800ef88 <_init>:
 800ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8a:	bf00      	nop
 800ef8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef8e:	bc08      	pop	{r3}
 800ef90:	469e      	mov	lr, r3
 800ef92:	4770      	bx	lr

0800ef94 <_fini>:
 800ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef96:	bf00      	nop
 800ef98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef9a:	bc08      	pop	{r3}
 800ef9c:	469e      	mov	lr, r3
 800ef9e:	4770      	bx	lr
