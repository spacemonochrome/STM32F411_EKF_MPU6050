
F411_EKF1D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000632c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080064c8  080064c8  000074c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006560  08006560  000080ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006560  08006560  00007560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006568  08006568  000080ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006568  08006568  00007568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800656c  0800656c  0000756c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  08006570  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  200000f0  0800665c  000080f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800665c  000085c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011965  00000000  00000000  0000811c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b9  00000000  00000000  00019a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d61  00000000  00000000  0001cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fcb  00000000  00000000  0001da71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013467  00000000  00000000  00034a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e20  00000000  00000000  00047ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dacc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d94  00000000  00000000  000dad08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000dfa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f0 	.word	0x200000f0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080064ac 	.word	0x080064ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000f4 	.word	0x200000f4
 80001d4:	080064ac 	.word	0x080064ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b988 	b.w	8000ec8 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	468e      	mov	lr, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	4688      	mov	r8, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14a      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d962      	bls.n	8000cac <__udivmoddi4+0xdc>
 8000be6:	fab2 f682 	clz	r6, r2
 8000bea:	b14e      	cbz	r6, 8000c00 <__udivmoddi4+0x30>
 8000bec:	f1c6 0320 	rsb	r3, r6, #32
 8000bf0:	fa01 f806 	lsl.w	r8, r1, r6
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	40b7      	lsls	r7, r6
 8000bfa:	ea43 0808 	orr.w	r8, r3, r8
 8000bfe:	40b4      	lsls	r4, r6
 8000c00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c0c:	0c23      	lsrs	r3, r4, #16
 8000c0e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c16:	fb01 f20c 	mul.w	r2, r1, ip
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0x62>
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c24:	f080 80ea 	bcs.w	8000dfc <__udivmoddi4+0x22c>
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f240 80e7 	bls.w	8000dfc <__udivmoddi4+0x22c>
 8000c2e:	3902      	subs	r1, #2
 8000c30:	443b      	add	r3, r7
 8000c32:	1a9a      	subs	r2, r3, r2
 8000c34:	b2a3      	uxth	r3, r4
 8000c36:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c42:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0x8e>
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c50:	f080 80d6 	bcs.w	8000e00 <__udivmoddi4+0x230>
 8000c54:	459c      	cmp	ip, r3
 8000c56:	f240 80d3 	bls.w	8000e00 <__udivmoddi4+0x230>
 8000c5a:	443b      	add	r3, r7
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c62:	eba3 030c 	sub.w	r3, r3, ip
 8000c66:	2100      	movs	r1, #0
 8000c68:	b11d      	cbz	r5, 8000c72 <__udivmoddi4+0xa2>
 8000c6a:	40f3      	lsrs	r3, r6
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d905      	bls.n	8000c86 <__udivmoddi4+0xb6>
 8000c7a:	b10d      	cbz	r5, 8000c80 <__udivmoddi4+0xb0>
 8000c7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c80:	2100      	movs	r1, #0
 8000c82:	4608      	mov	r0, r1
 8000c84:	e7f5      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000c86:	fab3 f183 	clz	r1, r3
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	d146      	bne.n	8000d1c <__udivmoddi4+0x14c>
 8000c8e:	4573      	cmp	r3, lr
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xc8>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 8105 	bhi.w	8000ea2 <__udivmoddi4+0x2d2>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4690      	mov	r8, r2
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	d0e5      	beq.n	8000c72 <__udivmoddi4+0xa2>
 8000ca6:	e9c5 4800 	strd	r4, r8, [r5]
 8000caa:	e7e2      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f000 8090 	beq.w	8000dd2 <__udivmoddi4+0x202>
 8000cb2:	fab2 f682 	clz	r6, r2
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f040 80a4 	bne.w	8000e04 <__udivmoddi4+0x234>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	0c03      	lsrs	r3, r0, #16
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	b280      	uxth	r0, r0
 8000cc6:	b2bc      	uxth	r4, r7
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cce:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cd6:	fb04 f20c 	mul.w	r2, r4, ip
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x11e>
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0x11c>
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	f200 80e0 	bhi.w	8000eac <__udivmoddi4+0x2dc>
 8000cec:	46c4      	mov	ip, r8
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cf4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cf8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cfc:	fb02 f404 	mul.w	r4, r2, r4
 8000d00:	429c      	cmp	r4, r3
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x144>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x142>
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	f200 80ca 	bhi.w	8000ea6 <__udivmoddi4+0x2d6>
 8000d12:	4602      	mov	r2, r0
 8000d14:	1b1b      	subs	r3, r3, r4
 8000d16:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0x98>
 8000d1c:	f1c1 0620 	rsb	r6, r1, #32
 8000d20:	408b      	lsls	r3, r1
 8000d22:	fa22 f706 	lsr.w	r7, r2, r6
 8000d26:	431f      	orrs	r7, r3
 8000d28:	fa0e f401 	lsl.w	r4, lr, r1
 8000d2c:	fa20 f306 	lsr.w	r3, r0, r6
 8000d30:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d34:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d38:	4323      	orrs	r3, r4
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	fa1f fc87 	uxth.w	ip, r7
 8000d42:	fbbe f0f9 	udiv	r0, lr, r9
 8000d46:	0c1c      	lsrs	r4, r3, #16
 8000d48:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d4c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d50:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5a:	d909      	bls.n	8000d70 <__udivmoddi4+0x1a0>
 8000d5c:	193c      	adds	r4, r7, r4
 8000d5e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d62:	f080 809c 	bcs.w	8000e9e <__udivmoddi4+0x2ce>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f240 8099 	bls.w	8000e9e <__udivmoddi4+0x2ce>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	443c      	add	r4, r7
 8000d70:	eba4 040e 	sub.w	r4, r4, lr
 8000d74:	fa1f fe83 	uxth.w	lr, r3
 8000d78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d80:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d84:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d88:	45a4      	cmp	ip, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x1ce>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d92:	f080 8082 	bcs.w	8000e9a <__udivmoddi4+0x2ca>
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d97f      	bls.n	8000e9a <__udivmoddi4+0x2ca>
 8000d9a:	3b02      	subs	r3, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000da2:	eba4 040c 	sub.w	r4, r4, ip
 8000da6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000daa:	4564      	cmp	r4, ip
 8000dac:	4673      	mov	r3, lr
 8000dae:	46e1      	mov	r9, ip
 8000db0:	d362      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000db2:	d05f      	beq.n	8000e74 <__udivmoddi4+0x2a4>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x1fe>
 8000db6:	ebb8 0203 	subs.w	r2, r8, r3
 8000dba:	eb64 0409 	sbc.w	r4, r4, r9
 8000dbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc2:	fa22 f301 	lsr.w	r3, r2, r1
 8000dc6:	431e      	orrs	r6, r3
 8000dc8:	40cc      	lsrs	r4, r1
 8000dca:	e9c5 6400 	strd	r6, r4, [r5]
 8000dce:	2100      	movs	r1, #0
 8000dd0:	e74f      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000dd2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dd6:	0c01      	lsrs	r1, r0, #16
 8000dd8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ddc:	b280      	uxth	r0, r0
 8000dde:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000de2:	463b      	mov	r3, r7
 8000de4:	4638      	mov	r0, r7
 8000de6:	463c      	mov	r4, r7
 8000de8:	46b8      	mov	r8, r7
 8000dea:	46be      	mov	lr, r7
 8000dec:	2620      	movs	r6, #32
 8000dee:	fbb1 f1f7 	udiv	r1, r1, r7
 8000df2:	eba2 0208 	sub.w	r2, r2, r8
 8000df6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dfa:	e766      	b.n	8000cca <__udivmoddi4+0xfa>
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	e718      	b.n	8000c32 <__udivmoddi4+0x62>
 8000e00:	4610      	mov	r0, r2
 8000e02:	e72c      	b.n	8000c5e <__udivmoddi4+0x8e>
 8000e04:	f1c6 0220 	rsb	r2, r6, #32
 8000e08:	fa2e f302 	lsr.w	r3, lr, r2
 8000e0c:	40b7      	lsls	r7, r6
 8000e0e:	40b1      	lsls	r1, r6
 8000e10:	fa20 f202 	lsr.w	r2, r0, r2
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e1e:	b2bc      	uxth	r4, r7
 8000e20:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e24:	0c11      	lsrs	r1, r2, #16
 8000e26:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2a:	fb08 f904 	mul.w	r9, r8, r4
 8000e2e:	40b0      	lsls	r0, r6
 8000e30:	4589      	cmp	r9, r1
 8000e32:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e36:	b280      	uxth	r0, r0
 8000e38:	d93e      	bls.n	8000eb8 <__udivmoddi4+0x2e8>
 8000e3a:	1879      	adds	r1, r7, r1
 8000e3c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e40:	d201      	bcs.n	8000e46 <__udivmoddi4+0x276>
 8000e42:	4589      	cmp	r9, r1
 8000e44:	d81f      	bhi.n	8000e86 <__udivmoddi4+0x2b6>
 8000e46:	eba1 0109 	sub.w	r1, r1, r9
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fb09 f804 	mul.w	r8, r9, r4
 8000e52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e56:	b292      	uxth	r2, r2
 8000e58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e5c:	4542      	cmp	r2, r8
 8000e5e:	d229      	bcs.n	8000eb4 <__udivmoddi4+0x2e4>
 8000e60:	18ba      	adds	r2, r7, r2
 8000e62:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e66:	d2c4      	bcs.n	8000df2 <__udivmoddi4+0x222>
 8000e68:	4542      	cmp	r2, r8
 8000e6a:	d2c2      	bcs.n	8000df2 <__udivmoddi4+0x222>
 8000e6c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e70:	443a      	add	r2, r7
 8000e72:	e7be      	b.n	8000df2 <__udivmoddi4+0x222>
 8000e74:	45f0      	cmp	r8, lr
 8000e76:	d29d      	bcs.n	8000db4 <__udivmoddi4+0x1e4>
 8000e78:	ebbe 0302 	subs.w	r3, lr, r2
 8000e7c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e80:	3801      	subs	r0, #1
 8000e82:	46e1      	mov	r9, ip
 8000e84:	e796      	b.n	8000db4 <__udivmoddi4+0x1e4>
 8000e86:	eba7 0909 	sub.w	r9, r7, r9
 8000e8a:	4449      	add	r1, r9
 8000e8c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e90:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e94:	fb09 f804 	mul.w	r8, r9, r4
 8000e98:	e7db      	b.n	8000e52 <__udivmoddi4+0x282>
 8000e9a:	4673      	mov	r3, lr
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1ce>
 8000e9e:	4650      	mov	r0, sl
 8000ea0:	e766      	b.n	8000d70 <__udivmoddi4+0x1a0>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e6fd      	b.n	8000ca2 <__udivmoddi4+0xd2>
 8000ea6:	443b      	add	r3, r7
 8000ea8:	3a02      	subs	r2, #2
 8000eaa:	e733      	b.n	8000d14 <__udivmoddi4+0x144>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	443b      	add	r3, r7
 8000eb2:	e71c      	b.n	8000cee <__udivmoddi4+0x11e>
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	e79c      	b.n	8000df2 <__udivmoddi4+0x222>
 8000eb8:	eba1 0109 	sub.w	r1, r1, r9
 8000ebc:	46c4      	mov	ip, r8
 8000ebe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec2:	fb09 f804 	mul.w	r8, r9, r4
 8000ec6:	e7c4      	b.n	8000e52 <__udivmoddi4+0x282>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed2:	f001 fd89 	bl	80029e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed6:	f000 f867 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eda:	f000 fbb3 	bl	8001644 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ede:	f000 f8cb 	bl	8001078 <MX_I2C2_Init>
  MX_TIM9_Init();
 8000ee2:	f000 fb21 	bl	8001528 <MX_TIM9_Init>
  MX_TIM2_Init();
 8000ee6:	f000 f959 	bl	800119c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eea:	f000 f9ed 	bl	80012c8 <MX_TIM3_Init>
  MX_I2C3_Init();
 8000eee:	f000 f8f1 	bl	80010d4 <MX_I2C3_Init>
  MX_SPI2_Init();
 8000ef2:	f000 f91d 	bl	8001130 <MX_SPI2_Init>
  MX_TIM4_Init();
 8000ef6:	f000 fa7f 	bl	80013f8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000efa:	f000 fb4f 	bl	800159c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000efe:	f000 fb77 	bl	80015f0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f08:	4820      	ldr	r0, [pc, #128]	@ (8000f8c <main+0xc0>)
 8000f0a:	f002 f839 	bl	8002f80 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000f0e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f12:	f001 fdab 	bl	8002a6c <HAL_Delay>

  if (MPU6050_Init(&hi2c2) == 0)
 8000f16:	481e      	ldr	r0, [pc, #120]	@ (8000f90 <main+0xc4>)
 8000f18:	f000 fc4e 	bl	80017b8 <MPU6050_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d109      	bne.n	8000f36 <main+0x6a>
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f28:	4818      	ldr	r0, [pc, #96]	@ (8000f8c <main+0xc0>)
 8000f2a:	f002 f829 	bl	8002f80 <HAL_GPIO_WritePin>
	  MPU6050_Calibration(&hi2c2, &MPU6050);
 8000f2e:	4919      	ldr	r1, [pc, #100]	@ (8000f94 <main+0xc8>)
 8000f30:	4817      	ldr	r0, [pc, #92]	@ (8000f90 <main+0xc4>)
 8000f32:	f001 f839 	bl	8001fa8 <MPU6050_Calibration>
  }
  //MPU6050_Init(&hi2c2);
  DWT_Init();
 8000f36:	f000 fc13 	bl	8001760 <DWT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t start_us = DWT_GetMicros();
 8000f3a:	f000 fc2b 	bl	8001794 <DWT_GetMicros>
 8000f3e:	6078      	str	r0, [r7, #4]

	  MPU6050_Read_WithKalman(&hi2c2, &MPU6050);
 8000f40:	4914      	ldr	r1, [pc, #80]	@ (8000f94 <main+0xc8>)
 8000f42:	4813      	ldr	r0, [pc, #76]	@ (8000f90 <main+0xc4>)
 8000f44:	f000 fdfc 	bl	8001b40 <MPU6050_Read_WithKalman>

	  AngX = MPU6050.KalmanAngleX;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <main+0xc8>)
 8000f4a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fdd5 	bl	8000b00 <__aeabi_d2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a0f      	ldr	r2, [pc, #60]	@ (8000f98 <main+0xcc>)
 8000f5a:	6013      	str	r3, [r2, #0]
	  AngY = MPU6050.KalmanAngleY;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <main+0xc8>)
 8000f5e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fdcb 	bl	8000b00 <__aeabi_d2f>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <main+0xd0>)
 8000f6e:	6013      	str	r3, [r2, #0]

	  end_us = DWT_GetMicros();
 8000f70:	f000 fc10 	bl	8001794 <DWT_GetMicros>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <main+0xd4>)
 8000f78:	6013      	str	r3, [r2, #0]
	  elapsed_us = end_us - start_us;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <main+0xd4>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <main+0xd8>)
 8000f84:	6013      	str	r3, [r2, #0]
  {
 8000f86:	bf00      	nop
 8000f88:	e7d7      	b.n	8000f3a <main+0x6e>
 8000f8a:	bf00      	nop
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	2000010c 	.word	0x2000010c
 8000f94:	200003c0 	.word	0x200003c0
 8000f98:	20000428 	.word	0x20000428
 8000f9c:	2000042c 	.word	0x2000042c
 8000fa0:	20000434 	.word	0x20000434
 8000fa4:	20000430 	.word	0x20000430

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	@ 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	@ 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 fed8 	bl	8005d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b27      	ldr	r3, [pc, #156]	@ (8001070 <SystemClock_Config+0xc8>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	4a26      	ldr	r2, [pc, #152]	@ (8001070 <SystemClock_Config+0xc8>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fdc:	4b24      	ldr	r3, [pc, #144]	@ (8001070 <SystemClock_Config+0xc8>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <SystemClock_Config+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a20      	ldr	r2, [pc, #128]	@ (8001074 <SystemClock_Config+0xcc>)
 8000ff2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <SystemClock_Config+0xcc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001018:	230c      	movs	r3, #12
 800101a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800101c:	2360      	movs	r3, #96	@ 0x60
 800101e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001024:	2304      	movs	r3, #4
 8001026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4618      	mov	r0, r3
 800102e:	f002 ffe5 	bl	8003ffc <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001038:	f001 f946 	bl	80022c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2103      	movs	r1, #3
 8001058:	4618      	mov	r0, r3
 800105a:	f003 fa47 	bl	80044ec <HAL_RCC_ClockConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001064:	f001 f930 	bl	80022c8 <Error_Handler>
  }
}
 8001068:	bf00      	nop
 800106a:	3750      	adds	r7, #80	@ 0x50
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_I2C2_Init+0x50>)
 800107e:	4a13      	ldr	r2, [pc, #76]	@ (80010cc <MX_I2C2_Init+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_I2C2_Init+0x50>)
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <MX_I2C2_Init+0x58>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_I2C2_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_I2C2_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_I2C2_Init+0x50>)
 8001096:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800109a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <MX_I2C2_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_I2C2_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <MX_I2C2_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_I2C2_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <MX_I2C2_Init+0x50>)
 80010b6:	f001 ff7d 	bl	8002fb4 <HAL_I2C_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f001 f902 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000010c 	.word	0x2000010c
 80010cc:	40005800 	.word	0x40005800
 80010d0:	00061a80 	.word	0x00061a80

080010d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <MX_I2C3_Init+0x50>)
 80010da:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <MX_I2C3_Init+0x54>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_I2C3_Init+0x50>)
 80010e0:	4a12      	ldr	r2, [pc, #72]	@ (800112c <MX_I2C3_Init+0x58>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_I2C3_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_I2C3_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_I2C3_Init+0x50>)
 80010f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <MX_I2C3_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_I2C3_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <MX_I2C3_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_I2C3_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_I2C3_Init+0x50>)
 8001112:	f001 ff4f 	bl	8002fb4 <HAL_I2C_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800111c:	f001 f8d4 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000160 	.word	0x20000160
 8001128:	40005c00 	.word	0x40005c00
 800112c:	00061a80 	.word	0x00061a80

08001130 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <MX_SPI2_Init+0x64>)
 8001136:	4a18      	ldr	r2, [pc, #96]	@ (8001198 <MX_SPI2_Init+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800113a:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MX_SPI2_Init+0x64>)
 800113c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001140:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <MX_SPI2_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <MX_SPI2_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_SPI2_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <MX_SPI2_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_SPI2_Init+0x64>)
 800115c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001160:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_SPI2_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <MX_SPI2_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_SPI2_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <MX_SPI2_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_SPI2_Init+0x64>)
 800117c:	220a      	movs	r2, #10
 800117e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <MX_SPI2_Init+0x64>)
 8001182:	f003 fbc5 	bl	8004910 <HAL_SPI_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800118c:	f001 f89c 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200001b4 	.word	0x200001b4
 8001198:	40003800 	.word	0x40003800

0800119c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	@ 0x38
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011cc:	4b3d      	ldr	r3, [pc, #244]	@ (80012c4 <MX_TIM2_Init+0x128>)
 80011ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011d4:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <MX_TIM2_Init+0x128>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b3a      	ldr	r3, [pc, #232]	@ (80012c4 <MX_TIM2_Init+0x128>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011e0:	4b38      	ldr	r3, [pc, #224]	@ (80012c4 <MX_TIM2_Init+0x128>)
 80011e2:	f04f 32ff 	mov.w	r2, #4294967295
 80011e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b36      	ldr	r3, [pc, #216]	@ (80012c4 <MX_TIM2_Init+0x128>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b35      	ldr	r3, [pc, #212]	@ (80012c4 <MX_TIM2_Init+0x128>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f4:	4833      	ldr	r0, [pc, #204]	@ (80012c4 <MX_TIM2_Init+0x128>)
 80011f6:	f003 fc14 	bl	8004a22 <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001200:	f001 f862 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800120a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120e:	4619      	mov	r1, r3
 8001210:	482c      	ldr	r0, [pc, #176]	@ (80012c4 <MX_TIM2_Init+0x128>)
 8001212:	f003 fec3 	bl	8004f9c <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800121c:	f001 f854 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001220:	4828      	ldr	r0, [pc, #160]	@ (80012c4 <MX_TIM2_Init+0x128>)
 8001222:	f003 fcaf 	bl	8004b84 <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800122c:	f001 f84c 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4619      	mov	r1, r3
 800123e:	4821      	ldr	r0, [pc, #132]	@ (80012c4 <MX_TIM2_Init+0x128>)
 8001240:	f004 fa4e 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800124a:	f001 f83d 	bl	80022c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	@ 0x60
 8001250:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4817      	ldr	r0, [pc, #92]	@ (80012c4 <MX_TIM2_Init+0x128>)
 8001266:	f003 fdd7 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001270:	f001 f82a 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2204      	movs	r2, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4812      	ldr	r0, [pc, #72]	@ (80012c4 <MX_TIM2_Init+0x128>)
 800127c:	f003 fdcc 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001286:	f001 f81f 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2208      	movs	r2, #8
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <MX_TIM2_Init+0x128>)
 8001292:	f003 fdc1 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800129c:	f001 f814 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	220c      	movs	r2, #12
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <MX_TIM2_Init+0x128>)
 80012a8:	f003 fdb6 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80012b2:	f001 f809 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <MX_TIM2_Init+0x128>)
 80012b8:	f001 f98c 	bl	80025d4 <HAL_TIM_MspPostInit>

}
 80012bc:	bf00      	nop
 80012be:	3738      	adds	r7, #56	@ 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000020c 	.word	0x2000020c

080012c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	@ 0x38
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f8:	4b3d      	ldr	r3, [pc, #244]	@ (80013f0 <MX_TIM3_Init+0x128>)
 80012fa:	4a3e      	ldr	r2, [pc, #248]	@ (80013f4 <MX_TIM3_Init+0x12c>)
 80012fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012fe:	4b3c      	ldr	r3, [pc, #240]	@ (80013f0 <MX_TIM3_Init+0x128>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b3a      	ldr	r3, [pc, #232]	@ (80013f0 <MX_TIM3_Init+0x128>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800130a:	4b39      	ldr	r3, [pc, #228]	@ (80013f0 <MX_TIM3_Init+0x128>)
 800130c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001310:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b37      	ldr	r3, [pc, #220]	@ (80013f0 <MX_TIM3_Init+0x128>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b35      	ldr	r3, [pc, #212]	@ (80013f0 <MX_TIM3_Init+0x128>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800131e:	4834      	ldr	r0, [pc, #208]	@ (80013f0 <MX_TIM3_Init+0x128>)
 8001320:	f003 fb7f 	bl	8004a22 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800132a:	f000 ffcd 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001338:	4619      	mov	r1, r3
 800133a:	482d      	ldr	r0, [pc, #180]	@ (80013f0 <MX_TIM3_Init+0x128>)
 800133c:	f003 fe2e 	bl	8004f9c <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001346:	f000 ffbf 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800134a:	4829      	ldr	r0, [pc, #164]	@ (80013f0 <MX_TIM3_Init+0x128>)
 800134c:	f003 fc1a 	bl	8004b84 <HAL_TIM_PWM_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001356:	f000 ffb7 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	4619      	mov	r1, r3
 8001368:	4821      	ldr	r0, [pc, #132]	@ (80013f0 <MX_TIM3_Init+0x128>)
 800136a:	f004 f9b9 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001374:	f000 ffa8 	bl	80022c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001378:	2360      	movs	r3, #96	@ 0x60
 800137a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	4818      	ldr	r0, [pc, #96]	@ (80013f0 <MX_TIM3_Init+0x128>)
 8001390:	f003 fd42 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800139a:	f000 ff95 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2204      	movs	r2, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <MX_TIM3_Init+0x128>)
 80013a6:	f003 fd37 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80013b0:	f000 ff8a 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2208      	movs	r2, #8
 80013b8:	4619      	mov	r1, r3
 80013ba:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <MX_TIM3_Init+0x128>)
 80013bc:	f003 fd2c 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80013c6:	f000 ff7f 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	220c      	movs	r2, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <MX_TIM3_Init+0x128>)
 80013d2:	f003 fd21 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80013dc:	f000 ff74 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013e0:	4803      	ldr	r0, [pc, #12]	@ (80013f0 <MX_TIM3_Init+0x128>)
 80013e2:	f001 f8f7 	bl	80025d4 <HAL_TIM_MspPostInit>

}
 80013e6:	bf00      	nop
 80013e8:	3738      	adds	r7, #56	@ 0x38
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000254 	.word	0x20000254
 80013f4:	40000400 	.word	0x40000400

080013f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	@ 0x38
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]
 8001426:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001428:	4b3d      	ldr	r3, [pc, #244]	@ (8001520 <MX_TIM4_Init+0x128>)
 800142a:	4a3e      	ldr	r2, [pc, #248]	@ (8001524 <MX_TIM4_Init+0x12c>)
 800142c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800142e:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <MX_TIM4_Init+0x128>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b3a      	ldr	r3, [pc, #232]	@ (8001520 <MX_TIM4_Init+0x128>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800143a:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <MX_TIM4_Init+0x128>)
 800143c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001440:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <MX_TIM4_Init+0x128>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <MX_TIM4_Init+0x128>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800144e:	4834      	ldr	r0, [pc, #208]	@ (8001520 <MX_TIM4_Init+0x128>)
 8001450:	f003 fae7 	bl	8004a22 <HAL_TIM_Base_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800145a:	f000 ff35 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001464:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001468:	4619      	mov	r1, r3
 800146a:	482d      	ldr	r0, [pc, #180]	@ (8001520 <MX_TIM4_Init+0x128>)
 800146c:	f003 fd96 	bl	8004f9c <HAL_TIM_ConfigClockSource>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001476:	f000 ff27 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800147a:	4829      	ldr	r0, [pc, #164]	@ (8001520 <MX_TIM4_Init+0x128>)
 800147c:	f003 fb82 	bl	8004b84 <HAL_TIM_PWM_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001486:	f000 ff1f 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	4619      	mov	r1, r3
 8001498:	4821      	ldr	r0, [pc, #132]	@ (8001520 <MX_TIM4_Init+0x128>)
 800149a:	f004 f921 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014a4:	f000 ff10 	bl	80022c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a8:	2360      	movs	r3, #96	@ 0x60
 80014aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	4818      	ldr	r0, [pc, #96]	@ (8001520 <MX_TIM4_Init+0x128>)
 80014c0:	f003 fcaa 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80014ca:	f000 fefd 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2204      	movs	r2, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4812      	ldr	r0, [pc, #72]	@ (8001520 <MX_TIM4_Init+0x128>)
 80014d6:	f003 fc9f 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80014e0:	f000 fef2 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2208      	movs	r2, #8
 80014e8:	4619      	mov	r1, r3
 80014ea:	480d      	ldr	r0, [pc, #52]	@ (8001520 <MX_TIM4_Init+0x128>)
 80014ec:	f003 fc94 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80014f6:	f000 fee7 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	220c      	movs	r2, #12
 80014fe:	4619      	mov	r1, r3
 8001500:	4807      	ldr	r0, [pc, #28]	@ (8001520 <MX_TIM4_Init+0x128>)
 8001502:	f003 fc89 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 800150c:	f000 fedc 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <MX_TIM4_Init+0x128>)
 8001512:	f001 f85f 	bl	80025d4 <HAL_TIM_MspPostInit>

}
 8001516:	bf00      	nop
 8001518:	3738      	adds	r7, #56	@ 0x38
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000029c 	.word	0x2000029c
 8001524:	40000800 	.word	0x40000800

08001528 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800153a:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <MX_TIM9_Init+0x6c>)
 800153c:	4a16      	ldr	r2, [pc, #88]	@ (8001598 <MX_TIM9_Init+0x70>)
 800153e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <MX_TIM9_Init+0x6c>)
 8001542:	2263      	movs	r2, #99	@ 0x63
 8001544:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <MX_TIM9_Init+0x6c>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MX_TIM9_Init+0x6c>)
 800154e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001552:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MX_TIM9_Init+0x6c>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <MX_TIM9_Init+0x6c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001560:	480c      	ldr	r0, [pc, #48]	@ (8001594 <MX_TIM9_Init+0x6c>)
 8001562:	f003 fa5e 	bl	8004a22 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800156c:	f000 feac 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001574:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	4619      	mov	r1, r3
 800157a:	4806      	ldr	r0, [pc, #24]	@ (8001594 <MX_TIM9_Init+0x6c>)
 800157c:	f003 fd0e 	bl	8004f9c <HAL_TIM_ConfigClockSource>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001586:	f000 fe9f 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002e4 	.word	0x200002e4
 8001598:	40014000 	.word	0x40014000

0800159c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <MX_USART1_UART_Init+0x50>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015d4:	f004 f906 	bl	80057e4 <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015de:	f000 fe73 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000032c 	.word	0x2000032c
 80015ec:	40011000 	.word	0x40011000

080015f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <MX_USART6_UART_Init+0x4c>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <MX_USART6_UART_Init+0x50>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <MX_USART6_UART_Init+0x4c>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <MX_USART6_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <MX_USART6_UART_Init+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <MX_USART6_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <MX_USART6_UART_Init+0x4c>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <MX_USART6_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <MX_USART6_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_USART6_UART_Init+0x4c>)
 8001628:	f004 f8dc 	bl	80057e4 <HAL_UART_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001632:	f000 fe49 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000374 	.word	0x20000374
 8001640:	40011400 	.word	0x40011400

08001644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b3c      	ldr	r3, [pc, #240]	@ (8001750 <MX_GPIO_Init+0x10c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a3b      	ldr	r2, [pc, #236]	@ (8001750 <MX_GPIO_Init+0x10c>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <MX_GPIO_Init+0x10c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b35      	ldr	r3, [pc, #212]	@ (8001750 <MX_GPIO_Init+0x10c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a34      	ldr	r2, [pc, #208]	@ (8001750 <MX_GPIO_Init+0x10c>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b32      	ldr	r3, [pc, #200]	@ (8001750 <MX_GPIO_Init+0x10c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b2e      	ldr	r3, [pc, #184]	@ (8001750 <MX_GPIO_Init+0x10c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a2d      	ldr	r2, [pc, #180]	@ (8001750 <MX_GPIO_Init+0x10c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <MX_GPIO_Init+0x10c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <MX_GPIO_Init+0x10c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a26      	ldr	r2, [pc, #152]	@ (8001750 <MX_GPIO_Init+0x10c>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <MX_GPIO_Init+0x10c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d0:	4820      	ldr	r0, [pc, #128]	@ (8001754 <MX_GPIO_Init+0x110>)
 80016d2:	f001 fc55 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f241 0124 	movw	r1, #4132	@ 0x1024
 80016dc:	481e      	ldr	r0, [pc, #120]	@ (8001758 <MX_GPIO_Init+0x114>)
 80016de:	f001 fc4f 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e8:	481c      	ldr	r0, [pc, #112]	@ (800175c <MX_GPIO_Init+0x118>)
 80016ea:	f001 fc49 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	4813      	ldr	r0, [pc, #76]	@ (8001754 <MX_GPIO_Init+0x110>)
 8001708:	f001 fab6 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 800170c:	f241 0324 	movw	r3, #4132	@ 0x1024
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	480c      	ldr	r0, [pc, #48]	@ (8001758 <MX_GPIO_Init+0x114>)
 8001726:	f001 faa7 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800172a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4806      	ldr	r0, [pc, #24]	@ (800175c <MX_GPIO_Init+0x118>)
 8001744:	f001 fa98 	bl	8002c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	@ 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40020800 	.word	0x40020800
 8001758:	40020400 	.word	0x40020400
 800175c:	40020000 	.word	0x40020000

08001760 <DWT_Init>:

/* USER CODE BEGIN 4 */
void DWT_Init(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;     // DWT modülünü aktif et
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <DWT_Init+0x2c>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a08      	ldr	r2, [pc, #32]	@ (800178c <DWT_Init+0x2c>)
 800176a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800176e:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;                                     // Sayaç sıfırla
 8001770:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <DWT_Init+0x30>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;                // Sayaç çalıştır
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <DWT_Init+0x30>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <DWT_Init+0x30>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6013      	str	r3, [r2, #0]
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000edf0 	.word	0xe000edf0
 8001790:	e0001000 	.word	0xe0001000

08001794 <DWT_GetMicros>:

uint32_t DWT_GetMicros(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (100000000 / 1000000);   // cycle → µs dönüşümü
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <DWT_GetMicros+0x1c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <DWT_GetMicros+0x20>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	095b      	lsrs	r3, r3, #5
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e0001000 	.word	0xe0001000
 80017b4:	51eb851f 	.word	0x51eb851f

080017b8 <MPU6050_Init>:

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af04      	add	r7, sp, #16
 80017be:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80017c0:	2364      	movs	r3, #100	@ 0x64
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	2301      	movs	r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	f107 030f 	add.w	r3, r7, #15
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	2275      	movs	r2, #117	@ 0x75
 80017d2:	21d0      	movs	r1, #208	@ 0xd0
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f001 fe2b 	bl	8003430 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	2b68      	cmp	r3, #104	@ 0x68
 80017de:	d14c      	bne.n	800187a <MPU6050_Init+0xc2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80017e4:	2364      	movs	r3, #100	@ 0x64
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2301      	movs	r3, #1
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	f107 030e 	add.w	r3, r7, #14
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	226b      	movs	r2, #107	@ 0x6b
 80017f6:	21d0      	movs	r1, #208	@ 0xd0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f001 fd1f 	bl	800323c <HAL_I2C_Mem_Write>

        // DLP settings
        Data = 0x02;
 80017fe:	2302      	movs	r3, #2
 8001800:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x1A, 1, &Data, 1, i2c_timeout);
 8001802:	2364      	movs	r3, #100	@ 0x64
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2301      	movs	r3, #1
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	f107 030e 	add.w	r3, r7, #14
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	221a      	movs	r2, #26
 8001814:	21d0      	movs	r1, #208	@ 0xd0
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f001 fd10 	bl	800323c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x00;
 800181c:	2300      	movs	r3, #0
 800181e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001820:	2364      	movs	r3, #100	@ 0x64
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	2301      	movs	r3, #1
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	f107 030e 	add.w	r3, r7, #14
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	2219      	movs	r2, #25
 8001832:	21d0      	movs	r1, #208	@ 0xd0
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f001 fd01 	bl	800323c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> 2g
        Data = 0x00;
 800183a:	2300      	movs	r3, #0
 800183c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800183e:	2364      	movs	r3, #100	@ 0x64
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	2301      	movs	r3, #1
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	f107 030e 	add.w	r3, r7, #14
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2301      	movs	r3, #1
 800184e:	221c      	movs	r2, #28
 8001850:	21d0      	movs	r1, #208	@ 0xd0
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f001 fcf2 	bl	800323c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> 250 degree/s
        Data = 0x00;
 8001858:	2300      	movs	r3, #0
 800185a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800185c:	2364      	movs	r3, #100	@ 0x64
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	2301      	movs	r3, #1
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	f107 030e 	add.w	r3, r7, #14
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	221b      	movs	r2, #27
 800186e:	21d0      	movs	r1, #208	@ 0xd0
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f001 fce3 	bl	800323c <HAL_I2C_Mem_Write>
        return 0;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <MPU6050_Init+0xc4>
    }
    return 1;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001884:	b5b0      	push	{r4, r5, r7, lr}
 8001886:	b096      	sub	sp, #88	@ 0x58
 8001888:	af00      	add	r7, sp, #0
 800188a:	61f8      	str	r0, [r7, #28]
 800188c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001890:	ed87 1b02 	vstr	d1, [r7, #8]
 8001894:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800189e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018a2:	f7fe fc9d 	bl	80001e0 <__aeabi_dsub>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80018b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80018b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018bc:	f7fe fe48 	bl	8000550 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4620      	mov	r0, r4
 80018c6:	4629      	mov	r1, r5
 80018c8:	f7fe fc8c 	bl	80001e4 <__adddf3>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	69f9      	ldr	r1, [r7, #28]
 80018d2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80018e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018e6:	f7fe fe33 	bl	8000550 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018f8:	f7fe fc72 	bl	80001e0 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800190a:	f7fe fc69 	bl	80001e0 <__aeabi_dsub>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fc62 	bl	80001e4 <__adddf3>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800192c:	f7fe fe10 	bl	8000550 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7fe fc54 	bl	80001e4 <__adddf3>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	69f9      	ldr	r1, [r7, #28]
 8001942:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001956:	f7fe fdfb 	bl	8000550 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fc3d 	bl	80001e0 <__aeabi_dsub>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	69f9      	ldr	r1, [r7, #28]
 800196c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800197c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001980:	f7fe fde6 	bl	8000550 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fc28 	bl	80001e0 <__aeabi_dsub>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	69f9      	ldr	r1, [r7, #28]
 8001996:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019aa:	f7fe fdd1 	bl	8000550 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7fe fc15 	bl	80001e4 <__adddf3>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	69f9      	ldr	r1, [r7, #28]
 80019c0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019d0:	f7fe fc08 	bl	80001e4 <__adddf3>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80019e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019e6:	f7fe fedd 	bl	80007a4 <__aeabi_ddiv>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80019f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019fc:	f7fe fed2 	bl	80007a4 <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a12:	f7fe fbe5 	bl	80001e0 <__aeabi_dsub>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a2c:	f7fe fd90 	bl	8000550 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4620      	mov	r0, r4
 8001a36:	4629      	mov	r1, r5
 8001a38:	f7fe fbd4 	bl	80001e4 <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	69f9      	ldr	r1, [r7, #28]
 8001a42:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001a4c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a54:	f7fe fd7c 	bl	8000550 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fbc0 	bl	80001e4 <__adddf3>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	69f9      	ldr	r1, [r7, #28]
 8001a6a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a74:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001a88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a90:	f7fe fd5e 	bl	8000550 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fba0 	bl	80001e0 <__aeabi_dsub>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001ab0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ab4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ab8:	f7fe fd4a 	bl	8000550 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fb8c 	bl	80001e0 <__aeabi_dsub>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	69f9      	ldr	r1, [r7, #28]
 8001ace:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001ad8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ae0:	f7fe fd36 	bl	8000550 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4620      	mov	r0, r4
 8001aea:	4629      	mov	r1, r5
 8001aec:	f7fe fb78 	bl	80001e0 <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	69f9      	ldr	r1, [r7, #28]
 8001af6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001b00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b08:	f7fe fd22 	bl	8000550 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4620      	mov	r0, r4
 8001b12:	4629      	mov	r1, r5
 8001b14:	f7fe fb64 	bl	80001e0 <__aeabi_dsub>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	69f9      	ldr	r1, [r7, #28]
 8001b1e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b28:	ec43 2b17 	vmov	d7, r2, r3
};
 8001b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b30:	eef0 0a67 	vmov.f32	s1, s15
 8001b34:	3758      	adds	r7, #88	@ 0x58
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3a:	0000      	movs	r0, r0
 8001b3c:	0000      	movs	r0, r0
	...

08001b40 <MPU6050_Read_WithKalman>:

void MPU6050_Read_WithKalman(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b44:	b094      	sub	sp, #80	@ 0x50
 8001b46:	af04      	add	r7, sp, #16
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001b4c:	2364      	movs	r3, #100	@ 0x64
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	230e      	movs	r3, #14
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	223b      	movs	r2, #59	@ 0x3b
 8001b5e:	21d0      	movs	r1, #208	@ 0xd0
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f001 fc65 	bl	8003430 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = ((int16_t) (Rec_Data[0] << 8 | Rec_Data[1])) - DataStruct->Accel_X_RAW_K;
 8001b66:	7a3b      	ldrb	r3, [r7, #8]
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	7a7b      	ldrb	r3, [r7, #9]
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = ((int16_t) (Rec_Data[2] << 8 | Rec_Data[3])) - DataStruct->Accel_Y_RAW_K;
 8001b8a:	7abb      	ldrb	r3, [r7, #10]
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = ((int16_t) (Rec_Data[4] << 8 | Rec_Data[5])) - DataStruct->Accel_Z_RAW_K;//
 8001bae:	7b3b      	ldrb	r3, [r7, #12]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	7b7b      	ldrb	r3, [r7, #13]
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4313      	orrs	r3, r2
 8001be0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = ((int16_t)   (Rec_Data[8] << 8 | Rec_Data[9])) - DataStruct->Gyro_X_RAW_K;
 8001be2:	7c3b      	ldrb	r3, [r7, #16]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	7c7b      	ldrb	r3, [r7, #17]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = ((int16_t) (Rec_Data[10] << 8 | Rec_Data[11])) - DataStruct->Gyro_Y_RAW_K;
 8001c06:	7cbb      	ldrb	r3, [r7, #18]
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	7cfb      	ldrb	r3, [r7, #19]
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = ((int16_t) (Rec_Data[12] << 8 | Rec_Data[13])) - DataStruct->Gyro_Z_RAW_K;
 8001c2a:	7d3b      	ldrb	r3, [r7, #20]
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	7d7b      	ldrb	r3, [r7, #21]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc11 	bl	800047c <__aeabi_i2d>
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4ba4      	ldr	r3, [pc, #656]	@ (8001ef0 <MPU6050_Read_WithKalman+0x3b0>)
 8001c60:	f7fe fda0 	bl	80007a4 <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	6839      	ldr	r1, [r7, #0]
 8001c6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc01 	bl	800047c <__aeabi_i2d>
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ef0 <MPU6050_Read_WithKalman+0x3b0>)
 8001c80:	f7fe fd90 	bl	80007a4 <__aeabi_ddiv>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / 16384.0;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fbf1 	bl	800047c <__aeabi_i2d>
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b94      	ldr	r3, [pc, #592]	@ (8001ef0 <MPU6050_Read_WithKalman+0x3b0>)
 8001ca0:	f7fe fd80 	bl	80007a4 <__aeabi_ddiv>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	6839      	ldr	r1, [r7, #0]
 8001caa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001cae:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cba:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8001ef4 <MPU6050_Read_WithKalman+0x3b4>
 8001cbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc2:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001ef8 <MPU6050_Read_WithKalman+0x3b8>
 8001cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fbd0 	bl	800047c <__aeabi_i2d>
 8001cdc:	a37e      	add	r3, pc, #504	@ (adr r3, 8001ed8 <MPU6050_Read_WithKalman+0x398>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	f7fe fd5f 	bl	80007a4 <__aeabi_ddiv>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	6839      	ldr	r1, [r7, #0]
 8001cec:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fbc0 	bl	800047c <__aeabi_i2d>
 8001cfc:	a376      	add	r3, pc, #472	@ (adr r3, 8001ed8 <MPU6050_Read_WithKalman+0x398>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fd4f 	bl	80007a4 <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	6839      	ldr	r1, [r7, #0]
 8001d0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fbb0 	bl	800047c <__aeabi_i2d>
 8001d1c:	a36e      	add	r3, pc, #440	@ (adr r3, 8001ed8 <MPU6050_Read_WithKalman+0x398>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fd3f 	bl	80007a4 <__aeabi_ddiv>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    uint32_t now_us = DWT_GetMicros();
 8001d30:	f7ff fd30 	bl	8001794 <DWT_GetMicros>
 8001d34:	6338      	str	r0, [r7, #48]	@ 0x30
    double dt = (now_us - timer_us) / 1000000.0;
 8001d36:	4b71      	ldr	r3, [pc, #452]	@ (8001efc <MPU6050_Read_WithKalman+0x3bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fb8c 	bl	800045c <__aeabi_ui2d>
 8001d44:	a366      	add	r3, pc, #408	@ (adr r3, 8001ee0 <MPU6050_Read_WithKalman+0x3a0>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f7fe fd2b 	bl	80007a4 <__aeabi_ddiv>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer_us = now_us;
 8001d56:	4a69      	ldr	r2, [pc, #420]	@ (8001efc <MPU6050_Read_WithKalman+0x3bc>)
 8001d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5a:	6013      	str	r3, [r2, #0]

    DataStruct->KalmanAngleZ += DataStruct->Gz * dt;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	e9d3 ab18 	ldrd	sl, fp, [r3, #96]	@ 0x60
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001d68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d6c:	f7fe fbf0 	bl	8000550 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4650      	mov	r0, sl
 8001d76:	4659      	mov	r1, fp
 8001d78:	f7fe fa34 	bl	80001e4 <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d94:	fb03 f202 	mul.w	r2, r3, r2
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fb65 	bl	800047c <__aeabi_i2d>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	ec43 2b10 	vmov	d0, r2, r3
 8001dba:	f004 f80b 	bl	8005dd4 <sqrt>
 8001dbe:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dce:	f7fe fe27 	bl	8000a20 <__aeabi_dcmpeq>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11f      	bne.n	8001e18 <MPU6050_Read_WithKalman+0x2d8>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fb4c 	bl	800047c <__aeabi_i2d>
 8001de4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001de8:	f7fe fcdc 	bl	80007a4 <__aeabi_ddiv>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	ec43 2b17 	vmov	d7, r2, r3
 8001df4:	eeb0 0a47 	vmov.f32	s0, s14
 8001df8:	eef0 0a67 	vmov.f32	s1, s15
 8001dfc:	f004 f818 	bl	8005e30 <atan>
 8001e00:	ec51 0b10 	vmov	r0, r1, d0
 8001e04:	a338      	add	r3, pc, #224	@ (adr r3, 8001ee8 <MPU6050_Read_WithKalman+0x3a8>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fba1 	bl	8000550 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001e16:	e005      	b.n	8001e24 <MPU6050_Read_WithKalman+0x2e4>
    } else {
        roll = 0.0;
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb25 	bl	800047c <__aeabi_i2d>
 8001e32:	4682      	mov	sl, r0
 8001e34:	468b      	mov	fp, r1
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb1d 	bl	800047c <__aeabi_i2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	ec43 2b11 	vmov	d1, r2, r3
 8001e4a:	ec4b ab10 	vmov	d0, sl, fp
 8001e4e:	f003 ffbf 	bl	8005dd0 <atan2>
 8001e52:	ec51 0b10 	vmov	r0, r1, d0
 8001e56:	a324      	add	r3, pc, #144	@ (adr r3, 8001ee8 <MPU6050_Read_WithKalman+0x3a8>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fb78 	bl	8000550 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b24      	ldr	r3, [pc, #144]	@ (8001f00 <MPU6050_Read_WithKalman+0x3c0>)
 8001e6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e72:	f7fe fddf 	bl	8000a34 <__aeabi_dcmplt>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <MPU6050_Read_WithKalman+0x352>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <MPU6050_Read_WithKalman+0x3c4>)
 8001e88:	f7fe fdf2 	bl	8000a70 <__aeabi_dcmpgt>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d114      	bne.n	8001ebc <MPU6050_Read_WithKalman+0x37c>
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <MPU6050_Read_WithKalman+0x3c4>)
 8001e98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e9c:	f7fe fde8 	bl	8000a70 <__aeabi_dcmpgt>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d032      	beq.n	8001f0c <MPU6050_Read_WithKalman+0x3cc>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MPU6050_Read_WithKalman+0x3c0>)
 8001eb2:	f7fe fdbf 	bl	8000a34 <__aeabi_dcmplt>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d027      	beq.n	8001f0c <MPU6050_Read_WithKalman+0x3cc>
        KalmanY.angle = pitch;
 8001ebc:	4912      	ldr	r1, [pc, #72]	@ (8001f08 <MPU6050_Read_WithKalman+0x3c8>)
 8001ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec2:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ecc:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001ed0:	e031      	b.n	8001f36 <MPU6050_Read_WithKalman+0x3f6>
 8001ed2:	bf00      	nop
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	40606000 	.word	0x40606000
 8001ee0:	00000000 	.word	0x00000000
 8001ee4:	412e8480 	.word	0x412e8480
 8001ee8:	1a63c1f8 	.word	0x1a63c1f8
 8001eec:	404ca5dc 	.word	0x404ca5dc
 8001ef0:	40d00000 	.word	0x40d00000
 8001ef4:	43aa0000 	.word	0x43aa0000
 8001ef8:	42121eb8 	.word	0x42121eb8
 8001efc:	20000438 	.word	0x20000438
 8001f00:	c0568000 	.word	0xc0568000
 8001f04:	40568000 	.word	0x40568000
 8001f08:	20000048 	.word	0x20000048
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001f12:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001f16:	eeb0 1a47 	vmov.f32	s2, s14
 8001f1a:	eef0 1a67 	vmov.f32	s3, s15
 8001f1e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001f22:	481e      	ldr	r0, [pc, #120]	@ (8001f9c <MPU6050_Read_WithKalman+0x45c>)
 8001f24:	f7ff fcae 	bl	8001884 <Kalman_getAngle>
 8001f28:	eeb0 7a40 	vmov.f32	s14, s0
 8001f2c:	eef0 7a60 	vmov.f32	s15, s1
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001f3c:	4690      	mov	r8, r2
 8001f3e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <MPU6050_Read_WithKalman+0x460>)
 8001f48:	4640      	mov	r0, r8
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	f7fe fd90 	bl	8000a70 <__aeabi_dcmpgt>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <MPU6050_Read_WithKalman+0x428>
        DataStruct->Gx = -DataStruct->Gx;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001f5c:	4614      	mov	r4, r2
 8001f5e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001f6e:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001f72:	eeb0 1a47 	vmov.f32	s2, s14
 8001f76:	eef0 1a67 	vmov.f32	s3, s15
 8001f7a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001f7e:	4809      	ldr	r0, [pc, #36]	@ (8001fa4 <MPU6050_Read_WithKalman+0x464>)
 8001f80:	f7ff fc80 	bl	8001884 <Kalman_getAngle>
 8001f84:	eeb0 7a40 	vmov.f32	s14, s0
 8001f88:	eef0 7a60 	vmov.f32	s15, s1
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50


}
 8001f92:	bf00      	nop
 8001f94:	3740      	adds	r7, #64	@ 0x40
 8001f96:	46bd      	mov	sp, r7
 8001f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f9c:	20000048 	.word	0x20000048
 8001fa0:	40568000 	.word	0x40568000
 8001fa4:	20000000 	.word	0x20000000

08001fa8 <MPU6050_Calibration>:
        return (0xFFFFFFFF - timer_start) + timer_end + 1;
    }
}

void MPU6050_Calibration(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	int32_t kalibreAx = 0, kalibreAy = 0, kalibreAz = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
	int32_t kalibreGx = 0, kalibreGy = 0, kalibreGz = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]

	for (uint8_t sayac = 0; sayac < 250; sayac++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	e033      	b.n	8002038 <MPU6050_Calibration+0x90>
	{
		MPU6050_Read_All(I2Cx,DataStruct);
 8001fd0:	6839      	ldr	r1, [r7, #0]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f890 	bl	80020f8 <MPU6050_Read_All>
		kalibreAx += DataStruct->Accel_X_RAW;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	4413      	add	r3, r2
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
		kalibreAy += DataStruct->Accel_Y_RAW;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fec:	461a      	mov	r2, r3
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	623b      	str	r3, [r7, #32]
		kalibreAz += DataStruct->Accel_Z_RAW;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	4413      	add	r3, r2
 8002000:	61fb      	str	r3, [r7, #28]

		kalibreGx += DataStruct->Gyro_X_RAW;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002008:	461a      	mov	r2, r3
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4413      	add	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
		kalibreGy += DataStruct->Gyro_Y_RAW;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002016:	461a      	mov	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	4413      	add	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
		kalibreGz += DataStruct->Gyro_Z_RAW;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002024:	461a      	mov	r2, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
		HAL_Delay(1);
 800202c:	2001      	movs	r0, #1
 800202e:	f000 fd1d 	bl	8002a6c <HAL_Delay>
	for (uint8_t sayac = 0; sayac < 250; sayac++)
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	3301      	adds	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2bf9      	cmp	r3, #249	@ 0xf9
 800203c:	d9c8      	bls.n	8001fd0 <MPU6050_Calibration+0x28>
	}

	DataStruct->Accel_X_RAW_K = (int16_t)(kalibreAx / 250);
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	4a2a      	ldr	r2, [pc, #168]	@ (80020ec <MPU6050_Calibration+0x144>)
 8002042:	fb82 1203 	smull	r1, r2, r2, r3
 8002046:	1112      	asrs	r2, r2, #4
 8002048:	17db      	asrs	r3, r3, #31
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	b21a      	sxth	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	DataStruct->Accel_Y_RAW_K = (int16_t)(kalibreAy / 250);
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	4a25      	ldr	r2, [pc, #148]	@ (80020ec <MPU6050_Calibration+0x144>)
 8002058:	fb82 1203 	smull	r1, r2, r2, r3
 800205c:	1112      	asrs	r2, r2, #4
 800205e:	17db      	asrs	r3, r3, #31
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	b21a      	sxth	r2, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	DataStruct->Accel_Z_RAW_K = (int16_t)((kalibreAz / 250.0) - 16384.0);
 800206a:	69f8      	ldr	r0, [r7, #28]
 800206c:	f7fe fa06 	bl	800047c <__aeabi_i2d>
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	4b1e      	ldr	r3, [pc, #120]	@ (80020f0 <MPU6050_Calibration+0x148>)
 8002076:	f7fe fb95 	bl	80007a4 <__aeabi_ddiv>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <MPU6050_Calibration+0x14c>)
 8002088:	f7fe f8aa 	bl	80001e0 <__aeabi_dsub>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f7fe fd0c 	bl	8000ab0 <__aeabi_d2iz>
 8002098:	4603      	mov	r3, r0
 800209a:	b21a      	sxth	r2, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	DataStruct->Gyro_X_RAW_K = (int16_t)(kalibreGx / 250);
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4a11      	ldr	r2, [pc, #68]	@ (80020ec <MPU6050_Calibration+0x144>)
 80020a6:	fb82 1203 	smull	r1, r2, r2, r3
 80020aa:	1112      	asrs	r2, r2, #4
 80020ac:	17db      	asrs	r3, r3, #31
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	b21a      	sxth	r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	DataStruct->Gyro_Y_RAW_K = (int16_t)(kalibreGy / 250);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4a0c      	ldr	r2, [pc, #48]	@ (80020ec <MPU6050_Calibration+0x144>)
 80020bc:	fb82 1203 	smull	r1, r2, r2, r3
 80020c0:	1112      	asrs	r2, r2, #4
 80020c2:	17db      	asrs	r3, r3, #31
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	DataStruct->Gyro_Z_RAW_K = (int16_t)(kalibreGz / 250);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4a06      	ldr	r2, [pc, #24]	@ (80020ec <MPU6050_Calibration+0x144>)
 80020d2:	fb82 1203 	smull	r1, r2, r2, r3
 80020d6:	1112      	asrs	r2, r2, #4
 80020d8:	17db      	asrs	r3, r3, #31
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	b21a      	sxth	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	@ 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	10624dd3 	.word	0x10624dd3
 80020f0:	406f4000 	.word	0x406f4000
 80020f4:	40d00000 	.word	0x40d00000

080020f8 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	@ 0x28
 80020fc:	af04      	add	r7, sp, #16
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002102:	2364      	movs	r3, #100	@ 0x64
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	230e      	movs	r3, #14
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	2301      	movs	r3, #1
 8002112:	223b      	movs	r2, #59	@ 0x3b
 8002114:	21d0      	movs	r1, #208	@ 0xd0
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f001 f98a 	bl	8003430 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800211c:	7a3b      	ldrb	r3, [r7, #8]
 800211e:	b21b      	sxth	r3, r3
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	b21a      	sxth	r2, r3
 8002124:	7a7b      	ldrb	r3, [r7, #9]
 8002126:	b21b      	sxth	r3, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	b21a      	sxth	r2, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002130:	7abb      	ldrb	r3, [r7, #10]
 8002132:	b21b      	sxth	r3, r3
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	b21a      	sxth	r2, r3
 8002138:	7afb      	ldrb	r3, [r7, #11]
 800213a:	b21b      	sxth	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b21a      	sxth	r2, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002144:	7b3b      	ldrb	r3, [r7, #12]
 8002146:	b21b      	sxth	r3, r3
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	b21a      	sxth	r2, r3
 800214c:	7b7b      	ldrb	r3, [r7, #13]
 800214e:	b21b      	sxth	r3, r3
 8002150:	4313      	orrs	r3, r2
 8002152:	b21a      	sxth	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	b21b      	sxth	r3, r3
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	b21a      	sxth	r2, r3
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	b21b      	sxth	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	82fb      	strh	r3, [r7, #22]
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002168:	7c3b      	ldrb	r3, [r7, #16]
 800216a:	b21b      	sxth	r3, r3
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21a      	sxth	r2, r3
 8002170:	7c7b      	ldrb	r3, [r7, #17]
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b21a      	sxth	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800217c:	7cbb      	ldrb	r3, [r7, #18]
 800217e:	b21b      	sxth	r3, r3
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b21a      	sxth	r2, r3
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	b21b      	sxth	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b21a      	sxth	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002190:	7d3b      	ldrb	r3, [r7, #20]
 8002192:	b21b      	sxth	r3, r3
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	b21a      	sxth	r2, r3
 8002198:	7d7b      	ldrb	r3, [r7, #21]
 800219a:	b21b      	sxth	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	b21a      	sxth	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f966 	bl	800047c <__aeabi_i2d>
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	4b38      	ldr	r3, [pc, #224]	@ (8002298 <MPU6050_Read_All+0x1a0>)
 80021b6:	f7fe faf5 	bl	80007a4 <__aeabi_ddiv>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	6839      	ldr	r1, [r7, #0]
 80021c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f956 	bl	800047c <__aeabi_i2d>
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <MPU6050_Read_All+0x1a0>)
 80021d6:	f7fe fae5 	bl	80007a4 <__aeabi_ddiv>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / 16384.0;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f946 	bl	800047c <__aeabi_i2d>
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	4b28      	ldr	r3, [pc, #160]	@ (8002298 <MPU6050_Read_All+0x1a0>)
 80021f6:	f7fe fad5 	bl	80007a4 <__aeabi_ddiv>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002204:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002210:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800229c <MPU6050_Read_All+0x1a4>
 8002214:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002218:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80022a0 <MPU6050_Read_All+0x1a8>
 800221c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe f925 	bl	800047c <__aeabi_i2d>
 8002232:	a317      	add	r3, pc, #92	@ (adr r3, 8002290 <MPU6050_Read_All+0x198>)
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	f7fe fab4 	bl	80007a4 <__aeabi_ddiv>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f915 	bl	800047c <__aeabi_i2d>
 8002252:	a30f      	add	r3, pc, #60	@ (adr r3, 8002290 <MPU6050_Read_All+0x198>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	f7fe faa4 	bl	80007a4 <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f905 	bl	800047c <__aeabi_i2d>
 8002272:	a307      	add	r3, pc, #28	@ (adr r3, 8002290 <MPU6050_Read_All+0x198>)
 8002274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002278:	f7fe fa94 	bl	80007a4 <__aeabi_ddiv>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	6839      	ldr	r1, [r7, #0]
 8002282:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	00000000 	.word	0x00000000
 8002294:	40606000 	.word	0x40606000
 8002298:	40d00000 	.word	0x40d00000
 800229c:	43aa0000 	.word	0x43aa0000
 80022a0:	42121eb8 	.word	0x42121eb8

080022a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a04      	ldr	r2, [pc, #16]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80022b6:	f000 fbb9 	bl	8002a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40014800 	.word	0x40014800

080022c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022cc:	b672      	cpsid	i
}
 80022ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <Error_Handler+0x8>

080022d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <HAL_MspInit+0x4c>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002320 <HAL_MspInit+0x4c>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <HAL_MspInit+0x4c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <HAL_MspInit+0x4c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <HAL_MspInit+0x4c>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	@ 0x40
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_MspInit+0x4c>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800

08002324 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	@ 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a4a      	ldr	r2, [pc, #296]	@ (800246c <HAL_I2C_MspInit+0x148>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d13d      	bne.n	80023c2 <HAL_I2C_MspInit+0x9e>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	4b49      	ldr	r3, [pc, #292]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	4a48      	ldr	r2, [pc, #288]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	@ 0x30
 8002356:	4b46      	ldr	r3, [pc, #280]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002368:	2312      	movs	r3, #18
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002374:	2304      	movs	r3, #4
 8002376:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	4619      	mov	r1, r3
 800237e:	483d      	ldr	r0, [pc, #244]	@ (8002474 <HAL_I2C_MspInit+0x150>)
 8002380:	f000 fc7a 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002384:	2308      	movs	r3, #8
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002388:	2312      	movs	r3, #18
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002394:	2309      	movs	r3, #9
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	4835      	ldr	r0, [pc, #212]	@ (8002474 <HAL_I2C_MspInit+0x150>)
 80023a0:	f000 fc6a 	bl	8002c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	4b31      	ldr	r3, [pc, #196]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	4a30      	ldr	r2, [pc, #192]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 80023ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80023c0:	e04f      	b.n	8002462 <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C3)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002478 <HAL_I2C_MspInit+0x154>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d14a      	bne.n	8002462 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	4a26      	ldr	r2, [pc, #152]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6313      	str	r3, [r2, #48]	@ 0x30
 80023dc:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 80023ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800240a:	2312      	movs	r3, #18
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002416:	2304      	movs	r3, #4
 8002418:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241a:	f107 031c 	add.w	r3, r7, #28
 800241e:	4619      	mov	r1, r3
 8002420:	4816      	ldr	r0, [pc, #88]	@ (800247c <HAL_I2C_MspInit+0x158>)
 8002422:	f000 fc29 	bl	8002c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002426:	2310      	movs	r3, #16
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800242a:	2312      	movs	r3, #18
 800242c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002436:	2309      	movs	r3, #9
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	4619      	mov	r1, r3
 8002440:	480c      	ldr	r0, [pc, #48]	@ (8002474 <HAL_I2C_MspInit+0x150>)
 8002442:	f000 fc19 	bl	8002c78 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 8002450:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002454:	6413      	str	r3, [r2, #64]	@ 0x40
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_I2C_MspInit+0x14c>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
}
 8002462:	bf00      	nop
 8002464:	3730      	adds	r7, #48	@ 0x30
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40005800 	.word	0x40005800
 8002470:	40023800 	.word	0x40023800
 8002474:	40020400 	.word	0x40020400
 8002478:	40005c00 	.word	0x40005c00
 800247c:	40020000 	.word	0x40020000

08002480 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	@ 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a19      	ldr	r2, [pc, #100]	@ (8002504 <HAL_SPI_MspInit+0x84>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d12c      	bne.n	80024fc <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <HAL_SPI_MspInit+0x88>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a17      	ldr	r2, [pc, #92]	@ (8002508 <HAL_SPI_MspInit+0x88>)
 80024ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b15      	ldr	r3, [pc, #84]	@ (8002508 <HAL_SPI_MspInit+0x88>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <HAL_SPI_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4a10      	ldr	r2, [pc, #64]	@ (8002508 <HAL_SPI_MspInit+0x88>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <HAL_SPI_MspInit+0x88>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024da:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ec:	2305      	movs	r3, #5
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	4805      	ldr	r0, [pc, #20]	@ (800250c <HAL_SPI_MspInit+0x8c>)
 80024f8:	f000 fbbe 	bl	8002c78 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80024fc:	bf00      	nop
 80024fe:	3728      	adds	r7, #40	@ 0x28
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40003800 	.word	0x40003800
 8002508:	40023800 	.word	0x40023800
 800250c:	40020400 	.word	0x40020400

08002510 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	4b27      	ldr	r3, [pc, #156]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	4a26      	ldr	r2, [pc, #152]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6413      	str	r3, [r2, #64]	@ 0x40
 8002532:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 800253e:	e03a      	b.n	80025b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a20      	ldr	r2, [pc, #128]	@ (80025c8 <HAL_TIM_Base_MspInit+0xb8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d10e      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6413      	str	r3, [r2, #64]	@ 0x40
 800255a:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
}
 8002566:	e026      	b.n	80025b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a17      	ldr	r2, [pc, #92]	@ (80025cc <HAL_TIM_Base_MspInit+0xbc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10e      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	4a12      	ldr	r2, [pc, #72]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6413      	str	r3, [r2, #64]	@ 0x40
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
}
 800258e:	e012      	b.n	80025b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0e      	ldr	r2, [pc, #56]	@ (80025d0 <HAL_TIM_Base_MspInit+0xc0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10d      	bne.n	80025b6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	4a08      	ldr	r2, [pc, #32]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40014000 	.word	0x40014000

080025d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	@ 0x30
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f4:	d11e      	bne.n	8002634 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	4b43      	ldr	r3, [pc, #268]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a42      	ldr	r2, [pc, #264]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b40      	ldr	r3, [pc, #256]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002612:	230f      	movs	r3, #15
 8002614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002622:	2301      	movs	r3, #1
 8002624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4619      	mov	r1, r3
 800262c:	4837      	ldr	r0, [pc, #220]	@ (800270c <HAL_TIM_MspPostInit+0x138>)
 800262e:	f000 fb23 	bl	8002c78 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002632:	e065      	b.n	8002700 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a35      	ldr	r2, [pc, #212]	@ (8002710 <HAL_TIM_MspPostInit+0x13c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d13c      	bne.n	80026b8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	4b31      	ldr	r3, [pc, #196]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	4a30      	ldr	r2, [pc, #192]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6313      	str	r3, [r2, #48]	@ 0x30
 800264e:	4b2e      	ldr	r3, [pc, #184]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	4a29      	ldr	r2, [pc, #164]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	6313      	str	r3, [r2, #48]	@ 0x30
 800266a:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002676:	23c0      	movs	r3, #192	@ 0xc0
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002686:	2302      	movs	r3, #2
 8002688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	4619      	mov	r1, r3
 8002690:	481e      	ldr	r0, [pc, #120]	@ (800270c <HAL_TIM_MspPostInit+0x138>)
 8002692:	f000 faf1 	bl	8002c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002696:	2303      	movs	r3, #3
 8002698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	4619      	mov	r1, r3
 80026b0:	4818      	ldr	r0, [pc, #96]	@ (8002714 <HAL_TIM_MspPostInit+0x140>)
 80026b2:	f000 fae1 	bl	8002c78 <HAL_GPIO_Init>
}
 80026b6:	e023      	b.n	8002700 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a16      	ldr	r2, [pc, #88]	@ (8002718 <HAL_TIM_MspPostInit+0x144>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d11e      	bne.n	8002700 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <HAL_TIM_MspPostInit+0x134>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026de:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80026e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026f0:	2302      	movs	r3, #2
 80026f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	@ (8002714 <HAL_TIM_MspPostInit+0x140>)
 80026fc:	f000 fabc 	bl	8002c78 <HAL_GPIO_Init>
}
 8002700:	bf00      	nop
 8002702:	3730      	adds	r7, #48	@ 0x30
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	40020000 	.word	0x40020000
 8002710:	40000400 	.word	0x40000400
 8002714:	40020400 	.word	0x40020400
 8002718:	40000800 	.word	0x40000800

0800271c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	@ 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a33      	ldr	r2, [pc, #204]	@ (8002808 <HAL_UART_MspInit+0xec>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d12d      	bne.n	800279a <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	4b32      	ldr	r3, [pc, #200]	@ (800280c <HAL_UART_MspInit+0xf0>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	4a31      	ldr	r2, [pc, #196]	@ (800280c <HAL_UART_MspInit+0xf0>)
 8002748:	f043 0310 	orr.w	r3, r3, #16
 800274c:	6453      	str	r3, [r2, #68]	@ 0x44
 800274e:	4b2f      	ldr	r3, [pc, #188]	@ (800280c <HAL_UART_MspInit+0xf0>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <HAL_UART_MspInit+0xf0>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <HAL_UART_MspInit+0xf0>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6313      	str	r3, [r2, #48]	@ 0x30
 800276a:	4b28      	ldr	r3, [pc, #160]	@ (800280c <HAL_UART_MspInit+0xf0>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002776:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800277a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002788:	2307      	movs	r3, #7
 800278a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f107 031c 	add.w	r3, r7, #28
 8002790:	4619      	mov	r1, r3
 8002792:	481f      	ldr	r0, [pc, #124]	@ (8002810 <HAL_UART_MspInit+0xf4>)
 8002794:	f000 fa70 	bl	8002c78 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002798:	e031      	b.n	80027fe <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1d      	ldr	r2, [pc, #116]	@ (8002814 <HAL_UART_MspInit+0xf8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d12c      	bne.n	80027fe <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	4b18      	ldr	r3, [pc, #96]	@ (800280c <HAL_UART_MspInit+0xf0>)
 80027aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ac:	4a17      	ldr	r2, [pc, #92]	@ (800280c <HAL_UART_MspInit+0xf0>)
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b4:	4b15      	ldr	r3, [pc, #84]	@ (800280c <HAL_UART_MspInit+0xf0>)
 80027b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <HAL_UART_MspInit+0xf0>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c8:	4a10      	ldr	r2, [pc, #64]	@ (800280c <HAL_UART_MspInit+0xf0>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d0:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <HAL_UART_MspInit+0xf0>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027dc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80027e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027ee:	2308      	movs	r3, #8
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	4619      	mov	r1, r3
 80027f8:	4805      	ldr	r0, [pc, #20]	@ (8002810 <HAL_UART_MspInit+0xf4>)
 80027fa:	f000 fa3d 	bl	8002c78 <HAL_GPIO_Init>
}
 80027fe:	bf00      	nop
 8002800:	3730      	adds	r7, #48	@ 0x30
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40011000 	.word	0x40011000
 800280c:	40023800 	.word	0x40023800
 8002810:	40020000 	.word	0x40020000
 8002814:	40011400 	.word	0x40011400

08002818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	@ 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002828:	2300      	movs	r3, #0
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <HAL_InitTick+0xd0>)
 800282e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002830:	4a2d      	ldr	r2, [pc, #180]	@ (80028e8 <HAL_InitTick+0xd0>)
 8002832:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002836:	6453      	str	r3, [r2, #68]	@ 0x44
 8002838:	4b2b      	ldr	r3, [pc, #172]	@ (80028e8 <HAL_InitTick+0xd0>)
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002844:	f107 020c 	add.w	r2, r7, #12
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f002 f82c 	bl	80048ac <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002854:	f002 f816 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
 8002858:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800285a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285c:	4a23      	ldr	r2, [pc, #140]	@ (80028ec <HAL_InitTick+0xd4>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0c9b      	lsrs	r3, r3, #18
 8002864:	3b01      	subs	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002868:	4b21      	ldr	r3, [pc, #132]	@ (80028f0 <HAL_InitTick+0xd8>)
 800286a:	4a22      	ldr	r2, [pc, #136]	@ (80028f4 <HAL_InitTick+0xdc>)
 800286c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800286e:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_InitTick+0xd8>)
 8002870:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002874:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002876:	4a1e      	ldr	r2, [pc, #120]	@ (80028f0 <HAL_InitTick+0xd8>)
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800287c:	4b1c      	ldr	r3, [pc, #112]	@ (80028f0 <HAL_InitTick+0xd8>)
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002882:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_InitTick+0xd8>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002888:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <HAL_InitTick+0xd8>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800288e:	4818      	ldr	r0, [pc, #96]	@ (80028f0 <HAL_InitTick+0xd8>)
 8002890:	f002 f8c7 	bl	8004a22 <HAL_TIM_Base_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800289a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d11b      	bne.n	80028da <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80028a2:	4813      	ldr	r0, [pc, #76]	@ (80028f0 <HAL_InitTick+0xd8>)
 80028a4:	f002 f90c 	bl	8004ac0 <HAL_TIM_Base_Start_IT>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80028ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d111      	bne.n	80028da <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80028b6:	201a      	movs	r0, #26
 80028b8:	f000 f9d0 	bl	8002c5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	d808      	bhi.n	80028d4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80028c2:	2200      	movs	r2, #0
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	201a      	movs	r0, #26
 80028c8:	f000 f9ac 	bl	8002c24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028cc:	4a0a      	ldr	r2, [pc, #40]	@ (80028f8 <HAL_InitTick+0xe0>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e002      	b.n	80028da <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80028da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3730      	adds	r7, #48	@ 0x30
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	431bde83 	.word	0x431bde83
 80028f0:	2000043c 	.word	0x2000043c
 80028f4:	40014800 	.word	0x40014800
 80028f8:	20000094 	.word	0x20000094

080028fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <NMI_Handler+0x4>

08002904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <HardFault_Handler+0x4>

0800290c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <MemManage_Handler+0x4>

08002914 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <BusFault_Handler+0x4>

0800291c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <UsageFault_Handler+0x4>

08002924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002960:	4802      	ldr	r0, [pc, #8]	@ (800296c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002962:	f002 f968 	bl	8004c36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	2000043c 	.word	0x2000043c

08002970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002974:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <SystemInit+0x20>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <SystemInit+0x20>)
 800297c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002998:	f7ff ffea 	bl	8002970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800299c:	480c      	ldr	r0, [pc, #48]	@ (80029d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800299e:	490d      	ldr	r1, [pc, #52]	@ (80029d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029a0:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a4:	e002      	b.n	80029ac <LoopCopyDataInit>

080029a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029aa:	3304      	adds	r3, #4

080029ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b0:	d3f9      	bcc.n	80029a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b2:	4a0a      	ldr	r2, [pc, #40]	@ (80029dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029b4:	4c0a      	ldr	r4, [pc, #40]	@ (80029e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b8:	e001      	b.n	80029be <LoopFillZerobss>

080029ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029bc:	3204      	adds	r2, #4

080029be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c0:	d3fb      	bcc.n	80029ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029c2:	f003 f9e1 	bl	8005d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029c6:	f7fe fa81 	bl	8000ecc <main>
  bx  lr    
 80029ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d4:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80029d8:	08006570 	.word	0x08006570
  ldr r2, =_sbss
 80029dc:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80029e0:	200005c0 	.word	0x200005c0

080029e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029e4:	e7fe      	b.n	80029e4 <ADC_IRQHandler>
	...

080029e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <HAL_Init+0x40>)
 80029f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <HAL_Init+0x40>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <HAL_Init+0x40>)
 80029fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a04:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <HAL_Init+0x40>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a07      	ldr	r2, [pc, #28]	@ (8002a28 <HAL_Init+0x40>)
 8002a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a10:	2003      	movs	r0, #3
 8002a12:	f000 f8fc 	bl	8002c0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a16:	200f      	movs	r0, #15
 8002a18:	f7ff fefe 	bl	8002818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a1c:	f7ff fc5a 	bl	80022d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023c00 	.word	0x40023c00

08002a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a30:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_IncTick+0x20>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_IncTick+0x24>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <HAL_IncTick+0x24>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000098 	.word	0x20000098
 8002a50:	20000484 	.word	0x20000484

08002a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return uwTick;
 8002a58:	4b03      	ldr	r3, [pc, #12]	@ (8002a68 <HAL_GetTick+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000484 	.word	0x20000484

08002a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7ff ffee 	bl	8002a54 <HAL_GetTick>
 8002a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d005      	beq.n	8002a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_Delay+0x44>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4413      	add	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a92:	bf00      	nop
 8002a94:	f7ff ffde 	bl	8002a54 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d8f7      	bhi.n	8002a94 <HAL_Delay+0x28>
  {
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000098 	.word	0x20000098

08002ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae6:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	60d3      	str	r3, [r2, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <__NVIC_GetPriorityGrouping+0x18>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0307 	and.w	r3, r3, #7
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	db0b      	blt.n	8002b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4907      	ldr	r1, [pc, #28]	@ (8002b50 <__NVIC_EnableIRQ+0x38>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2001      	movs	r0, #1
 8002b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db0a      	blt.n	8002b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	490c      	ldr	r1, [pc, #48]	@ (8002ba0 <__NVIC_SetPriority+0x4c>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b7c:	e00a      	b.n	8002b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4908      	ldr	r1, [pc, #32]	@ (8002ba4 <__NVIC_SetPriority+0x50>)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	440b      	add	r3, r1
 8002b92:	761a      	strb	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000e100 	.word	0xe000e100
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	@ 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf28      	it	cs
 8002bc6:	2304      	movcs	r3, #4
 8002bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d902      	bls.n	8002bd8 <NVIC_EncodePriority+0x30>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3b03      	subs	r3, #3
 8002bd6:	e000      	b.n	8002bda <NVIC_EncodePriority+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	4313      	orrs	r3, r2
         );
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	@ 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ff4c 	bl	8002ab4 <__NVIC_SetPriorityGrouping>
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c36:	f7ff ff61 	bl	8002afc <__NVIC_GetPriorityGrouping>
 8002c3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	6978      	ldr	r0, [r7, #20]
 8002c42:	f7ff ffb1 	bl	8002ba8 <NVIC_EncodePriority>
 8002c46:	4602      	mov	r2, r0
 8002c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ff80 	bl	8002b54 <__NVIC_SetPriority>
}
 8002c54:	bf00      	nop
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff ff54 	bl	8002b18 <__NVIC_EnableIRQ>
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	@ 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	e159      	b.n	8002f48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c94:	2201      	movs	r2, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	f040 8148 	bne.w	8002f42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d005      	beq.n	8002cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d130      	bne.n	8002d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d00:	2201      	movs	r2, #1
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 0201 	and.w	r2, r3, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d017      	beq.n	8002d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d123      	bne.n	8002dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	08da      	lsrs	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3208      	adds	r2, #8
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a2 	beq.w	8002f42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b57      	ldr	r3, [pc, #348]	@ (8002f60 <HAL_GPIO_Init+0x2e8>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	4a56      	ldr	r2, [pc, #344]	@ (8002f60 <HAL_GPIO_Init+0x2e8>)
 8002e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e0e:	4b54      	ldr	r3, [pc, #336]	@ (8002f60 <HAL_GPIO_Init+0x2e8>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e1a:	4a52      	ldr	r2, [pc, #328]	@ (8002f64 <HAL_GPIO_Init+0x2ec>)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	3302      	adds	r3, #2
 8002e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	220f      	movs	r2, #15
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a49      	ldr	r2, [pc, #292]	@ (8002f68 <HAL_GPIO_Init+0x2f0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d019      	beq.n	8002e7a <HAL_GPIO_Init+0x202>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a48      	ldr	r2, [pc, #288]	@ (8002f6c <HAL_GPIO_Init+0x2f4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_GPIO_Init+0x1fe>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a47      	ldr	r2, [pc, #284]	@ (8002f70 <HAL_GPIO_Init+0x2f8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00d      	beq.n	8002e72 <HAL_GPIO_Init+0x1fa>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a46      	ldr	r2, [pc, #280]	@ (8002f74 <HAL_GPIO_Init+0x2fc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <HAL_GPIO_Init+0x1f6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a45      	ldr	r2, [pc, #276]	@ (8002f78 <HAL_GPIO_Init+0x300>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_GPIO_Init+0x1f2>
 8002e66:	2304      	movs	r3, #4
 8002e68:	e008      	b.n	8002e7c <HAL_GPIO_Init+0x204>
 8002e6a:	2307      	movs	r3, #7
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_Init+0x204>
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e004      	b.n	8002e7c <HAL_GPIO_Init+0x204>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e002      	b.n	8002e7c <HAL_GPIO_Init+0x204>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_GPIO_Init+0x204>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	f002 0203 	and.w	r2, r2, #3
 8002e82:	0092      	lsls	r2, r2, #2
 8002e84:	4093      	lsls	r3, r2
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e8c:	4935      	ldr	r1, [pc, #212]	@ (8002f64 <HAL_GPIO_Init+0x2ec>)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	3302      	adds	r3, #2
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e9a:	4b38      	ldr	r3, [pc, #224]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee8:	4a24      	ldr	r2, [pc, #144]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eee:	4b23      	ldr	r3, [pc, #140]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f12:	4a1a      	ldr	r2, [pc, #104]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f18:	4b18      	ldr	r3, [pc, #96]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3301      	adds	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2b0f      	cmp	r3, #15
 8002f4c:	f67f aea2 	bls.w	8002c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3724      	adds	r7, #36	@ 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020400 	.word	0x40020400
 8002f70:	40020800 	.word	0x40020800
 8002f74:	40020c00 	.word	0x40020c00
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40013c00 	.word	0x40013c00

08002f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f90:	787b      	ldrb	r3, [r7, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f9c:	e003      	b.n	8002fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f9e:	887b      	ldrh	r3, [r7, #2]
 8002fa0:	041a      	lsls	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	619a      	str	r2, [r3, #24]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e12b      	b.n	800321e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff f9a2 	bl	8002324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	@ 0x24
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003018:	f001 fc20 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 800301c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a81      	ldr	r2, [pc, #516]	@ (8003228 <HAL_I2C_Init+0x274>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d807      	bhi.n	8003038 <HAL_I2C_Init+0x84>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a80      	ldr	r2, [pc, #512]	@ (800322c <HAL_I2C_Init+0x278>)
 800302c:	4293      	cmp	r3, r2
 800302e:	bf94      	ite	ls
 8003030:	2301      	movls	r3, #1
 8003032:	2300      	movhi	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e006      	b.n	8003046 <HAL_I2C_Init+0x92>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a7d      	ldr	r2, [pc, #500]	@ (8003230 <HAL_I2C_Init+0x27c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	bf94      	ite	ls
 8003040:	2301      	movls	r3, #1
 8003042:	2300      	movhi	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0e7      	b.n	800321e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4a78      	ldr	r2, [pc, #480]	@ (8003234 <HAL_I2C_Init+0x280>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0c9b      	lsrs	r3, r3, #18
 8003058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a6a      	ldr	r2, [pc, #424]	@ (8003228 <HAL_I2C_Init+0x274>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d802      	bhi.n	8003088 <HAL_I2C_Init+0xd4>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	3301      	adds	r3, #1
 8003086:	e009      	b.n	800309c <HAL_I2C_Init+0xe8>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	4a69      	ldr	r2, [pc, #420]	@ (8003238 <HAL_I2C_Init+0x284>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	3301      	adds	r3, #1
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	495c      	ldr	r1, [pc, #368]	@ (8003228 <HAL_I2C_Init+0x274>)
 80030b8:	428b      	cmp	r3, r1
 80030ba:	d819      	bhi.n	80030f0 <HAL_I2C_Init+0x13c>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e59      	subs	r1, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ca:	1c59      	adds	r1, r3, #1
 80030cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030d0:	400b      	ands	r3, r1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_I2C_Init+0x138>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1e59      	subs	r1, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ea:	e051      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 80030ec:	2304      	movs	r3, #4
 80030ee:	e04f      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d111      	bne.n	800311c <HAL_I2C_Init+0x168>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	440b      	add	r3, r1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e012      	b.n	8003142 <HAL_I2C_Init+0x18e>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e58      	subs	r0, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	0099      	lsls	r1, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Init+0x196>
 8003146:	2301      	movs	r3, #1
 8003148:	e022      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10e      	bne.n	8003170 <HAL_I2C_Init+0x1bc>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1e58      	subs	r0, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6859      	ldr	r1, [r3, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	440b      	add	r3, r1
 8003160:	fbb0 f3f3 	udiv	r3, r0, r3
 8003164:	3301      	adds	r3, #1
 8003166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800316e:	e00f      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	0099      	lsls	r1, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	6809      	ldr	r1, [r1, #0]
 8003194:	4313      	orrs	r3, r2
 8003196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6911      	ldr	r1, [r2, #16]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68d2      	ldr	r2, [r2, #12]
 80031ca:	4311      	orrs	r1, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	000186a0 	.word	0x000186a0
 800322c:	001e847f 	.word	0x001e847f
 8003230:	003d08ff 	.word	0x003d08ff
 8003234:	431bde83 	.word	0x431bde83
 8003238:	10624dd3 	.word	0x10624dd3

0800323c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	461a      	mov	r2, r3
 800324a:	4603      	mov	r3, r0
 800324c:	817b      	strh	r3, [r7, #10]
 800324e:	460b      	mov	r3, r1
 8003250:	813b      	strh	r3, [r7, #8]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003256:	f7ff fbfd 	bl	8002a54 <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b20      	cmp	r3, #32
 8003266:	f040 80d9 	bne.w	800341c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2319      	movs	r3, #25
 8003270:	2201      	movs	r2, #1
 8003272:	496d      	ldr	r1, [pc, #436]	@ (8003428 <HAL_I2C_Mem_Write+0x1ec>)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fc8b 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
 8003282:	e0cc      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_I2C_Mem_Write+0x56>
 800328e:	2302      	movs	r3, #2
 8003290:	e0c5      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d007      	beq.n	80032b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2221      	movs	r2, #33	@ 0x21
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2240      	movs	r2, #64	@ 0x40
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a4d      	ldr	r2, [pc, #308]	@ (800342c <HAL_I2C_Mem_Write+0x1f0>)
 80032f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032fa:	88f8      	ldrh	r0, [r7, #6]
 80032fc:	893a      	ldrh	r2, [r7, #8]
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	4603      	mov	r3, r0
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fac2 	bl	8003894 <I2C_RequestMemoryWrite>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d052      	beq.n	80033bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e081      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fd50 	bl	8003dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	2b04      	cmp	r3, #4
 8003330:	d107      	bne.n	8003342 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003340:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06b      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b04      	cmp	r3, #4
 8003382:	d11b      	bne.n	80033bc <HAL_I2C_Mem_Write+0x180>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	d017      	beq.n	80033bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	781a      	ldrb	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1aa      	bne.n	800331a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fd43 	bl	8003e54 <I2C_WaitOnBTFFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00d      	beq.n	80033f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d107      	bne.n	80033ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e016      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	00100002 	.word	0x00100002
 800342c:	ffff0000 	.word	0xffff0000

08003430 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	@ 0x30
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4603      	mov	r3, r0
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	460b      	mov	r3, r1
 8003444:	813b      	strh	r3, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800344a:	f7ff fb03 	bl	8002a54 <HAL_GetTick>
 800344e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b20      	cmp	r3, #32
 800345a:	f040 8214 	bne.w	8003886 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2319      	movs	r3, #25
 8003464:	2201      	movs	r2, #1
 8003466:	497b      	ldr	r1, [pc, #492]	@ (8003654 <HAL_I2C_Mem_Read+0x224>)
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fb91 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
 8003476:	e207      	b.n	8003888 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_I2C_Mem_Read+0x56>
 8003482:	2302      	movs	r3, #2
 8003484:	e200      	b.n	8003888 <HAL_I2C_Mem_Read+0x458>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d007      	beq.n	80034ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2222      	movs	r2, #34	@ 0x22
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2240      	movs	r2, #64	@ 0x40
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003658 <HAL_I2C_Mem_Read+0x228>)
 80034ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ee:	88f8      	ldrh	r0, [r7, #6]
 80034f0:	893a      	ldrh	r2, [r7, #8]
 80034f2:	8979      	ldrh	r1, [r7, #10]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	4603      	mov	r3, r0
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 fa5e 	bl	80039c0 <I2C_RequestMemoryRead>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1bc      	b.n	8003888 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003512:	2b00      	cmp	r3, #0
 8003514:	d113      	bne.n	800353e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003516:	2300      	movs	r3, #0
 8003518:	623b      	str	r3, [r7, #32]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	623b      	str	r3, [r7, #32]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	623b      	str	r3, [r7, #32]
 800352a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e190      	b.n	8003860 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003542:	2b01      	cmp	r3, #1
 8003544:	d11b      	bne.n	800357e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e170      	b.n	8003860 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003582:	2b02      	cmp	r3, #2
 8003584:	d11b      	bne.n	80035be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003594:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	e150      	b.n	8003860 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035d4:	e144      	b.n	8003860 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035da:	2b03      	cmp	r3, #3
 80035dc:	f200 80f1 	bhi.w	80037c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d123      	bne.n	8003630 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fc79 	bl	8003ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e145      	b.n	8003888 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800362e:	e117      	b.n	8003860 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003634:	2b02      	cmp	r3, #2
 8003636:	d14e      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363e:	2200      	movs	r2, #0
 8003640:	4906      	ldr	r1, [pc, #24]	@ (800365c <HAL_I2C_Mem_Read+0x22c>)
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 faa4 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e11a      	b.n	8003888 <HAL_I2C_Mem_Read+0x458>
 8003652:	bf00      	nop
 8003654:	00100002 	.word	0x00100002
 8003658:	ffff0000 	.word	0xffff0000
 800365c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036d4:	e0c4      	b.n	8003860 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036dc:	2200      	movs	r2, #0
 80036de:	496c      	ldr	r1, [pc, #432]	@ (8003890 <HAL_I2C_Mem_Read+0x460>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fa55 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0cb      	b.n	8003888 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003738:	2200      	movs	r2, #0
 800373a:	4955      	ldr	r1, [pc, #340]	@ (8003890 <HAL_I2C_Mem_Read+0x460>)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fa27 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e09d      	b.n	8003888 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037c0:	e04e      	b.n	8003860 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fb8c 	bl	8003ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e058      	b.n	8003888 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d124      	bne.n	8003860 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381a:	2b03      	cmp	r3, #3
 800381c:	d107      	bne.n	800382e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800382c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	f47f aeb6 	bne.w	80035d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3728      	adds	r7, #40	@ 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	00010004 	.word	0x00010004

08003894 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	817b      	strh	r3, [r7, #10]
 80038a6:	460b      	mov	r3, r1
 80038a8:	813b      	strh	r3, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f960 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00d      	beq.n	80038f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e4:	d103      	bne.n	80038ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e05f      	b.n	80039b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038f2:	897b      	ldrh	r3, [r7, #10]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003900:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	492d      	ldr	r1, [pc, #180]	@ (80039bc <I2C_RequestMemoryWrite+0x128>)
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f9bb 	bl	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e04c      	b.n	80039b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003930:	6a39      	ldr	r1, [r7, #32]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fa46 	bl	8003dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	2b04      	cmp	r3, #4
 8003944:	d107      	bne.n	8003956 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003954:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e02b      	b.n	80039b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003960:	893b      	ldrh	r3, [r7, #8]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	611a      	str	r2, [r3, #16]
 800396a:	e021      	b.n	80039b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800396c:	893b      	ldrh	r3, [r7, #8]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	b29b      	uxth	r3, r3
 8003972:	b2da      	uxtb	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800397a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397c:	6a39      	ldr	r1, [r7, #32]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fa20 	bl	8003dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	2b04      	cmp	r3, #4
 8003990:	d107      	bne.n	80039a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e005      	b.n	80039b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039a6:	893b      	ldrh	r3, [r7, #8]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	00010002 	.word	0x00010002

080039c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	817b      	strh	r3, [r7, #10]
 80039d2:	460b      	mov	r3, r1
 80039d4:	813b      	strh	r3, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f8c2 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a20:	d103      	bne.n	8003a2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0aa      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a2e:	897b      	ldrh	r3, [r7, #10]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	4952      	ldr	r1, [pc, #328]	@ (8003b8c <I2C_RequestMemoryRead+0x1cc>)
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f91d 	bl	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e097      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6c:	6a39      	ldr	r1, [r7, #32]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f9a8 	bl	8003dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d107      	bne.n	8003a92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e076      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	611a      	str	r2, [r3, #16]
 8003aa6:	e021      	b.n	8003aec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab8:	6a39      	ldr	r1, [r7, #32]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f982 	bl	8003dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d107      	bne.n	8003ade <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003adc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e050      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae2:	893b      	ldrh	r3, [r7, #8]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aee:	6a39      	ldr	r1, [r7, #32]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f967 	bl	8003dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d107      	bne.n	8003b14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e035      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f82b 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b4e:	d103      	bne.n	8003b58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e013      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b5c:	897b      	ldrh	r3, [r7, #10]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	6a3a      	ldr	r2, [r7, #32]
 8003b70:	4906      	ldr	r1, [pc, #24]	@ (8003b8c <I2C_RequestMemoryRead+0x1cc>)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f886 	bl	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	00010002 	.word	0x00010002

08003b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba0:	e048      	b.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d044      	beq.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003baa:	f7fe ff53 	bl	8002a54 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d302      	bcc.n	8003bc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d139      	bne.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10d      	bne.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	e00c      	b.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	43da      	mvns	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d116      	bne.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e023      	b.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d10d      	bne.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	43da      	mvns	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	e00c      	b.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	43da      	mvns	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4013      	ands	r3, r2
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d093      	beq.n	8003ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c92:	e071      	b.n	8003d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca2:	d123      	bne.n	8003cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd8:	f043 0204 	orr.w	r2, r3, #4
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e067      	b.n	8003dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d041      	beq.n	8003d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf4:	f7fe feae 	bl	8002a54 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d302      	bcc.n	8003d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d136      	bne.n	8003d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10c      	bne.n	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	e00b      	b.n	8003d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	43da      	mvns	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d016      	beq.n	8003d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e021      	b.n	8003dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	0c1b      	lsrs	r3, r3, #16
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d10c      	bne.n	8003d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e00b      	b.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4013      	ands	r3, r2
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f47f af6d 	bne.w	8003c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd0:	e034      	b.n	8003e3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f8e3 	bl	8003f9e <I2C_IsAcknowledgeFailed>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e034      	b.n	8003e4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d028      	beq.n	8003e3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dea:	f7fe fe33 	bl	8002a54 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d302      	bcc.n	8003e00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d11d      	bne.n	8003e3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0a:	2b80      	cmp	r3, #128	@ 0x80
 8003e0c:	d016      	beq.n	8003e3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	f043 0220 	orr.w	r2, r3, #32
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e007      	b.n	8003e4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e46:	2b80      	cmp	r3, #128	@ 0x80
 8003e48:	d1c3      	bne.n	8003dd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e60:	e034      	b.n	8003ecc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f89b 	bl	8003f9e <I2C_IsAcknowledgeFailed>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e034      	b.n	8003edc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d028      	beq.n	8003ecc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7fe fdeb 	bl	8002a54 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d11d      	bne.n	8003ecc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d016      	beq.n	8003ecc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d1c3      	bne.n	8003e62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ef0:	e049      	b.n	8003f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d119      	bne.n	8003f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0210 	mvn.w	r2, #16
 8003f08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e030      	b.n	8003f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f34:	f7fe fd8e 	bl	8002a54 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d302      	bcc.n	8003f4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d11d      	bne.n	8003f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f54:	2b40      	cmp	r3, #64	@ 0x40
 8003f56:	d016      	beq.n	8003f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f043 0220 	orr.w	r2, r3, #32
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e007      	b.n	8003f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f90:	2b40      	cmp	r3, #64	@ 0x40
 8003f92:	d1ae      	bne.n	8003ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb4:	d11b      	bne.n	8003fee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fbe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f043 0204 	orr.w	r2, r3, #4
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e267      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d075      	beq.n	8004106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800401a:	4b88      	ldr	r3, [pc, #544]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b04      	cmp	r3, #4
 8004024:	d00c      	beq.n	8004040 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004026:	4b85      	ldr	r3, [pc, #532]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800402e:	2b08      	cmp	r3, #8
 8004030:	d112      	bne.n	8004058 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004032:	4b82      	ldr	r3, [pc, #520]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800403a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800403e:	d10b      	bne.n	8004058 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	4b7e      	ldr	r3, [pc, #504]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d05b      	beq.n	8004104 <HAL_RCC_OscConfig+0x108>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d157      	bne.n	8004104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e242      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004060:	d106      	bne.n	8004070 <HAL_RCC_OscConfig+0x74>
 8004062:	4b76      	ldr	r3, [pc, #472]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a75      	ldr	r2, [pc, #468]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e01d      	b.n	80040ac <HAL_RCC_OscConfig+0xb0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004078:	d10c      	bne.n	8004094 <HAL_RCC_OscConfig+0x98>
 800407a:	4b70      	ldr	r3, [pc, #448]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a6f      	ldr	r2, [pc, #444]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4b6d      	ldr	r3, [pc, #436]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a6c      	ldr	r2, [pc, #432]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e00b      	b.n	80040ac <HAL_RCC_OscConfig+0xb0>
 8004094:	4b69      	ldr	r3, [pc, #420]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a68      	ldr	r2, [pc, #416]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800409a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4b66      	ldr	r3, [pc, #408]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a65      	ldr	r2, [pc, #404]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80040a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d013      	beq.n	80040dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe fcce 	bl	8002a54 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fe fcca 	bl	8002a54 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	@ 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e207      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b5b      	ldr	r3, [pc, #364]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0xc0>
 80040da:	e014      	b.n	8004106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7fe fcba 	bl	8002a54 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fe fcb6 	bl	8002a54 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	@ 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e1f3      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	4b51      	ldr	r3, [pc, #324]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0xe8>
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d063      	beq.n	80041da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004112:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00b      	beq.n	8004136 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411e:	4b47      	ldr	r3, [pc, #284]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004126:	2b08      	cmp	r3, #8
 8004128:	d11c      	bne.n	8004164 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412a:	4b44      	ldr	r3, [pc, #272]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d116      	bne.n	8004164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004136:	4b41      	ldr	r3, [pc, #260]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_RCC_OscConfig+0x152>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d001      	beq.n	800414e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e1c7      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b3b      	ldr	r3, [pc, #236]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4937      	ldr	r1, [pc, #220]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004162:	e03a      	b.n	80041da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d020      	beq.n	80041ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800416c:	4b34      	ldr	r3, [pc, #208]	@ (8004240 <HAL_RCC_OscConfig+0x244>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fe fc6f 	bl	8002a54 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417a:	f7fe fc6b 	bl	8002a54 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1a8      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418c:	4b2b      	ldr	r3, [pc, #172]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004198:	4b28      	ldr	r3, [pc, #160]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4925      	ldr	r1, [pc, #148]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
 80041ac:	e015      	b.n	80041da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ae:	4b24      	ldr	r3, [pc, #144]	@ (8004240 <HAL_RCC_OscConfig+0x244>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fe fc4e 	bl	8002a54 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041bc:	f7fe fc4a 	bl	8002a54 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e187      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d036      	beq.n	8004254 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d016      	beq.n	800421c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ee:	4b15      	ldr	r3, [pc, #84]	@ (8004244 <HAL_RCC_OscConfig+0x248>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fe fc2e 	bl	8002a54 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fc:	f7fe fc2a 	bl	8002a54 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e167      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420e:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x200>
 800421a:	e01b      	b.n	8004254 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800421c:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <HAL_RCC_OscConfig+0x248>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004222:	f7fe fc17 	bl	8002a54 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004228:	e00e      	b.n	8004248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422a:	f7fe fc13 	bl	8002a54 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d907      	bls.n	8004248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e150      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
 800423c:	40023800 	.word	0x40023800
 8004240:	42470000 	.word	0x42470000
 8004244:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004248:	4b88      	ldr	r3, [pc, #544]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800424a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1ea      	bne.n	800422a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8097 	beq.w	8004390 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004266:	4b81      	ldr	r3, [pc, #516]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	4b7d      	ldr	r3, [pc, #500]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	4a7c      	ldr	r2, [pc, #496]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004280:	6413      	str	r3, [r2, #64]	@ 0x40
 8004282:	4b7a      	ldr	r3, [pc, #488]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800428e:	2301      	movs	r3, #1
 8004290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004292:	4b77      	ldr	r3, [pc, #476]	@ (8004470 <HAL_RCC_OscConfig+0x474>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d118      	bne.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800429e:	4b74      	ldr	r3, [pc, #464]	@ (8004470 <HAL_RCC_OscConfig+0x474>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a73      	ldr	r2, [pc, #460]	@ (8004470 <HAL_RCC_OscConfig+0x474>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042aa:	f7fe fbd3 	bl	8002a54 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fe fbcf 	bl	8002a54 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e10c      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004470 <HAL_RCC_OscConfig+0x474>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x2ea>
 80042d8:	4b64      	ldr	r3, [pc, #400]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042dc:	4a63      	ldr	r2, [pc, #396]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e4:	e01c      	b.n	8004320 <HAL_RCC_OscConfig+0x324>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x30c>
 80042ee:	4b5f      	ldr	r3, [pc, #380]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f2:	4a5e      	ldr	r2, [pc, #376]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80042f4:	f043 0304 	orr.w	r3, r3, #4
 80042f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fa:	4b5c      	ldr	r3, [pc, #368]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fe:	4a5b      	ldr	r2, [pc, #364]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6713      	str	r3, [r2, #112]	@ 0x70
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0x324>
 8004308:	4b58      	ldr	r3, [pc, #352]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430c:	4a57      	ldr	r2, [pc, #348]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	6713      	str	r3, [r2, #112]	@ 0x70
 8004314:	4b55      	ldr	r3, [pc, #340]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004318:	4a54      	ldr	r2, [pc, #336]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800431a:	f023 0304 	bic.w	r3, r3, #4
 800431e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d015      	beq.n	8004354 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004328:	f7fe fb94 	bl	8002a54 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432e:	e00a      	b.n	8004346 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fe fb90 	bl	8002a54 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0cb      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	4b49      	ldr	r3, [pc, #292]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0ee      	beq.n	8004330 <HAL_RCC_OscConfig+0x334>
 8004352:	e014      	b.n	800437e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004354:	f7fe fb7e 	bl	8002a54 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435a:	e00a      	b.n	8004372 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435c:	f7fe fb7a 	bl	8002a54 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0b5      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	4b3e      	ldr	r3, [pc, #248]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ee      	bne.n	800435c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d105      	bne.n	8004390 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004384:	4b39      	ldr	r3, [pc, #228]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	4a38      	ldr	r2, [pc, #224]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800438a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800438e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a1 	beq.w	80044dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800439a:	4b34      	ldr	r3, [pc, #208]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d05c      	beq.n	8004460 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d141      	bne.n	8004432 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ae:	4b31      	ldr	r3, [pc, #196]	@ (8004474 <HAL_RCC_OscConfig+0x478>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fe fb4e 	bl	8002a54 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fe fb4a 	bl	8002a54 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e087      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ce:	4b27      	ldr	r3, [pc, #156]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	019b      	lsls	r3, r3, #6
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	3b01      	subs	r3, #1
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	061b      	lsls	r3, r3, #24
 80043fe:	491b      	ldr	r1, [pc, #108]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004404:	4b1b      	ldr	r3, [pc, #108]	@ (8004474 <HAL_RCC_OscConfig+0x478>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440a:	f7fe fb23 	bl	8002a54 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004412:	f7fe fb1f 	bl	8002a54 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e05c      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004424:	4b11      	ldr	r3, [pc, #68]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x416>
 8004430:	e054      	b.n	80044dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004432:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <HAL_RCC_OscConfig+0x478>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fe fb0c 	bl	8002a54 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004440:	f7fe fb08 	bl	8002a54 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e045      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x444>
 800445e:	e03d      	b.n	80044dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e038      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
 800446c:	40023800 	.word	0x40023800
 8004470:	40007000 	.word	0x40007000
 8004474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004478:	4b1b      	ldr	r3, [pc, #108]	@ (80044e8 <HAL_RCC_OscConfig+0x4ec>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d028      	beq.n	80044d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d121      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d11a      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d111      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	3b01      	subs	r3, #1
 80044c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800

080044ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0cc      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004500:	4b68      	ldr	r3, [pc, #416]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d90c      	bls.n	8004528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b65      	ldr	r3, [pc, #404]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b63      	ldr	r3, [pc, #396]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0b8      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004540:	4b59      	ldr	r3, [pc, #356]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a58      	ldr	r2, [pc, #352]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800454a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004558:	4b53      	ldr	r3, [pc, #332]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a52      	ldr	r2, [pc, #328]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004564:	4b50      	ldr	r3, [pc, #320]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	494d      	ldr	r1, [pc, #308]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d044      	beq.n	800460c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d107      	bne.n	800459a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	4b47      	ldr	r3, [pc, #284]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d119      	bne.n	80045ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e07f      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d003      	beq.n	80045aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045aa:	4b3f      	ldr	r3, [pc, #252]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e06f      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ba:	4b3b      	ldr	r3, [pc, #236]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e067      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ca:	4b37      	ldr	r3, [pc, #220]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f023 0203 	bic.w	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4934      	ldr	r1, [pc, #208]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045dc:	f7fe fa3a 	bl	8002a54 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e4:	f7fe fa36 	bl	8002a54 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e04f      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	4b2b      	ldr	r3, [pc, #172]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 020c 	and.w	r2, r3, #12
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	429a      	cmp	r2, r3
 800460a:	d1eb      	bne.n	80045e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800460c:	4b25      	ldr	r3, [pc, #148]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d20c      	bcs.n	8004634 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b22      	ldr	r3, [pc, #136]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b20      	ldr	r3, [pc, #128]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e032      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004640:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4916      	ldr	r1, [pc, #88]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465e:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	490e      	ldr	r1, [pc, #56]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004672:	f000 f821 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8004676:	4602      	mov	r2, r0
 8004678:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	490a      	ldr	r1, [pc, #40]	@ (80046ac <HAL_RCC_ClockConfig+0x1c0>)
 8004684:	5ccb      	ldrb	r3, [r1, r3]
 8004686:	fa22 f303 	lsr.w	r3, r2, r3
 800468a:	4a09      	ldr	r2, [pc, #36]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 800468c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800468e:	4b09      	ldr	r3, [pc, #36]	@ (80046b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe f8c0 	bl	8002818 <HAL_InitTick>

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023c00 	.word	0x40023c00
 80046a8:	40023800 	.word	0x40023800
 80046ac:	080064c8 	.word	0x080064c8
 80046b0:	20000090 	.word	0x20000090
 80046b4:	20000094 	.word	0x20000094

080046b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046bc:	b090      	sub	sp, #64	@ 0x40
 80046be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d0:	4b59      	ldr	r3, [pc, #356]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x180>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d00d      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x40>
 80046dc:	2b08      	cmp	r3, #8
 80046de:	f200 80a1 	bhi.w	8004824 <HAL_RCC_GetSysClockFreq+0x16c>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x34>
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d003      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ea:	e09b      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ec:	4b53      	ldr	r3, [pc, #332]	@ (800483c <HAL_RCC_GetSysClockFreq+0x184>)
 80046ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046f0:	e09b      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f2:	4b53      	ldr	r3, [pc, #332]	@ (8004840 <HAL_RCC_GetSysClockFreq+0x188>)
 80046f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046f6:	e098      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x180>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004702:	4b4d      	ldr	r3, [pc, #308]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x180>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d028      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470e:	4b4a      	ldr	r3, [pc, #296]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x180>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	2200      	movs	r2, #0
 8004716:	623b      	str	r3, [r7, #32]
 8004718:	627a      	str	r2, [r7, #36]	@ 0x24
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004720:	2100      	movs	r1, #0
 8004722:	4b47      	ldr	r3, [pc, #284]	@ (8004840 <HAL_RCC_GetSysClockFreq+0x188>)
 8004724:	fb03 f201 	mul.w	r2, r3, r1
 8004728:	2300      	movs	r3, #0
 800472a:	fb00 f303 	mul.w	r3, r0, r3
 800472e:	4413      	add	r3, r2
 8004730:	4a43      	ldr	r2, [pc, #268]	@ (8004840 <HAL_RCC_GetSysClockFreq+0x188>)
 8004732:	fba0 1202 	umull	r1, r2, r0, r2
 8004736:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004738:	460a      	mov	r2, r1
 800473a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800473c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800473e:	4413      	add	r3, r2
 8004740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004744:	2200      	movs	r2, #0
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	61fa      	str	r2, [r7, #28]
 800474a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800474e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004752:	f7fc fa25 	bl	8000ba0 <__aeabi_uldivmod>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4613      	mov	r3, r2
 800475c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800475e:	e053      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004760:	4b35      	ldr	r3, [pc, #212]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x180>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	099b      	lsrs	r3, r3, #6
 8004766:	2200      	movs	r2, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	617a      	str	r2, [r7, #20]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004772:	f04f 0b00 	mov.w	fp, #0
 8004776:	4652      	mov	r2, sl
 8004778:	465b      	mov	r3, fp
 800477a:	f04f 0000 	mov.w	r0, #0
 800477e:	f04f 0100 	mov.w	r1, #0
 8004782:	0159      	lsls	r1, r3, #5
 8004784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004788:	0150      	lsls	r0, r2, #5
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	ebb2 080a 	subs.w	r8, r2, sl
 8004792:	eb63 090b 	sbc.w	r9, r3, fp
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047aa:	ebb2 0408 	subs.w	r4, r2, r8
 80047ae:	eb63 0509 	sbc.w	r5, r3, r9
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	00eb      	lsls	r3, r5, #3
 80047bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047c0:	00e2      	lsls	r2, r4, #3
 80047c2:	4614      	mov	r4, r2
 80047c4:	461d      	mov	r5, r3
 80047c6:	eb14 030a 	adds.w	r3, r4, sl
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	eb45 030b 	adc.w	r3, r5, fp
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047de:	4629      	mov	r1, r5
 80047e0:	028b      	lsls	r3, r1, #10
 80047e2:	4621      	mov	r1, r4
 80047e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e8:	4621      	mov	r1, r4
 80047ea:	028a      	lsls	r2, r1, #10
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f2:	2200      	movs	r2, #0
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	60fa      	str	r2, [r7, #12]
 80047f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047fc:	f7fc f9d0 	bl	8000ba0 <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4613      	mov	r3, r2
 8004806:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x180>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	3301      	adds	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004818:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004822:	e002      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4b05      	ldr	r3, [pc, #20]	@ (800483c <HAL_RCC_GetSysClockFreq+0x184>)
 8004826:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800482c:	4618      	mov	r0, r3
 800482e:	3740      	adds	r7, #64	@ 0x40
 8004830:	46bd      	mov	sp, r7
 8004832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	00f42400 	.word	0x00f42400
 8004840:	017d7840 	.word	0x017d7840

08004844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004848:	4b03      	ldr	r3, [pc, #12]	@ (8004858 <HAL_RCC_GetHCLKFreq+0x14>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000090 	.word	0x20000090

0800485c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004860:	f7ff fff0 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b05      	ldr	r3, [pc, #20]	@ (800487c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	0a9b      	lsrs	r3, r3, #10
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4903      	ldr	r1, [pc, #12]	@ (8004880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004872:	5ccb      	ldrb	r3, [r1, r3]
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40023800 	.word	0x40023800
 8004880:	080064d8 	.word	0x080064d8

08004884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004888:	f7ff ffdc 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	0b5b      	lsrs	r3, r3, #13
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4903      	ldr	r1, [pc, #12]	@ (80048a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40023800 	.word	0x40023800
 80048a8:	080064d8 	.word	0x080064d8

080048ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	220f      	movs	r2, #15
 80048ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048bc:	4b12      	ldr	r3, [pc, #72]	@ (8004908 <HAL_RCC_GetClockConfig+0x5c>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 0203 	and.w	r2, r3, #3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004908 <HAL_RCC_GetClockConfig+0x5c>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <HAL_RCC_GetClockConfig+0x5c>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048e0:	4b09      	ldr	r3, [pc, #36]	@ (8004908 <HAL_RCC_GetClockConfig+0x5c>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	08db      	lsrs	r3, r3, #3
 80048e6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048ee:	4b07      	ldr	r3, [pc, #28]	@ (800490c <HAL_RCC_GetClockConfig+0x60>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0207 	and.w	r2, r3, #7
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	601a      	str	r2, [r3, #0]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800
 800490c:	40023c00 	.word	0x40023c00

08004910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e07b      	b.n	8004a1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	2b00      	cmp	r3, #0
 8004928:	d108      	bne.n	800493c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004932:	d009      	beq.n	8004948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	61da      	str	r2, [r3, #28]
 800493a:	e005      	b.n	8004948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fd fd8c 	bl	8002480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800497e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049cc:	ea42 0103 	orr.w	r1, r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	f003 0104 	and.w	r1, r3, #4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	f003 0210 	and.w	r2, r3, #16
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e041      	b.n	8004ab8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fd fd61 	bl	8002510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f000 fb8b 	bl	800517c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d001      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e044      	b.n	8004b62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b70 <HAL_TIM_Base_Start_IT+0xb0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d018      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x6c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b02:	d013      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x6c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1a      	ldr	r2, [pc, #104]	@ (8004b74 <HAL_TIM_Base_Start_IT+0xb4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00e      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x6c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a19      	ldr	r2, [pc, #100]	@ (8004b78 <HAL_TIM_Base_Start_IT+0xb8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d009      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x6c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a17      	ldr	r2, [pc, #92]	@ (8004b7c <HAL_TIM_Base_Start_IT+0xbc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x6c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a16      	ldr	r2, [pc, #88]	@ (8004b80 <HAL_TIM_Base_Start_IT+0xc0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d111      	bne.n	8004b50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b06      	cmp	r3, #6
 8004b3c:	d010      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	e007      	b.n	8004b60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40014000 	.word	0x40014000

08004b84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e041      	b.n	8004c1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f839 	bl	8004c22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f000 fada 	bl	800517c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01b      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f06f 0202 	mvn.w	r2, #2
 8004c6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa5c 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004c86:	e005      	b.n	8004c94 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fa4e 	bl	800512a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa5f 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d020      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01b      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f06f 0204 	mvn.w	r2, #4
 8004cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fa36 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004cd2:	e005      	b.n	8004ce0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fa28 	bl	800512a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa39 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d020      	beq.n	8004d32 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01b      	beq.n	8004d32 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f06f 0208 	mvn.w	r2, #8
 8004d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2204      	movs	r2, #4
 8004d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fa10 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004d1e:	e005      	b.n	8004d2c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fa02 	bl	800512a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fa13 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d020      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01b      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f06f 0210 	mvn.w	r2, #16
 8004d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2208      	movs	r2, #8
 8004d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f9ea 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004d6a:	e005      	b.n	8004d78 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f9dc 	bl	800512a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f9ed 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d007      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0201 	mvn.w	r2, #1
 8004d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7fd fa81 	bl	80022a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00c      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fd05 	bl	80057d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00c      	beq.n	8004dea <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f9be 	bl	8005166 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00c      	beq.n	8004e0e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f06f 0220 	mvn.w	r2, #32
 8004e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fcd7 	bl	80057bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e0ae      	b.n	8004f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	f200 809f 	bhi.w	8004f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e46:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e81 	.word	0x08004e81
 8004e50:	08004f85 	.word	0x08004f85
 8004e54:	08004f85 	.word	0x08004f85
 8004e58:	08004f85 	.word	0x08004f85
 8004e5c:	08004ec1 	.word	0x08004ec1
 8004e60:	08004f85 	.word	0x08004f85
 8004e64:	08004f85 	.word	0x08004f85
 8004e68:	08004f85 	.word	0x08004f85
 8004e6c:	08004f03 	.word	0x08004f03
 8004e70:	08004f85 	.word	0x08004f85
 8004e74:	08004f85 	.word	0x08004f85
 8004e78:	08004f85 	.word	0x08004f85
 8004e7c:	08004f43 	.word	0x08004f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fa04 	bl	8005294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0208 	orr.w	r2, r2, #8
 8004e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6999      	ldr	r1, [r3, #24]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	619a      	str	r2, [r3, #24]
      break;
 8004ebe:	e064      	b.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fa4a 	bl	8005360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6999      	ldr	r1, [r3, #24]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	619a      	str	r2, [r3, #24]
      break;
 8004f00:	e043      	b.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fa95 	bl	8005438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0208 	orr.w	r2, r2, #8
 8004f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0204 	bic.w	r2, r2, #4
 8004f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69d9      	ldr	r1, [r3, #28]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	61da      	str	r2, [r3, #28]
      break;
 8004f40:	e023      	b.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fadf 	bl	800550c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69d9      	ldr	r1, [r3, #28]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	021a      	lsls	r2, r3, #8
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	61da      	str	r2, [r3, #28]
      break;
 8004f82:	e002      	b.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
      break;
 8004f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e0b4      	b.n	8005122 <HAL_TIM_ConfigClockSource+0x186>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ff0:	d03e      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0xd4>
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ff6:	f200 8087 	bhi.w	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ffe:	f000 8086 	beq.w	800510e <HAL_TIM_ConfigClockSource+0x172>
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005006:	d87f      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b70      	cmp	r3, #112	@ 0x70
 800500a:	d01a      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0xa6>
 800500c:	2b70      	cmp	r3, #112	@ 0x70
 800500e:	d87b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b60      	cmp	r3, #96	@ 0x60
 8005012:	d050      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005014:	2b60      	cmp	r3, #96	@ 0x60
 8005016:	d877      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b50      	cmp	r3, #80	@ 0x50
 800501a:	d03c      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xfa>
 800501c:	2b50      	cmp	r3, #80	@ 0x50
 800501e:	d873      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b40      	cmp	r3, #64	@ 0x40
 8005022:	d058      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005024:	2b40      	cmp	r3, #64	@ 0x40
 8005026:	d86f      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b30      	cmp	r3, #48	@ 0x30
 800502a:	d064      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 800502c:	2b30      	cmp	r3, #48	@ 0x30
 800502e:	d86b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b20      	cmp	r3, #32
 8005032:	d060      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005034:	2b20      	cmp	r3, #32
 8005036:	d867      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d05c      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 800503c:	2b10      	cmp	r3, #16
 800503e:	d05a      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005040:	e062      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005052:	f000 fb25 	bl	80056a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	609a      	str	r2, [r3, #8]
      break;
 800506e:	e04f      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005080:	f000 fb0e 	bl	80056a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005092:	609a      	str	r2, [r3, #8]
      break;
 8005094:	e03c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a2:	461a      	mov	r2, r3
 80050a4:	f000 fa82 	bl	80055ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2150      	movs	r1, #80	@ 0x50
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fadb 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 80050b4:	e02c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 faa1 	bl	800560a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2160      	movs	r1, #96	@ 0x60
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 facb 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 80050d4:	e01c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 fa62 	bl	80055ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2140      	movs	r1, #64	@ 0x40
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fabb 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 80050f4:	e00c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4619      	mov	r1, r3
 8005100:	4610      	mov	r0, r2
 8005102:	f000 fab2 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 8005106:	e003      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	e000      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800510e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a3a      	ldr	r2, [pc, #232]	@ (8005278 <TIM_Base_SetConfig+0xfc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00f      	beq.n	80051b4 <TIM_Base_SetConfig+0x38>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800519a:	d00b      	beq.n	80051b4 <TIM_Base_SetConfig+0x38>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a37      	ldr	r2, [pc, #220]	@ (800527c <TIM_Base_SetConfig+0x100>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_Base_SetConfig+0x38>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a36      	ldr	r2, [pc, #216]	@ (8005280 <TIM_Base_SetConfig+0x104>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_Base_SetConfig+0x38>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a35      	ldr	r2, [pc, #212]	@ (8005284 <TIM_Base_SetConfig+0x108>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d108      	bne.n	80051c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005278 <TIM_Base_SetConfig+0xfc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d01b      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d4:	d017      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a28      	ldr	r2, [pc, #160]	@ (800527c <TIM_Base_SetConfig+0x100>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a27      	ldr	r2, [pc, #156]	@ (8005280 <TIM_Base_SetConfig+0x104>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00f      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a26      	ldr	r2, [pc, #152]	@ (8005284 <TIM_Base_SetConfig+0x108>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00b      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a25      	ldr	r2, [pc, #148]	@ (8005288 <TIM_Base_SetConfig+0x10c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a24      	ldr	r2, [pc, #144]	@ (800528c <TIM_Base_SetConfig+0x110>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a23      	ldr	r2, [pc, #140]	@ (8005290 <TIM_Base_SetConfig+0x114>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d108      	bne.n	8005218 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800520c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a0e      	ldr	r2, [pc, #56]	@ (8005278 <TIM_Base_SetConfig+0xfc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d103      	bne.n	800524c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b01      	cmp	r3, #1
 800525c:	d105      	bne.n	800526a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f023 0201 	bic.w	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	611a      	str	r2, [r3, #16]
  }
}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40010000 	.word	0x40010000
 800527c:	40000400 	.word	0x40000400
 8005280:	40000800 	.word	0x40000800
 8005284:	40000c00 	.word	0x40000c00
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800

08005294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f023 0201 	bic.w	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0303 	bic.w	r3, r3, #3
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f023 0302 	bic.w	r3, r3, #2
 80052dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a1c      	ldr	r2, [pc, #112]	@ (800535c <TIM_OC1_SetConfig+0xc8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d10c      	bne.n	800530a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 0308 	bic.w	r3, r3, #8
 80052f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f023 0304 	bic.w	r3, r3, #4
 8005308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a13      	ldr	r2, [pc, #76]	@ (800535c <TIM_OC1_SetConfig+0xc8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d111      	bne.n	8005336 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	621a      	str	r2, [r3, #32]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40010000 	.word	0x40010000

08005360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f023 0210 	bic.w	r2, r3, #16
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800538e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0320 	bic.w	r3, r3, #32
 80053aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005434 <TIM_OC2_SetConfig+0xd4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10d      	bne.n	80053dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a15      	ldr	r2, [pc, #84]	@ (8005434 <TIM_OC2_SetConfig+0xd4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d113      	bne.n	800540c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000

08005438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0303 	bic.w	r3, r3, #3
 800546e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1d      	ldr	r2, [pc, #116]	@ (8005508 <TIM_OC3_SetConfig+0xd0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d10d      	bne.n	80054b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800549c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a14      	ldr	r2, [pc, #80]	@ (8005508 <TIM_OC3_SetConfig+0xd0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d113      	bne.n	80054e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40010000 	.word	0x40010000

0800550c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	031b      	lsls	r3, r3, #12
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a10      	ldr	r2, [pc, #64]	@ (80055a8 <TIM_OC4_SetConfig+0x9c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d109      	bne.n	8005580 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	019b      	lsls	r3, r3, #6
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40010000 	.word	0x40010000

080055ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f023 030a 	bic.w	r3, r3, #10
 80055e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800560a:	b480      	push	{r7}
 800560c:	b087      	sub	sp, #28
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f023 0210 	bic.w	r2, r3, #16
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	031b      	lsls	r3, r3, #12
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005646:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	f043 0307 	orr.w	r3, r3, #7
 800568c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	021a      	lsls	r2, r3, #8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e050      	b.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1c      	ldr	r2, [pc, #112]	@ (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d018      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005744:	d013      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a18      	ldr	r2, [pc, #96]	@ (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00e      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a16      	ldr	r2, [pc, #88]	@ (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a15      	ldr	r2, [pc, #84]	@ (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a13      	ldr	r2, [pc, #76]	@ (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d10c      	bne.n	8005788 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	4313      	orrs	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800
 80057b4:	40000c00 	.word	0x40000c00
 80057b8:	40014000 	.word	0x40014000

080057bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e042      	b.n	800587c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fc ff86 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	@ 0x24
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f82b 	bl	8005884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800583c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695a      	ldr	r2, [r3, #20]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800584c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800585c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005888:	b0c0      	sub	sp, #256	@ 0x100
 800588a:	af00      	add	r7, sp, #0
 800588c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a0:	68d9      	ldr	r1, [r3, #12]
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	ea40 0301 	orr.w	r3, r0, r1
 80058ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058dc:	f021 010c 	bic.w	r1, r1, #12
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058ea:	430b      	orrs	r3, r1
 80058ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fe:	6999      	ldr	r1, [r3, #24]
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	ea40 0301 	orr.w	r3, r0, r1
 800590a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b8f      	ldr	r3, [pc, #572]	@ (8005b50 <UART_SetConfig+0x2cc>)
 8005914:	429a      	cmp	r2, r3
 8005916:	d005      	beq.n	8005924 <UART_SetConfig+0xa0>
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b54 <UART_SetConfig+0x2d0>)
 8005920:	429a      	cmp	r2, r3
 8005922:	d104      	bne.n	800592e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005924:	f7fe ffae 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
 8005928:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800592c:	e003      	b.n	8005936 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800592e:	f7fe ff95 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8005932:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005940:	f040 810c 	bne.w	8005b5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005948:	2200      	movs	r2, #0
 800594a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800594e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005952:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005956:	4622      	mov	r2, r4
 8005958:	462b      	mov	r3, r5
 800595a:	1891      	adds	r1, r2, r2
 800595c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800595e:	415b      	adcs	r3, r3
 8005960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005962:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005966:	4621      	mov	r1, r4
 8005968:	eb12 0801 	adds.w	r8, r2, r1
 800596c:	4629      	mov	r1, r5
 800596e:	eb43 0901 	adc.w	r9, r3, r1
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800597e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005986:	4690      	mov	r8, r2
 8005988:	4699      	mov	r9, r3
 800598a:	4623      	mov	r3, r4
 800598c:	eb18 0303 	adds.w	r3, r8, r3
 8005990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005994:	462b      	mov	r3, r5
 8005996:	eb49 0303 	adc.w	r3, r9, r3
 800599a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059b2:	460b      	mov	r3, r1
 80059b4:	18db      	adds	r3, r3, r3
 80059b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059b8:	4613      	mov	r3, r2
 80059ba:	eb42 0303 	adc.w	r3, r2, r3
 80059be:	657b      	str	r3, [r7, #84]	@ 0x54
 80059c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059c8:	f7fb f8ea 	bl	8000ba0 <__aeabi_uldivmod>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4b61      	ldr	r3, [pc, #388]	@ (8005b58 <UART_SetConfig+0x2d4>)
 80059d2:	fba3 2302 	umull	r2, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	011c      	lsls	r4, r3, #4
 80059da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059ec:	4642      	mov	r2, r8
 80059ee:	464b      	mov	r3, r9
 80059f0:	1891      	adds	r1, r2, r2
 80059f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059f4:	415b      	adcs	r3, r3
 80059f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059fc:	4641      	mov	r1, r8
 80059fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005a02:	4649      	mov	r1, r9
 8005a04:	eb43 0b01 	adc.w	fp, r3, r1
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a1c:	4692      	mov	sl, r2
 8005a1e:	469b      	mov	fp, r3
 8005a20:	4643      	mov	r3, r8
 8005a22:	eb1a 0303 	adds.w	r3, sl, r3
 8005a26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	18db      	adds	r3, r3, r3
 8005a4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a4e:	4613      	mov	r3, r2
 8005a50:	eb42 0303 	adc.w	r3, r2, r3
 8005a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a5e:	f7fb f89f 	bl	8000ba0 <__aeabi_uldivmod>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	4b3b      	ldr	r3, [pc, #236]	@ (8005b58 <UART_SetConfig+0x2d4>)
 8005a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2264      	movs	r2, #100	@ 0x64
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	1acb      	subs	r3, r1, r3
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a7e:	4b36      	ldr	r3, [pc, #216]	@ (8005b58 <UART_SetConfig+0x2d4>)
 8005a80:	fba3 2302 	umull	r2, r3, r3, r2
 8005a84:	095b      	lsrs	r3, r3, #5
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a8c:	441c      	add	r4, r3
 8005a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	1891      	adds	r1, r2, r2
 8005aa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005aa8:	415b      	adcs	r3, r3
 8005aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ab0:	4641      	mov	r1, r8
 8005ab2:	1851      	adds	r1, r2, r1
 8005ab4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	414b      	adcs	r3, r1
 8005aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ac8:	4659      	mov	r1, fp
 8005aca:	00cb      	lsls	r3, r1, #3
 8005acc:	4651      	mov	r1, sl
 8005ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad2:	4651      	mov	r1, sl
 8005ad4:	00ca      	lsls	r2, r1, #3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4603      	mov	r3, r0
 8005adc:	4642      	mov	r2, r8
 8005ade:	189b      	adds	r3, r3, r2
 8005ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	460a      	mov	r2, r1
 8005ae8:	eb42 0303 	adc.w	r3, r2, r3
 8005aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005afc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b04:	460b      	mov	r3, r1
 8005b06:	18db      	adds	r3, r3, r3
 8005b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	eb42 0303 	adc.w	r3, r2, r3
 8005b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b1a:	f7fb f841 	bl	8000ba0 <__aeabi_uldivmod>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4b0d      	ldr	r3, [pc, #52]	@ (8005b58 <UART_SetConfig+0x2d4>)
 8005b24:	fba3 1302 	umull	r1, r3, r3, r2
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	2164      	movs	r1, #100	@ 0x64
 8005b2c:	fb01 f303 	mul.w	r3, r1, r3
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	3332      	adds	r3, #50	@ 0x32
 8005b36:	4a08      	ldr	r2, [pc, #32]	@ (8005b58 <UART_SetConfig+0x2d4>)
 8005b38:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	f003 0207 	and.w	r2, r3, #7
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4422      	add	r2, r4
 8005b4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b4c:	e106      	b.n	8005d5c <UART_SetConfig+0x4d8>
 8005b4e:	bf00      	nop
 8005b50:	40011000 	.word	0x40011000
 8005b54:	40011400 	.word	0x40011400
 8005b58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b60:	2200      	movs	r2, #0
 8005b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b6e:	4642      	mov	r2, r8
 8005b70:	464b      	mov	r3, r9
 8005b72:	1891      	adds	r1, r2, r2
 8005b74:	6239      	str	r1, [r7, #32]
 8005b76:	415b      	adcs	r3, r3
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b7e:	4641      	mov	r1, r8
 8005b80:	1854      	adds	r4, r2, r1
 8005b82:	4649      	mov	r1, r9
 8005b84:	eb43 0501 	adc.w	r5, r3, r1
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	00eb      	lsls	r3, r5, #3
 8005b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b96:	00e2      	lsls	r2, r4, #3
 8005b98:	4614      	mov	r4, r2
 8005b9a:	461d      	mov	r5, r3
 8005b9c:	4643      	mov	r3, r8
 8005b9e:	18e3      	adds	r3, r4, r3
 8005ba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	eb45 0303 	adc.w	r3, r5, r3
 8005baa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bca:	4629      	mov	r1, r5
 8005bcc:	008b      	lsls	r3, r1, #2
 8005bce:	4621      	mov	r1, r4
 8005bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	008a      	lsls	r2, r1, #2
 8005bd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bdc:	f7fa ffe0 	bl	8000ba0 <__aeabi_uldivmod>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4b60      	ldr	r3, [pc, #384]	@ (8005d68 <UART_SetConfig+0x4e4>)
 8005be6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	011c      	lsls	r4, r3, #4
 8005bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bf8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c00:	4642      	mov	r2, r8
 8005c02:	464b      	mov	r3, r9
 8005c04:	1891      	adds	r1, r2, r2
 8005c06:	61b9      	str	r1, [r7, #24]
 8005c08:	415b      	adcs	r3, r3
 8005c0a:	61fb      	str	r3, [r7, #28]
 8005c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c10:	4641      	mov	r1, r8
 8005c12:	1851      	adds	r1, r2, r1
 8005c14:	6139      	str	r1, [r7, #16]
 8005c16:	4649      	mov	r1, r9
 8005c18:	414b      	adcs	r3, r1
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c28:	4659      	mov	r1, fp
 8005c2a:	00cb      	lsls	r3, r1, #3
 8005c2c:	4651      	mov	r1, sl
 8005c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c32:	4651      	mov	r1, sl
 8005c34:	00ca      	lsls	r2, r1, #3
 8005c36:	4610      	mov	r0, r2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	189b      	adds	r3, r3, r2
 8005c40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c44:	464b      	mov	r3, r9
 8005c46:	460a      	mov	r2, r1
 8005c48:	eb42 0303 	adc.w	r3, r2, r3
 8005c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c68:	4649      	mov	r1, r9
 8005c6a:	008b      	lsls	r3, r1, #2
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c72:	4641      	mov	r1, r8
 8005c74:	008a      	lsls	r2, r1, #2
 8005c76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c7a:	f7fa ff91 	bl	8000ba0 <__aeabi_uldivmod>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4611      	mov	r1, r2
 8005c84:	4b38      	ldr	r3, [pc, #224]	@ (8005d68 <UART_SetConfig+0x4e4>)
 8005c86:	fba3 2301 	umull	r2, r3, r3, r1
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2264      	movs	r2, #100	@ 0x64
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	1acb      	subs	r3, r1, r3
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	3332      	adds	r3, #50	@ 0x32
 8005c98:	4a33      	ldr	r2, [pc, #204]	@ (8005d68 <UART_SetConfig+0x4e4>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ca4:	441c      	add	r4, r3
 8005ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005caa:	2200      	movs	r2, #0
 8005cac:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cae:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	1891      	adds	r1, r2, r2
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	415b      	adcs	r3, r3
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	1851      	adds	r1, r2, r1
 8005cc8:	6039      	str	r1, [r7, #0]
 8005cca:	4649      	mov	r1, r9
 8005ccc:	414b      	adcs	r3, r1
 8005cce:	607b      	str	r3, [r7, #4]
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cdc:	4659      	mov	r1, fp
 8005cde:	00cb      	lsls	r3, r1, #3
 8005ce0:	4651      	mov	r1, sl
 8005ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ce6:	4651      	mov	r1, sl
 8005ce8:	00ca      	lsls	r2, r1, #3
 8005cea:	4610      	mov	r0, r2
 8005cec:	4619      	mov	r1, r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	189b      	adds	r3, r3, r2
 8005cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	460a      	mov	r2, r1
 8005cfa:	eb42 0303 	adc.w	r3, r2, r3
 8005cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d18:	4649      	mov	r1, r9
 8005d1a:	008b      	lsls	r3, r1, #2
 8005d1c:	4641      	mov	r1, r8
 8005d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d22:	4641      	mov	r1, r8
 8005d24:	008a      	lsls	r2, r1, #2
 8005d26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d2a:	f7fa ff39 	bl	8000ba0 <__aeabi_uldivmod>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4b0d      	ldr	r3, [pc, #52]	@ (8005d68 <UART_SetConfig+0x4e4>)
 8005d34:	fba3 1302 	umull	r1, r3, r3, r2
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	2164      	movs	r1, #100	@ 0x64
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	3332      	adds	r3, #50	@ 0x32
 8005d46:	4a08      	ldr	r2, [pc, #32]	@ (8005d68 <UART_SetConfig+0x4e4>)
 8005d48:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	f003 020f 	and.w	r2, r3, #15
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4422      	add	r2, r4
 8005d5a:	609a      	str	r2, [r3, #8]
}
 8005d5c:	bf00      	nop
 8005d5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d62:	46bd      	mov	sp, r7
 8005d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d68:	51eb851f 	.word	0x51eb851f

08005d6c <memset>:
 8005d6c:	4402      	add	r2, r0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d100      	bne.n	8005d76 <memset+0xa>
 8005d74:	4770      	bx	lr
 8005d76:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7a:	e7f9      	b.n	8005d70 <memset+0x4>

08005d7c <__errno>:
 8005d7c:	4b01      	ldr	r3, [pc, #4]	@ (8005d84 <__errno+0x8>)
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	2000009c 	.word	0x2000009c

08005d88 <__libc_init_array>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005dc0 <__libc_init_array+0x38>)
 8005d8c:	4c0d      	ldr	r4, [pc, #52]	@ (8005dc4 <__libc_init_array+0x3c>)
 8005d8e:	1b64      	subs	r4, r4, r5
 8005d90:	10a4      	asrs	r4, r4, #2
 8005d92:	2600      	movs	r6, #0
 8005d94:	42a6      	cmp	r6, r4
 8005d96:	d109      	bne.n	8005dac <__libc_init_array+0x24>
 8005d98:	4d0b      	ldr	r5, [pc, #44]	@ (8005dc8 <__libc_init_array+0x40>)
 8005d9a:	4c0c      	ldr	r4, [pc, #48]	@ (8005dcc <__libc_init_array+0x44>)
 8005d9c:	f000 fb86 	bl	80064ac <_init>
 8005da0:	1b64      	subs	r4, r4, r5
 8005da2:	10a4      	asrs	r4, r4, #2
 8005da4:	2600      	movs	r6, #0
 8005da6:	42a6      	cmp	r6, r4
 8005da8:	d105      	bne.n	8005db6 <__libc_init_array+0x2e>
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db0:	4798      	blx	r3
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7ee      	b.n	8005d94 <__libc_init_array+0xc>
 8005db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dba:	4798      	blx	r3
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7f2      	b.n	8005da6 <__libc_init_array+0x1e>
 8005dc0:	08006568 	.word	0x08006568
 8005dc4:	08006568 	.word	0x08006568
 8005dc8:	08006568 	.word	0x08006568
 8005dcc:	0800656c 	.word	0x0800656c

08005dd0 <atan2>:
 8005dd0:	f000 baa6 	b.w	8006320 <__ieee754_atan2>

08005dd4 <sqrt>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	ed2d 8b02 	vpush	{d8}
 8005dda:	ec55 4b10 	vmov	r4, r5, d0
 8005dde:	f000 f9c7 	bl	8006170 <__ieee754_sqrt>
 8005de2:	4622      	mov	r2, r4
 8005de4:	462b      	mov	r3, r5
 8005de6:	4620      	mov	r0, r4
 8005de8:	4629      	mov	r1, r5
 8005dea:	eeb0 8a40 	vmov.f32	s16, s0
 8005dee:	eef0 8a60 	vmov.f32	s17, s1
 8005df2:	f7fa fe47 	bl	8000a84 <__aeabi_dcmpun>
 8005df6:	b990      	cbnz	r0, 8005e1e <sqrt+0x4a>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f7fa fe18 	bl	8000a34 <__aeabi_dcmplt>
 8005e04:	b158      	cbz	r0, 8005e1e <sqrt+0x4a>
 8005e06:	f7ff ffb9 	bl	8005d7c <__errno>
 8005e0a:	2321      	movs	r3, #33	@ 0x21
 8005e0c:	6003      	str	r3, [r0, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2300      	movs	r3, #0
 8005e12:	4610      	mov	r0, r2
 8005e14:	4619      	mov	r1, r3
 8005e16:	f7fa fcc5 	bl	80007a4 <__aeabi_ddiv>
 8005e1a:	ec41 0b18 	vmov	d8, r0, r1
 8005e1e:	eeb0 0a48 	vmov.f32	s0, s16
 8005e22:	eef0 0a68 	vmov.f32	s1, s17
 8005e26:	ecbd 8b02 	vpop	{d8}
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	0000      	movs	r0, r0
	...

08005e30 <atan>:
 8005e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	ec55 4b10 	vmov	r4, r5, d0
 8005e38:	4bbf      	ldr	r3, [pc, #764]	@ (8006138 <atan+0x308>)
 8005e3a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8005e3e:	429e      	cmp	r6, r3
 8005e40:	46ab      	mov	fp, r5
 8005e42:	d918      	bls.n	8005e76 <atan+0x46>
 8005e44:	4bbd      	ldr	r3, [pc, #756]	@ (800613c <atan+0x30c>)
 8005e46:	429e      	cmp	r6, r3
 8005e48:	d801      	bhi.n	8005e4e <atan+0x1e>
 8005e4a:	d109      	bne.n	8005e60 <atan+0x30>
 8005e4c:	b144      	cbz	r4, 8005e60 <atan+0x30>
 8005e4e:	4622      	mov	r2, r4
 8005e50:	462b      	mov	r3, r5
 8005e52:	4620      	mov	r0, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7fa f9c5 	bl	80001e4 <__adddf3>
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	460d      	mov	r5, r1
 8005e5e:	e006      	b.n	8005e6e <atan+0x3e>
 8005e60:	f1bb 0f00 	cmp.w	fp, #0
 8005e64:	f340 812b 	ble.w	80060be <atan+0x28e>
 8005e68:	a597      	add	r5, pc, #604	@ (adr r5, 80060c8 <atan+0x298>)
 8005e6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e6e:	ec45 4b10 	vmov	d0, r4, r5
 8005e72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e76:	4bb2      	ldr	r3, [pc, #712]	@ (8006140 <atan+0x310>)
 8005e78:	429e      	cmp	r6, r3
 8005e7a:	d813      	bhi.n	8005ea4 <atan+0x74>
 8005e7c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005e80:	429e      	cmp	r6, r3
 8005e82:	d80c      	bhi.n	8005e9e <atan+0x6e>
 8005e84:	a392      	add	r3, pc, #584	@ (adr r3, 80060d0 <atan+0x2a0>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7fa f9a9 	bl	80001e4 <__adddf3>
 8005e92:	4bac      	ldr	r3, [pc, #688]	@ (8006144 <atan+0x314>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	f7fa fdeb 	bl	8000a70 <__aeabi_dcmpgt>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d1e7      	bne.n	8005e6e <atan+0x3e>
 8005e9e:	f04f 3aff 	mov.w	sl, #4294967295
 8005ea2:	e029      	b.n	8005ef8 <atan+0xc8>
 8005ea4:	f000 f95c 	bl	8006160 <fabs>
 8005ea8:	4ba7      	ldr	r3, [pc, #668]	@ (8006148 <atan+0x318>)
 8005eaa:	429e      	cmp	r6, r3
 8005eac:	ec55 4b10 	vmov	r4, r5, d0
 8005eb0:	f200 80bc 	bhi.w	800602c <atan+0x1fc>
 8005eb4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005eb8:	429e      	cmp	r6, r3
 8005eba:	f200 809e 	bhi.w	8005ffa <atan+0x1ca>
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	f7fa f98d 	bl	80001e4 <__adddf3>
 8005eca:	4b9e      	ldr	r3, [pc, #632]	@ (8006144 <atan+0x314>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f7fa f987 	bl	80001e0 <__aeabi_dsub>
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	460f      	mov	r7, r1
 8005ed8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005edc:	4620      	mov	r0, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f7fa f980 	bl	80001e4 <__adddf3>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4630      	mov	r0, r6
 8005eea:	4639      	mov	r1, r7
 8005eec:	f7fa fc5a 	bl	80007a4 <__aeabi_ddiv>
 8005ef0:	f04f 0a00 	mov.w	sl, #0
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	460d      	mov	r5, r1
 8005ef8:	4622      	mov	r2, r4
 8005efa:	462b      	mov	r3, r5
 8005efc:	4620      	mov	r0, r4
 8005efe:	4629      	mov	r1, r5
 8005f00:	f7fa fb26 	bl	8000550 <__aeabi_dmul>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4680      	mov	r8, r0
 8005f0a:	4689      	mov	r9, r1
 8005f0c:	f7fa fb20 	bl	8000550 <__aeabi_dmul>
 8005f10:	a371      	add	r3, pc, #452	@ (adr r3, 80060d8 <atan+0x2a8>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	4606      	mov	r6, r0
 8005f18:	460f      	mov	r7, r1
 8005f1a:	f7fa fb19 	bl	8000550 <__aeabi_dmul>
 8005f1e:	a370      	add	r3, pc, #448	@ (adr r3, 80060e0 <atan+0x2b0>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa f95e 	bl	80001e4 <__adddf3>
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	f7fa fb10 	bl	8000550 <__aeabi_dmul>
 8005f30:	a36d      	add	r3, pc, #436	@ (adr r3, 80060e8 <atan+0x2b8>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa f955 	bl	80001e4 <__adddf3>
 8005f3a:	4632      	mov	r2, r6
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	f7fa fb07 	bl	8000550 <__aeabi_dmul>
 8005f42:	a36b      	add	r3, pc, #428	@ (adr r3, 80060f0 <atan+0x2c0>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa f94c 	bl	80001e4 <__adddf3>
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	463b      	mov	r3, r7
 8005f50:	f7fa fafe 	bl	8000550 <__aeabi_dmul>
 8005f54:	a368      	add	r3, pc, #416	@ (adr r3, 80060f8 <atan+0x2c8>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f7fa f943 	bl	80001e4 <__adddf3>
 8005f5e:	4632      	mov	r2, r6
 8005f60:	463b      	mov	r3, r7
 8005f62:	f7fa faf5 	bl	8000550 <__aeabi_dmul>
 8005f66:	a366      	add	r3, pc, #408	@ (adr r3, 8006100 <atan+0x2d0>)
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f7fa f93a 	bl	80001e4 <__adddf3>
 8005f70:	4642      	mov	r2, r8
 8005f72:	464b      	mov	r3, r9
 8005f74:	f7fa faec 	bl	8000550 <__aeabi_dmul>
 8005f78:	a363      	add	r3, pc, #396	@ (adr r3, 8006108 <atan+0x2d8>)
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	4680      	mov	r8, r0
 8005f80:	4689      	mov	r9, r1
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa fae3 	bl	8000550 <__aeabi_dmul>
 8005f8a:	a361      	add	r3, pc, #388	@ (adr r3, 8006110 <atan+0x2e0>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f7fa f926 	bl	80001e0 <__aeabi_dsub>
 8005f94:	4632      	mov	r2, r6
 8005f96:	463b      	mov	r3, r7
 8005f98:	f7fa fada 	bl	8000550 <__aeabi_dmul>
 8005f9c:	a35e      	add	r3, pc, #376	@ (adr r3, 8006118 <atan+0x2e8>)
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f7fa f91d 	bl	80001e0 <__aeabi_dsub>
 8005fa6:	4632      	mov	r2, r6
 8005fa8:	463b      	mov	r3, r7
 8005faa:	f7fa fad1 	bl	8000550 <__aeabi_dmul>
 8005fae:	a35c      	add	r3, pc, #368	@ (adr r3, 8006120 <atan+0x2f0>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa f914 	bl	80001e0 <__aeabi_dsub>
 8005fb8:	4632      	mov	r2, r6
 8005fba:	463b      	mov	r3, r7
 8005fbc:	f7fa fac8 	bl	8000550 <__aeabi_dmul>
 8005fc0:	a359      	add	r3, pc, #356	@ (adr r3, 8006128 <atan+0x2f8>)
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f7fa f90b 	bl	80001e0 <__aeabi_dsub>
 8005fca:	4632      	mov	r2, r6
 8005fcc:	463b      	mov	r3, r7
 8005fce:	f7fa fabf 	bl	8000550 <__aeabi_dmul>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	4649      	mov	r1, r9
 8005fda:	f7fa f903 	bl	80001e4 <__adddf3>
 8005fde:	4622      	mov	r2, r4
 8005fe0:	462b      	mov	r3, r5
 8005fe2:	f7fa fab5 	bl	8000550 <__aeabi_dmul>
 8005fe6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	d148      	bne.n	8006082 <atan+0x252>
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	f7fa f8f4 	bl	80001e0 <__aeabi_dsub>
 8005ff8:	e72f      	b.n	8005e5a <atan+0x2a>
 8005ffa:	4b52      	ldr	r3, [pc, #328]	@ (8006144 <atan+0x314>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f7fa f8ed 	bl	80001e0 <__aeabi_dsub>
 8006006:	4b4f      	ldr	r3, [pc, #316]	@ (8006144 <atan+0x314>)
 8006008:	4606      	mov	r6, r0
 800600a:	460f      	mov	r7, r1
 800600c:	2200      	movs	r2, #0
 800600e:	4620      	mov	r0, r4
 8006010:	4629      	mov	r1, r5
 8006012:	f7fa f8e7 	bl	80001e4 <__adddf3>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4630      	mov	r0, r6
 800601c:	4639      	mov	r1, r7
 800601e:	f7fa fbc1 	bl	80007a4 <__aeabi_ddiv>
 8006022:	f04f 0a01 	mov.w	sl, #1
 8006026:	4604      	mov	r4, r0
 8006028:	460d      	mov	r5, r1
 800602a:	e765      	b.n	8005ef8 <atan+0xc8>
 800602c:	4b47      	ldr	r3, [pc, #284]	@ (800614c <atan+0x31c>)
 800602e:	429e      	cmp	r6, r3
 8006030:	d21c      	bcs.n	800606c <atan+0x23c>
 8006032:	4b47      	ldr	r3, [pc, #284]	@ (8006150 <atan+0x320>)
 8006034:	2200      	movs	r2, #0
 8006036:	4620      	mov	r0, r4
 8006038:	4629      	mov	r1, r5
 800603a:	f7fa f8d1 	bl	80001e0 <__aeabi_dsub>
 800603e:	4b44      	ldr	r3, [pc, #272]	@ (8006150 <atan+0x320>)
 8006040:	4606      	mov	r6, r0
 8006042:	460f      	mov	r7, r1
 8006044:	2200      	movs	r2, #0
 8006046:	4620      	mov	r0, r4
 8006048:	4629      	mov	r1, r5
 800604a:	f7fa fa81 	bl	8000550 <__aeabi_dmul>
 800604e:	4b3d      	ldr	r3, [pc, #244]	@ (8006144 <atan+0x314>)
 8006050:	2200      	movs	r2, #0
 8006052:	f7fa f8c7 	bl	80001e4 <__adddf3>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4630      	mov	r0, r6
 800605c:	4639      	mov	r1, r7
 800605e:	f7fa fba1 	bl	80007a4 <__aeabi_ddiv>
 8006062:	f04f 0a02 	mov.w	sl, #2
 8006066:	4604      	mov	r4, r0
 8006068:	460d      	mov	r5, r1
 800606a:	e745      	b.n	8005ef8 <atan+0xc8>
 800606c:	4622      	mov	r2, r4
 800606e:	462b      	mov	r3, r5
 8006070:	4938      	ldr	r1, [pc, #224]	@ (8006154 <atan+0x324>)
 8006072:	2000      	movs	r0, #0
 8006074:	f7fa fb96 	bl	80007a4 <__aeabi_ddiv>
 8006078:	f04f 0a03 	mov.w	sl, #3
 800607c:	4604      	mov	r4, r0
 800607e:	460d      	mov	r5, r1
 8006080:	e73a      	b.n	8005ef8 <atan+0xc8>
 8006082:	4b35      	ldr	r3, [pc, #212]	@ (8006158 <atan+0x328>)
 8006084:	4e35      	ldr	r6, [pc, #212]	@ (800615c <atan+0x32c>)
 8006086:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f7fa f8a7 	bl	80001e0 <__aeabi_dsub>
 8006092:	4622      	mov	r2, r4
 8006094:	462b      	mov	r3, r5
 8006096:	f7fa f8a3 	bl	80001e0 <__aeabi_dsub>
 800609a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80060a6:	f7fa f89b 	bl	80001e0 <__aeabi_dsub>
 80060aa:	f1bb 0f00 	cmp.w	fp, #0
 80060ae:	4604      	mov	r4, r0
 80060b0:	460d      	mov	r5, r1
 80060b2:	f6bf aedc 	bge.w	8005e6e <atan+0x3e>
 80060b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80060ba:	461d      	mov	r5, r3
 80060bc:	e6d7      	b.n	8005e6e <atan+0x3e>
 80060be:	a51c      	add	r5, pc, #112	@ (adr r5, 8006130 <atan+0x300>)
 80060c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80060c4:	e6d3      	b.n	8005e6e <atan+0x3e>
 80060c6:	bf00      	nop
 80060c8:	54442d18 	.word	0x54442d18
 80060cc:	3ff921fb 	.word	0x3ff921fb
 80060d0:	8800759c 	.word	0x8800759c
 80060d4:	7e37e43c 	.word	0x7e37e43c
 80060d8:	e322da11 	.word	0xe322da11
 80060dc:	3f90ad3a 	.word	0x3f90ad3a
 80060e0:	24760deb 	.word	0x24760deb
 80060e4:	3fa97b4b 	.word	0x3fa97b4b
 80060e8:	a0d03d51 	.word	0xa0d03d51
 80060ec:	3fb10d66 	.word	0x3fb10d66
 80060f0:	c54c206e 	.word	0xc54c206e
 80060f4:	3fb745cd 	.word	0x3fb745cd
 80060f8:	920083ff 	.word	0x920083ff
 80060fc:	3fc24924 	.word	0x3fc24924
 8006100:	5555550d 	.word	0x5555550d
 8006104:	3fd55555 	.word	0x3fd55555
 8006108:	2c6a6c2f 	.word	0x2c6a6c2f
 800610c:	bfa2b444 	.word	0xbfa2b444
 8006110:	52defd9a 	.word	0x52defd9a
 8006114:	3fadde2d 	.word	0x3fadde2d
 8006118:	af749a6d 	.word	0xaf749a6d
 800611c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006120:	fe231671 	.word	0xfe231671
 8006124:	3fbc71c6 	.word	0x3fbc71c6
 8006128:	9998ebc4 	.word	0x9998ebc4
 800612c:	3fc99999 	.word	0x3fc99999
 8006130:	54442d18 	.word	0x54442d18
 8006134:	bff921fb 	.word	0xbff921fb
 8006138:	440fffff 	.word	0x440fffff
 800613c:	7ff00000 	.word	0x7ff00000
 8006140:	3fdbffff 	.word	0x3fdbffff
 8006144:	3ff00000 	.word	0x3ff00000
 8006148:	3ff2ffff 	.word	0x3ff2ffff
 800614c:	40038000 	.word	0x40038000
 8006150:	3ff80000 	.word	0x3ff80000
 8006154:	bff00000 	.word	0xbff00000
 8006158:	080064e0 	.word	0x080064e0
 800615c:	08006500 	.word	0x08006500

08006160 <fabs>:
 8006160:	ec51 0b10 	vmov	r0, r1, d0
 8006164:	4602      	mov	r2, r0
 8006166:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800616a:	ec43 2b10 	vmov	d0, r2, r3
 800616e:	4770      	bx	lr

08006170 <__ieee754_sqrt>:
 8006170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	4a66      	ldr	r2, [pc, #408]	@ (8006310 <__ieee754_sqrt+0x1a0>)
 8006176:	ec55 4b10 	vmov	r4, r5, d0
 800617a:	43aa      	bics	r2, r5
 800617c:	462b      	mov	r3, r5
 800617e:	4621      	mov	r1, r4
 8006180:	d110      	bne.n	80061a4 <__ieee754_sqrt+0x34>
 8006182:	4622      	mov	r2, r4
 8006184:	4620      	mov	r0, r4
 8006186:	4629      	mov	r1, r5
 8006188:	f7fa f9e2 	bl	8000550 <__aeabi_dmul>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4620      	mov	r0, r4
 8006192:	4629      	mov	r1, r5
 8006194:	f7fa f826 	bl	80001e4 <__adddf3>
 8006198:	4604      	mov	r4, r0
 800619a:	460d      	mov	r5, r1
 800619c:	ec45 4b10 	vmov	d0, r4, r5
 80061a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	2d00      	cmp	r5, #0
 80061a6:	dc0e      	bgt.n	80061c6 <__ieee754_sqrt+0x56>
 80061a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80061ac:	4322      	orrs	r2, r4
 80061ae:	d0f5      	beq.n	800619c <__ieee754_sqrt+0x2c>
 80061b0:	b19d      	cbz	r5, 80061da <__ieee754_sqrt+0x6a>
 80061b2:	4622      	mov	r2, r4
 80061b4:	4620      	mov	r0, r4
 80061b6:	4629      	mov	r1, r5
 80061b8:	f7fa f812 	bl	80001e0 <__aeabi_dsub>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	f7fa faf0 	bl	80007a4 <__aeabi_ddiv>
 80061c4:	e7e8      	b.n	8006198 <__ieee754_sqrt+0x28>
 80061c6:	152a      	asrs	r2, r5, #20
 80061c8:	d115      	bne.n	80061f6 <__ieee754_sqrt+0x86>
 80061ca:	2000      	movs	r0, #0
 80061cc:	e009      	b.n	80061e2 <__ieee754_sqrt+0x72>
 80061ce:	0acb      	lsrs	r3, r1, #11
 80061d0:	3a15      	subs	r2, #21
 80061d2:	0549      	lsls	r1, r1, #21
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0fa      	beq.n	80061ce <__ieee754_sqrt+0x5e>
 80061d8:	e7f7      	b.n	80061ca <__ieee754_sqrt+0x5a>
 80061da:	462a      	mov	r2, r5
 80061dc:	e7fa      	b.n	80061d4 <__ieee754_sqrt+0x64>
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	3001      	adds	r0, #1
 80061e2:	02dc      	lsls	r4, r3, #11
 80061e4:	d5fb      	bpl.n	80061de <__ieee754_sqrt+0x6e>
 80061e6:	1e44      	subs	r4, r0, #1
 80061e8:	1b12      	subs	r2, r2, r4
 80061ea:	f1c0 0420 	rsb	r4, r0, #32
 80061ee:	fa21 f404 	lsr.w	r4, r1, r4
 80061f2:	4323      	orrs	r3, r4
 80061f4:	4081      	lsls	r1, r0
 80061f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061fa:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80061fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006202:	07d2      	lsls	r2, r2, #31
 8006204:	bf5c      	itt	pl
 8006206:	005b      	lslpl	r3, r3, #1
 8006208:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800620c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006210:	bf58      	it	pl
 8006212:	0049      	lslpl	r1, r1, #1
 8006214:	2600      	movs	r6, #0
 8006216:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800621a:	107f      	asrs	r7, r7, #1
 800621c:	0049      	lsls	r1, r1, #1
 800621e:	2016      	movs	r0, #22
 8006220:	4632      	mov	r2, r6
 8006222:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006226:	1915      	adds	r5, r2, r4
 8006228:	429d      	cmp	r5, r3
 800622a:	bfde      	ittt	le
 800622c:	192a      	addle	r2, r5, r4
 800622e:	1b5b      	suble	r3, r3, r5
 8006230:	1936      	addle	r6, r6, r4
 8006232:	0fcd      	lsrs	r5, r1, #31
 8006234:	3801      	subs	r0, #1
 8006236:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800623a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800623e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006242:	d1f0      	bne.n	8006226 <__ieee754_sqrt+0xb6>
 8006244:	4605      	mov	r5, r0
 8006246:	2420      	movs	r4, #32
 8006248:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800624c:	4293      	cmp	r3, r2
 800624e:	eb0c 0e00 	add.w	lr, ip, r0
 8006252:	dc02      	bgt.n	800625a <__ieee754_sqrt+0xea>
 8006254:	d113      	bne.n	800627e <__ieee754_sqrt+0x10e>
 8006256:	458e      	cmp	lr, r1
 8006258:	d811      	bhi.n	800627e <__ieee754_sqrt+0x10e>
 800625a:	f1be 0f00 	cmp.w	lr, #0
 800625e:	eb0e 000c 	add.w	r0, lr, ip
 8006262:	da3f      	bge.n	80062e4 <__ieee754_sqrt+0x174>
 8006264:	2800      	cmp	r0, #0
 8006266:	db3d      	blt.n	80062e4 <__ieee754_sqrt+0x174>
 8006268:	f102 0801 	add.w	r8, r2, #1
 800626c:	1a9b      	subs	r3, r3, r2
 800626e:	458e      	cmp	lr, r1
 8006270:	bf88      	it	hi
 8006272:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006276:	eba1 010e 	sub.w	r1, r1, lr
 800627a:	4465      	add	r5, ip
 800627c:	4642      	mov	r2, r8
 800627e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006282:	3c01      	subs	r4, #1
 8006284:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006288:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800628c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006290:	d1dc      	bne.n	800624c <__ieee754_sqrt+0xdc>
 8006292:	4319      	orrs	r1, r3
 8006294:	d01b      	beq.n	80062ce <__ieee754_sqrt+0x15e>
 8006296:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8006314 <__ieee754_sqrt+0x1a4>
 800629a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8006318 <__ieee754_sqrt+0x1a8>
 800629e:	e9da 0100 	ldrd	r0, r1, [sl]
 80062a2:	e9db 2300 	ldrd	r2, r3, [fp]
 80062a6:	f7f9 ff9b 	bl	80001e0 <__aeabi_dsub>
 80062aa:	e9da 8900 	ldrd	r8, r9, [sl]
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4640      	mov	r0, r8
 80062b4:	4649      	mov	r1, r9
 80062b6:	f7fa fbc7 	bl	8000a48 <__aeabi_dcmple>
 80062ba:	b140      	cbz	r0, 80062ce <__ieee754_sqrt+0x15e>
 80062bc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80062c0:	e9da 0100 	ldrd	r0, r1, [sl]
 80062c4:	e9db 2300 	ldrd	r2, r3, [fp]
 80062c8:	d10e      	bne.n	80062e8 <__ieee754_sqrt+0x178>
 80062ca:	3601      	adds	r6, #1
 80062cc:	4625      	mov	r5, r4
 80062ce:	1073      	asrs	r3, r6, #1
 80062d0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80062d4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80062d8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80062dc:	086b      	lsrs	r3, r5, #1
 80062de:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80062e2:	e759      	b.n	8006198 <__ieee754_sqrt+0x28>
 80062e4:	4690      	mov	r8, r2
 80062e6:	e7c1      	b.n	800626c <__ieee754_sqrt+0xfc>
 80062e8:	f7f9 ff7c 	bl	80001e4 <__adddf3>
 80062ec:	e9da 8900 	ldrd	r8, r9, [sl]
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4640      	mov	r0, r8
 80062f6:	4649      	mov	r1, r9
 80062f8:	f7fa fb9c 	bl	8000a34 <__aeabi_dcmplt>
 80062fc:	b120      	cbz	r0, 8006308 <__ieee754_sqrt+0x198>
 80062fe:	1cab      	adds	r3, r5, #2
 8006300:	bf08      	it	eq
 8006302:	3601      	addeq	r6, #1
 8006304:	3502      	adds	r5, #2
 8006306:	e7e2      	b.n	80062ce <__ieee754_sqrt+0x15e>
 8006308:	1c6b      	adds	r3, r5, #1
 800630a:	f023 0501 	bic.w	r5, r3, #1
 800630e:	e7de      	b.n	80062ce <__ieee754_sqrt+0x15e>
 8006310:	7ff00000 	.word	0x7ff00000
 8006314:	08006528 	.word	0x08006528
 8006318:	08006520 	.word	0x08006520
 800631c:	00000000 	.word	0x00000000

08006320 <__ieee754_atan2>:
 8006320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006324:	ec57 6b11 	vmov	r6, r7, d1
 8006328:	4273      	negs	r3, r6
 800632a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80064a8 <__ieee754_atan2+0x188>
 800632e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8006332:	4333      	orrs	r3, r6
 8006334:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006338:	4543      	cmp	r3, r8
 800633a:	ec51 0b10 	vmov	r0, r1, d0
 800633e:	4635      	mov	r5, r6
 8006340:	d809      	bhi.n	8006356 <__ieee754_atan2+0x36>
 8006342:	4244      	negs	r4, r0
 8006344:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006348:	4304      	orrs	r4, r0
 800634a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800634e:	4544      	cmp	r4, r8
 8006350:	468e      	mov	lr, r1
 8006352:	4681      	mov	r9, r0
 8006354:	d907      	bls.n	8006366 <__ieee754_atan2+0x46>
 8006356:	4632      	mov	r2, r6
 8006358:	463b      	mov	r3, r7
 800635a:	f7f9 ff43 	bl	80001e4 <__adddf3>
 800635e:	ec41 0b10 	vmov	d0, r0, r1
 8006362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006366:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800636a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800636e:	4334      	orrs	r4, r6
 8006370:	d103      	bne.n	800637a <__ieee754_atan2+0x5a>
 8006372:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006376:	f7ff bd5b 	b.w	8005e30 <atan>
 800637a:	17bc      	asrs	r4, r7, #30
 800637c:	f004 0402 	and.w	r4, r4, #2
 8006380:	ea53 0909 	orrs.w	r9, r3, r9
 8006384:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006388:	d107      	bne.n	800639a <__ieee754_atan2+0x7a>
 800638a:	2c02      	cmp	r4, #2
 800638c:	d05f      	beq.n	800644e <__ieee754_atan2+0x12e>
 800638e:	2c03      	cmp	r4, #3
 8006390:	d1e5      	bne.n	800635e <__ieee754_atan2+0x3e>
 8006392:	a143      	add	r1, pc, #268	@ (adr r1, 80064a0 <__ieee754_atan2+0x180>)
 8006394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006398:	e7e1      	b.n	800635e <__ieee754_atan2+0x3e>
 800639a:	4315      	orrs	r5, r2
 800639c:	d106      	bne.n	80063ac <__ieee754_atan2+0x8c>
 800639e:	f1be 0f00 	cmp.w	lr, #0
 80063a2:	db5f      	blt.n	8006464 <__ieee754_atan2+0x144>
 80063a4:	a136      	add	r1, pc, #216	@ (adr r1, 8006480 <__ieee754_atan2+0x160>)
 80063a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063aa:	e7d8      	b.n	800635e <__ieee754_atan2+0x3e>
 80063ac:	4542      	cmp	r2, r8
 80063ae:	d10f      	bne.n	80063d0 <__ieee754_atan2+0xb0>
 80063b0:	4293      	cmp	r3, r2
 80063b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80063b6:	d107      	bne.n	80063c8 <__ieee754_atan2+0xa8>
 80063b8:	2c02      	cmp	r4, #2
 80063ba:	d84c      	bhi.n	8006456 <__ieee754_atan2+0x136>
 80063bc:	4b36      	ldr	r3, [pc, #216]	@ (8006498 <__ieee754_atan2+0x178>)
 80063be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063c6:	e7ca      	b.n	800635e <__ieee754_atan2+0x3e>
 80063c8:	2c02      	cmp	r4, #2
 80063ca:	d848      	bhi.n	800645e <__ieee754_atan2+0x13e>
 80063cc:	4b33      	ldr	r3, [pc, #204]	@ (800649c <__ieee754_atan2+0x17c>)
 80063ce:	e7f6      	b.n	80063be <__ieee754_atan2+0x9e>
 80063d0:	4543      	cmp	r3, r8
 80063d2:	d0e4      	beq.n	800639e <__ieee754_atan2+0x7e>
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80063da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80063de:	da1e      	bge.n	800641e <__ieee754_atan2+0xfe>
 80063e0:	2f00      	cmp	r7, #0
 80063e2:	da01      	bge.n	80063e8 <__ieee754_atan2+0xc8>
 80063e4:	323c      	adds	r2, #60	@ 0x3c
 80063e6:	db1e      	blt.n	8006426 <__ieee754_atan2+0x106>
 80063e8:	4632      	mov	r2, r6
 80063ea:	463b      	mov	r3, r7
 80063ec:	f7fa f9da 	bl	80007a4 <__aeabi_ddiv>
 80063f0:	ec41 0b10 	vmov	d0, r0, r1
 80063f4:	f7ff feb4 	bl	8006160 <fabs>
 80063f8:	f7ff fd1a 	bl	8005e30 <atan>
 80063fc:	ec51 0b10 	vmov	r0, r1, d0
 8006400:	2c01      	cmp	r4, #1
 8006402:	d013      	beq.n	800642c <__ieee754_atan2+0x10c>
 8006404:	2c02      	cmp	r4, #2
 8006406:	d015      	beq.n	8006434 <__ieee754_atan2+0x114>
 8006408:	2c00      	cmp	r4, #0
 800640a:	d0a8      	beq.n	800635e <__ieee754_atan2+0x3e>
 800640c:	a318      	add	r3, pc, #96	@ (adr r3, 8006470 <__ieee754_atan2+0x150>)
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f7f9 fee5 	bl	80001e0 <__aeabi_dsub>
 8006416:	a318      	add	r3, pc, #96	@ (adr r3, 8006478 <__ieee754_atan2+0x158>)
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	e014      	b.n	8006448 <__ieee754_atan2+0x128>
 800641e:	a118      	add	r1, pc, #96	@ (adr r1, 8006480 <__ieee754_atan2+0x160>)
 8006420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006424:	e7ec      	b.n	8006400 <__ieee754_atan2+0xe0>
 8006426:	2000      	movs	r0, #0
 8006428:	2100      	movs	r1, #0
 800642a:	e7e9      	b.n	8006400 <__ieee754_atan2+0xe0>
 800642c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006430:	4619      	mov	r1, r3
 8006432:	e794      	b.n	800635e <__ieee754_atan2+0x3e>
 8006434:	a30e      	add	r3, pc, #56	@ (adr r3, 8006470 <__ieee754_atan2+0x150>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f7f9 fed1 	bl	80001e0 <__aeabi_dsub>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	a10d      	add	r1, pc, #52	@ (adr r1, 8006478 <__ieee754_atan2+0x158>)
 8006444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006448:	f7f9 feca 	bl	80001e0 <__aeabi_dsub>
 800644c:	e787      	b.n	800635e <__ieee754_atan2+0x3e>
 800644e:	a10a      	add	r1, pc, #40	@ (adr r1, 8006478 <__ieee754_atan2+0x158>)
 8006450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006454:	e783      	b.n	800635e <__ieee754_atan2+0x3e>
 8006456:	a10c      	add	r1, pc, #48	@ (adr r1, 8006488 <__ieee754_atan2+0x168>)
 8006458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800645c:	e77f      	b.n	800635e <__ieee754_atan2+0x3e>
 800645e:	2000      	movs	r0, #0
 8006460:	2100      	movs	r1, #0
 8006462:	e77c      	b.n	800635e <__ieee754_atan2+0x3e>
 8006464:	a10a      	add	r1, pc, #40	@ (adr r1, 8006490 <__ieee754_atan2+0x170>)
 8006466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800646a:	e778      	b.n	800635e <__ieee754_atan2+0x3e>
 800646c:	f3af 8000 	nop.w
 8006470:	33145c07 	.word	0x33145c07
 8006474:	3ca1a626 	.word	0x3ca1a626
 8006478:	54442d18 	.word	0x54442d18
 800647c:	400921fb 	.word	0x400921fb
 8006480:	54442d18 	.word	0x54442d18
 8006484:	3ff921fb 	.word	0x3ff921fb
 8006488:	54442d18 	.word	0x54442d18
 800648c:	3fe921fb 	.word	0x3fe921fb
 8006490:	54442d18 	.word	0x54442d18
 8006494:	bff921fb 	.word	0xbff921fb
 8006498:	08006548 	.word	0x08006548
 800649c:	08006530 	.word	0x08006530
 80064a0:	54442d18 	.word	0x54442d18
 80064a4:	c00921fb 	.word	0xc00921fb
 80064a8:	7ff00000 	.word	0x7ff00000

080064ac <_init>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr

080064b8 <_fini>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr
